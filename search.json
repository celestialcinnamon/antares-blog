[{"title":"Mga Formatting Context ng CSS","url":"/antares-blog/tl/formatting-context-iwd-1/","content":"Sa unang bahagi ng Intrinsic Web Design series, titingnan natin ang mga tools na available na sa atin para mag-layout.\n<!--more-->\n\nSa mga Web design eras bago ang Intrinsic Web Design, nag-focus ang mga Web developers sa pagre-repurpose ng mga CSS property para gamitin sila sa mga bagay na hindi naman talaga para doon ginawa. Halimbawa, para makagawa ng mga \"columns\", gumamit tayo ng mga float. Dahil dito, mas madaling makalimutan kung para saan talaga ginawa ang mga CSS property na ginagamit natin. Kaya ngayon, simulan nating ibalik sa ayos at i-adjust ang unawa natin sa mga CSS properties. Pag-usapan natin ang mga formatting context.\n\n## Ano ba ang Formatting Context?\n\nGanito ang definition ng CSS Display specification sa term na <i>formatting context</i>:\n\n> A formatting context is the environment into which a set of related boxes are laid out. Different formatting contexts lay out their boxes according to different rules.<sup id=\"src-1\">[1](#ref-1)</sup>\n\nSa madaling sabi, ang <dfn>formatting context</dfn> ay isang <i>environment</i> o set of rules para sa paglalatag ng mga boxes, o element, sa isang layout. Ito ang paraan ng pagle-layout.\n\nPara mas lalo iyang maging malinaw, tingnan natin ang isang formatting context na baka madalas mo nang ginagamit nang hindi mo namamalayan: ang <i>Block Formatting Context</i> (BFC)\n\n## Ang Block Formatting Context\nKapag gumagawa tayo ng BFC, gumagawa tayo ng bagong layout environment para sa mga <em>children</em> ng element na iyon. Nagkakaroon tayo ng BFC kapag ang element ay:\n\n- ang root element (e.g. kapag ang element ay `<html></html>`)\n- naka-float\n- may `position: absolute`\n- may `display: inline-block`\n- may `overflow` na hindi `visible` ang value\n- child ng isang parent na naka-`flex` o `grid`\n- isang table cell\n\nPansinin ang halimbawang ito. Gumawa tayo ng isang container, at sa loob ng container na iyon ay may isang box.\n\n```html\n<div class=\"container\">\n  <div class=\"box\">\n    <p>Paragraph na may <code>float: left</code></p>\n  </div>\n</div>\n```\n<p class=\"codepen\" data-height=\"336\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"celestialcinnamon\" data-slug-hash=\"VwZbZeb\" style=\"height: 336px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"VwZbZeb\">\n  <span>See the Pen <a href=\"https://codepen.io/celestialcinnamon/pen/VwZbZeb/\">\n  VwZbZeb</a> by Francis Rubio-Salmazan (<a href=\"https://codepen.io/celestialcinnamon\">@celestialcinnamon</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\nDahil naka-float ang `.box` nag-collapse ang `.container`. Nagkakaganito ang `.container` dahil \"nawalan ito ng laman\"&mdash;inalis natin sa flow ng layout ang `.box` dahil sa nilagay nating `float: left`.\n\nPero kapag may ginawa tayo sa `.container` na magbibigay dito ng bagong BFC, iko-contain nito ang naka-float na `.box`. Puwede tayong mag-set ng overflow sa `.container`, o puwede rin natin itong lagyan ng float.\n\n```css\n.container {\n  overflow: hidden;\n}\n\n/* OR PUWEDE RING... */\n\n.container {\n  float: left;\n}\n```\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"css,result\" data-user=\"celestialcinnamon\" data-slug-hash=\"YzKVKpx\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"BFC Demo using overflow:hidden\">\n  <span>See the Pen <a href=\"https://codepen.io/celestialcinnamon/pen/YzKVKpx/\">\n  BFC Demo using overflow:hidden</a> by Francis Rubio (<a href=\"https://codepen.io/celestialcinnamon\">@celestialcinnamon</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\nKino-contain ng element na may Block Formatting Context ang lahat ng laman nito, regardless kung anomang properties ang mayroon sa mga child nito. Ito rin mismo ang ginagawa ng `overflow: hidden`: itinatago nito ang lahat ng element na lalagpas sa bounds ng element, at gumagawa rin ito ng bagong BFC.\n\nPero hindi naman para sa pagko-contain ng floated elements ginawa ang `overflow: hidden`, at hindi rin ito ginawa para maging mechanism sa paggawa ng bagong Block Formatting Context. Dahil dito, nagkakaroon tayo ng ilang mga problema kapag ginagamit natin ito sa paggawa ng bagong BFC, gaya halimbawa ng pag-clip sa mga `box-shadow`. Kaya naman may bago na tayong way ngayon ng paggawa ng bagong BFC: ang `display: flow-root`. Sa mga browsers na may support para sa bagong value na ito, pupuwersahin nito ang element na magkaroon ng bagong BFC nang walang unwanted side-effects. Kaya puwede natin itong ilagay sa example natin at ma-achieve ang gusto nating gawin.\n\n```css\n.container {\n  display: flow-root;\n}\n```\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"css,result\" data-user=\"celestialcinnamon\" data-slug-hash=\"gOYWYRz\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"BFC Demo using Flow-Root\">\n  <span>See the Pen <a href=\"https://codepen.io/celestialcinnamon/pen/gOYWYRz/\">\n  BFC Demo using Flow-Root</a> by Francis Rubio (<a href=\"https://codepen.io/celestialcinnamon\">@celestialcinnamon</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n\n## In and Out of Flow\n\nNang lagyan natin ang `.box` ng `float: left`, nag-collapse ang `.container` dahil nawalan ito ng laman; inalis kasi natin ang `.box` sa normal flow ng mga box. Sa normal flow, sinasakop ng mga box na naka-`display: block` (o mga block elements) ang buong width ng parent nito (maliban na lang kung may restrictions gaya ng padding ng parent, o kung may naka-set na width sa block element). Kapag naka-inline naman ang isang element, idi-display sila nang tabi-tabi na parang mga salita sa isang pangungusap.\n\nInaalis natin sa normal flow ang isang element kapag binigyan natin ito ng `float`, o kung naka-set ito sa `position: absolute` o `position: fixed`. Kapag naka-float ang isang element, \"lulutang\" ito pataas hanggang sa maka-encounter ito ng block element. Halimbawa, kung ang element na naka-float ay nasa loob ng isang inline element, magpo-float ito hanggang sa i-contain ito ng isang parent na block-level element.\n\n## Sa Susunod na Article\n\nSa susunod na article, pag-usapan naman natin ang mga float. Nasanay tayo sa Responsive Web Design era na gamitin ang mga float para gumawa ng mga kunwaring columns. Pero pag-usapan natin kung paano sila nagpa-function at kung para saan talaga dapat sila.\n\n## References\n\n- <cite>[The New CSS Layout](https://abookapart.com/products/the-new-css-layout)</cite>, Rachel Andrew. 2017 A Book Apart\n- <cite>[Block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)</cite>, Mozilla Developer Network\n\n## Footnotes\n<ol>  \n  <li id=\"ref-1\"><a href=\"#src-1\">^</a> [Formatting Context Definition](https://drafts.csswg.org/css-display-3/#formatting-context), CSS Display Specification. CSS Working Group</li>\n</ol>\n\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>","tags":["intrinsic web design"],"categories":["CSS"]},{"title":"Paano Mag-aral ng Programming?","url":"/antares-blog/tl/Paano-Mag-aral-ng-Programming/","content":"Ilang tips para sa mas mabisa at mabilis na pagkatuto ng programming.\n<!--more-->\n\nGusto ko sanang ikuwento kung paano ko naigapang ang buong buhay ko habang nag-aaral ako ng Computer Science sa kolehiyo nang walang device. Pero hindi ko na gagawin iyon dito sa intro. Simulan na natin agad ang tips.\n\n## Humanap ng Mapagkakatiwalaan at Angkop na Source\n\nDahil sa pag-boom ng information superhighway, mas marami na tayong puwedeng mapagkunan ng impormasyon. Kaya ang hamon sa atin ngayon ay kumuha ng impormasyon mula sa mga <em>mapagkakatiwalaang</em> source.\n\nPaano ba malalaman kung mapagkakatiwalaan ang isang source? Una sa lahat, trustworthy ito kung galing ito sa gumawa mismo ng technology na gamit mo. Halimbawa, kung nag-aaral ka ng Web development, wala nang mas mapagkakatiwalaan pa kaysa sa Web Standards documentations mula sa World Wide Web Consortium. Kung nag-aaral ka naman ng Java, wala nang mas mapagkakatiwalaan pa kaysa sa documentation ng Java.\n\nPero gaya ng mapapansin mo, masyadong teknikal ang mga ito. Hindi ganoon kadaling matuto gamit ang mga ito. Kaya tayo humahanap ng mga tutorials. Ang maganda rito, bihirang-bihira na magkaroon ng maling impormasyon tungkol sa programming. Kaya naman kung ano na lang ang lumabas sa results ng isang Google search, iyon na agad ang pinipili mo.\n\nAng salitang dapat dito ay <em>angkop</em>. Ibig sabihin, ginawa ba para sa iyo ang impormasyong nakuha mo, o para sa mga may experience na? Sino ba ang target audience ng information na iyan? Anong mga bagay ang dapat na alam na ng mga tao bago nila maintindihan ang information na ito?\n\n## Mag-program sa Papel\n\nTama, mag-program sa papel. Napakalaki ng pakinabang nito sa mga taong walang magagamit na device para mag-aral. Sa katunayan, ako mismo ang isa sa may pinakamalaking pakinabang mula rito. No'ng nasa unang dalawang taon ng college ako, wala akong laptop o computer na magagamit. Kaya ang ginagawa ko, sinusulat ko sa papel ang codes na naiisip ko. Especially kapag gawaan ng case study, bumibili ako ng isang pad ng intermediate pad paper, at isang set ng mga ballpen na iba-iba ang kulay (hindi na mahalaga ang brand, mas pinipili ko iyong mumurahin). Pagkatapos isinusulat ko sa papel ang naiisip kong code na may kasama pang syntax highlighting na parang nasa code editor ako.\n\nMalaking tulong ito sa lahat kahit sa mga may magagamit na laptop o computer. Una, kung nasa papel ang code mo, may isa ka pang backup ng code. Pangalawa, sinasabing katumbas ng pitong ulit na pagbabasa ang isang beses na pagsulat, kaya mas tatatak sa isip mo ang logic. At hindi gaya ng actual programming sa isang computer, mabagal ang proseso ng pagsusulat gamit ang kamay. Dahil dito mas nare-relax ang utak mo at mas makakapag-isip ka nang malinaw.\n\n## Magpatulong sa Iba\n\nHuwag mahiyang magpatulong sa iba. Kung may kilala kang magaling mag-program, hindi sila mag-aatubiling tulungan ka. Hindi ka nila ipapahiya (maliban na lang kung masama talaga ang ugali nila); sa katunayan, sila pa mismo ang tututok sa iyo para mas lalo kang matuto. Magtanong ka lang, makakahanap ka ng taong tutulong sa iyo.\n\n<q>Eh paano naman kung ako lang mag-isa ang nag-aaral?</q> Marami kang puwedeng tanungan sa Internet! Mag-email sa mga sikat na developer (sumasagot sila sa mga tanong, proven na iyan). Mag-message sa mga Facebook page tungkol sa programming (puwede kang mag-send ng message sa [Antares Programming Facebook page](https://www.facebook.com/antaresprogramming) kung may tanong ka). Puwede ka ring sumali sa mga Facebook groups tungkol sa programming.\n\n## Panoorin ang Iba Habang Nagpo-program\n\nMaraming developer ang nagla-livestream habang nagko-code sila. Marami nito sa Twitch at YouTube. Kung wala ka namang Internet, puwede mong panoorin ang kakilala mong magaling mag-program. At huwag kang mahiyang magtanong kung bakit iyon ang pinili nilang logic na gamitin sa halip na ibang paraan. Ipapaliwanag nila sa iyo iyon, at kadalasan (nangyayari sa akin 'to palagi) nari-realize nila na nagkamali sila kaya makakatulong kang ma-improve ang program na ginagawa nila.\n\n## Gamitin ang Suggestions ng IDE mo\n\nNoong 3rd year college na ako, niregaluhan ako ng tito ko ng laptop. Pero ang naging problema naman para sa akin, wala akong Internet. Kaya naging takbuhan ko ang mismong mga IDE na ginagamit ko: Visual Studio, Android Studio, at Visual Studio Code. Kapag nagta-type ako sa IDE ng code, may mga suggestions na lumalabas. Lahat ng nasa suggestion, sinusubukan kong gamitin.\n\nAng maganda sa mga IDE, may kasama silang integration sa mga documentation ng programming language na available offline kasama ng compiler ng programmig language. Kaya hindi lang sila nagbibigay ng code suggestions, ine-explain din nila kung ano ang nagagawa ng code snippet na iyon, ang mga parameters na kailangan mong ipasa, at iba pang information. Bukod pa riyan, magiging mas maalam ka tungkol sa tool na ginagamit mo, at magiging mas effective kang developer dahil dito. Malaking bahagi ng natutuhan ko sa programming ay galing sa technique na ito, at ilang beses na rin akong naisalba nito sa mga hands-on at practical exam sa college.\n\n## Tumingin sa Source Code\n\nMabuti na lang at nasa age na tayo ng open source software. Nandiyan ang [Github](https://github.com) na nagho-host ng source code ng ilan sa pinakasikat na software sa mundo, gaya ng Visual Studio Code at Linux. Malaki ang maitutulong nito sa iyo lalo na kung babasahin mo ang code nito. <strong>Hindi mo matututuhan kung paano mag-program</strong> sa pagtingin ng code ng ibang tao. Sa halip, matututuhan mo ang <em>best practices at estilo ng pagko-code</em>. Kadalasan kasing napakakomplikado para sa mga beginner ang mga source code na ito ng mga software na ginagamit ng maraming tao, kaya mahihilo ka lang kung susubukin mong intindihin lahat. Kaya naman mag-focus sa pagtingin sa style ng pagko-code na ginamit.\n\nMalamang na gumagamit ka rin ng [StackOverflow](https://stackoverflow.com). Sa halip na basta i-copy-paste ang code, subukan itong i-type ng sarili mong kamay. Sa ganitong paraan, mapipilitan kang tingnan ang source code at, possibly, magkaroon ng interes na intindihin ang code. Basahin din ang paliwanag kung bakit ito ang code na lumutas sa problema ng nagtanong (na dapat binasa mo rin).\n\n## Ituro sa Iba ang Natututuhan Mo\n\nIsa ako sa numero unong testigo sa kung gaano ka-effective ang technique na ito. Hindi mo lang magagamit ito sa programming; magagamit mo rin ito sa lahat ng iba pang bagay na gusto mong matutuhan. Pag-aralan ang topic na para bang ituturo mo ito sa iba. Kadalasan, sapat na na magkaroon ka ng ganitong mindset. Pero kung talagang ituturo mo ito sa iba, mas magiging effective ito.\n\nBilang lead writer ng Antares Programming, nagsusulat ako tungkol sa mga bagay na matagal ko nang alam. Pero hindi ka makakapaniwala kung gaano karaming impormasyon ang magiging mas madaling intindihin para sa 'yo once na inaral mo sila para ituro sa iba. Kapag itinuro mo kasi sa iba ang isang impormasyon, gagawin mo ang lahat para maging mas madali iyon para sa kanila, at sa ganitong process, makakahanap ka ng mga paraan para ituro iyon at mas maunawaan sa mas madaling paraan.\n\n## Hamunin ang Sarili Mo\n\nAng keyword dito ay <i lang=\"en\">side projects</i>. Huwag makontento na gumawa lang ng case study o thesis na in-assign sa iyo ng university o college mo, o ng client mo. Laging subukan ang mas mahihirap na bagay. Gumawa ka ng mga software na magagamit mo mismo. Hindi mahalaga kung ano ito o kung gaano ito kalaki; puwede kang gumawa ng grade calculator, budget allocator, study timer, sarili mong code editor, sarili mong programming language&mdash;walang limitasyon ang puwede mong maisip na gawin. Huwag mong itanong kung puwede bang magawa ang isang bagay; laging posible, ang dapat mong alamin ay paano. Lahat ng impormasyong kailangan mo ay available sa iyo, ang kailangan mo lang ay inspirasyon at sipag para makapagsimula&mdash;at matapos&mdash;ang side project na napili mo.\n\n<blockquote>\n  <p>Huwag mong itanong kung puwede bang magawa ang isang bagay; laging posible, ang dapat mong alamin ay paano.</p>\n</blockquote>\n\n## Conclusion\n\nKahit na marami kang nakuhang tips sa article na ito, tandaan na mga tips lang ito. Sa huli, ang ilan dito ay puwedeng mag-work para sa iyo, ang iba naman hindi. Pinakamahalaga pa rin sa lahat na alam mo ang sarili mong learning style at gamitin iyon sa advantage mo.","tags":["general","programming"],"categories":["Opinion"]},{"title":"Maging Safe sa Pagba-browse ng Web sites","url":"/antares-blog/tl/bakit-firefox-dapat/","content":"Mas delikado na ang Internet ngayon higit kailanman. Protektahan ang sarili mo at ang privacy mo.\n<!--more-->\n\nNapakadelikado ng Internet. Ang isa sa pinakamalaking industriya ngayon ay ang industriya ng <i>online advertising</i>. Isa itong anyo ng marketing na ginagawa sa Web. <a class=\"ref\" id=\"ref-1\">Noong 2017, umabot sa $83.0 billion ang revenue ng online advertising</a>.<sup><a class=\"footnote\" href=\"#foot-1\">*</a></sup> Pero hindi tulad ng tradisyunal na advertisements sa radyo, TV, at diyaryo, mas mapanganib ang online advertising. \n\n<a class=\"ref\" id=\"ref-2\">Ayon sa isang report ng US Senate, may <q>significant security, privacy risk</q> sa mga users ang online advertising.</a><sup><a class=\"footnote\" href=\"#foot-2\">*</a></sup> Gumagana ang mga online ads sa pamamagitan ng mga Web sites na nagdi-display nito. Kasama rito ang mga <i>popup ads</i>, mga video ads, at mga banners sa mga sites. Karamihan sa mga ito ay dumedepende sa isang technique na tinatawag na <i>behavioral targeting</i>. Sa technique na ito, tina-track ng ads ang online activity ng mga user para higit na maunawaan ang behavior ng mga consumer at maibigay sa kanila ang advertisements para sa mga produktong may pinakamalaking posibilidad na pag-interesan nila. Ginagawa ito sa pamamagitan ng pag-iiwan ng mga <i>cookie</i>, o mga maliliit na piraso ng data na naglalaman ng ilang impormasyon tungkol sa user. Totoo, puwede namang burahin ang lahat ng cookies mula sa lahat ng sites. Pero may mga ads na nagta-track ng <i>MAC address</i> sa halip na cookies. Ang MAC Address ay isang code o ID na parang plate number para sa device mo, desktop man ito, laptop, smartphone, tablet, o iba pa. Dahil dito, kahit burahin mo ang cookies, kilala ka pa rin ng online advertisers dahil sa MAC address mo.\n\nHindi lang ang online advertisement ang dapat mong pag-ingatan. Kung naka-log in ka sa Google account mo, ito man ay sa GMail, YouTube, Google Photos, o naka-activate ang Google account mo sa Android phone mo, tina-track ka ng Google. Gaano karami ang alam ng Google tungkol sa iyo? Lahat. As in lahat. Tingnan ang <a href=\"https://myactivity.google.com/myactivity\">Google&mdash;My Activity</a>. Nariyan ang lahat ng alam ng Google tungkol sa iyo&mdash;mga search mo sa Google at YouTube, mga apps na dinownload mo, mga apps na ginamit mo, \nat marami pang iba. Lahat ng ginagawa mo, alam ng Google.\n\n<figure class=\"img-wrapper \">\n  {% asset_img myactivity.png \"Ang nakalagay sa My Activity ko.\" %}\n  <figcaption>\n      Alam ng Google kahit ang mga apps na tiningnan mo lang at hindi dinownload mula sa Play Store.\n  </figcaption>\n</figure>\n\nKung gumagamit ka rin ng Google Maps, lalo na kung gamit ang Google Chrome, ire-record ng Google ang lahat ng lokasyong tiningnan mo, ang zoom level na gamit mo, at kung gaano katagal mo iyon tiningnan. Ire-record din nito ang <i>IP address</i> mo, na isa pang uri ng plate number para sa device na gamit mo. Kung ginagamit mo rin ang \"Sign Up with Google\" sa mga apps na hindi naman pag-aari ng Google, malalaman pa rin nila ang activity mo sa app na iyon. At kung gumagamit ka ng Android device, karamihan sa mga ginagawa mo sa device mo ay kayang i-extract ng Google. At kung gumagamit ka ng Gmail, lahat ng emails, file attachments, at contacts mo ay kayang makita ng Google. <q>Imposible!</q> baka maisip mo. Pero kung kaya itong gawin ng FBI na isang departamento ng gobyerno, kayang-kaya itong gawin ng isa sa pinakamalaking kompanya sa mundo. At hindi lang sila ang gumagawa nito; ginagawa rin ito ng Microsoft, Apple, at Facebook.\n\n## Paano ko mapo-protektahan ang sarili ko?\n\nMaraming paraan, pero isa sa pinakamalaki ay ang paglipat sa isang browser na may pakialam sa iyo: ang <i>Firefox</i>. Okay, baka isipin mo na isa lang itong shameless plug para sa isang browser na halos walang user (10% lang ng mga Internet browser ang gumagamit nito), at in a way totoo iyan, pero may iba pa. May maraming rason para piliin ang Firefox bukod sa privacy at security.\n\n### Mas Mabilis ang Firefox Kaysa Sa Chrome\nNang magsimula ang World Wide Web, isa ang Firefox sa pinakamalalaking contenders ng Browser Wars (i-PM n'yo ako kung gusto n'yong ikuwento ko rin 'to dahil super interesting ito), at may panahon na Firefox lang at Internet Explorer ang browsers na ginagamit ng mga tao (may iba rin siyempre, pero hindi gaanong kilala ang mga iyon). Pero nagsimulang bumagal ang Firefox, at noong 2008, ni-release ng Google ang Chrome, isang browser na di-hamak na mas mabilis kaysa sa Firefox, at mas stable kaysa sa Internet Explorer (na natalo na sa Browser Wars by this time).\n\nPero tapos na ang mga araw na iyon. Isa ako sa mga masigasig na naghintay sa paglabas ng Firefox 57, na tinawag na <i>Firefox Quantum</i>. Ayon sa Mozilla, dalawang beses itong mas mabilis kaysa sa mga naunang version ng Firefox, at nagre-require lang ng RAM na 30% na mas mababa kaysa sa Chrome. Ibig sabihin, puwede kang magbukas ng mas maraming tabs nang hindi bumabagal ang device mo. Mas mabilis ang mga Web apps at games sa Firefox, lalo na ang mga 3D games.\n\n### Open Source ang Firefox\nKapag sinabi nating <i>open source</i>, ibig sabihin bukas sa lahat ang source code ng Firefox, kaya lahat puwedeng tumingin dito, o mag-contribute pa nga para mas mapaganda ang browser. Ibig sabihin, kung may sinumang naglagay ng kahit anong source code na nagta-track, makikita ito ng lahat at puwede nila itong tanggalin.\n\n<figure class=\"img-wrapper \">\n  {% asset_img chromium.png \"Logo ng Google Chromium, ang open source version ng Chrome na walang kahit anong branding ng Google.\" %}\n  <figcaption>\n    Totoo, may pagka-open source din ang browser ng Google, pero y'ong Chromium iyon, hindi Chrome. Puwede pa rin nilang gawin ang kahit anong gusto nila nang walang nakakakita.\n  </figcaption>\n</figure>\n\n### May Pakialam sa Privacy ng Users Nito ang Firefox\n\nAng company/organization na nagme-maintain ng Firefox ay ang Mozilla. At ang Mozilla ay isang non-profit organization, at wala itong pakialam sa kung paano ka nagba-browse sa Web dahil hindi nito kailangang kumita sa pagtingin mo sa mga ads nila. Sa katunayan, noong 2014, <a href=\"https://blog.mozilla.org/community/2014/01/24/help-us-fight-for-privacy/\">nanawagan ang Mozilla ng tulong</a> para ipakipaglaban ang privacy ng mga users nito.\n\n### Mas Marami kang Customization na Magagawa sa Firefox\nMay mga users na gusto lang gumamit ng browser. Pero kung kagaya kita, baka gusto mo ring i-customize kung ano ang hitsura ng browser mo dahil sa \"art\". Kung gano'n, Firefox ang pinakamagandang browser para sa iyo. May marami itong <a href=\"https://addons.mozilla.org/en-US/firefox/themes/\">themes</a> na mapagpipilian. At kung hindi ka pa satisfied, puwede mo itong <a href=\"https://www.userchrome.org/\">i-customize gamit ang CSS</a>, na virtually ay walang limitasyon.\n\n### Web Developers: Use Firefox!\nMaaaring hawak ng Chrome ang kalakhan ng World Wide Web, pero sa opinyon ko, mas maganda ang Firefox para sa pagde-develop ng mga Web site. Sa ngayon, ang Firefox lang ang may <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts\">Grid Inspector</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_Flexbox_layouts\">Flexbox Inspector</a>, at iba pang mga features sa F12 DevTools nito. Dahil dito, mas madali mong magagamit ang mga bagong features ng Web platform. At kung hindi ka satisfied, palaging nandiyan ang mga third-party developer extension para sa Firefox.\n\n### Mas Healthy Ito Para sa Web\nAng lahat ng features ng World Wide Web ay pinagdedesisyunan ng W3C, partikular na ng mga working groups para sa HTML, CSS, at JavaScript. Dahil mas maraming users ang Google Chrome, may mga time na naglalabas sila ng bagong features na wala sa ibang browsers. Dahil dito, napipilitan ang ibang developers na gamitin ang feature kahit hindi ito gagana sa ibang browser. At sa katagalan kapag marami nang gumagamit nito, mapipilitan ang W3C na gawing official na feature ng Web platform ang feature na iyon ng Chrome para makasabay ang lahat ng iba pang browsers. Dahil dito, may kakayahan ang Chrome na diktahan ang direksyon ng World Wide Web.\n\nBukod pa riyan, ang karamihan sa browsers na gamit ng ilan sa atin, gaya ng Opera, Brave, Vivaldi, at Microsoft Edge, ay gumagamit ng mga parts mula sa Chromium. Ibig sabihin, hindi rin talaga sila 'ibang' browser dahil Chrome pa rin ang nagpapagana sa kanila behind the scenes.\n\nHindi ito maganda para sa Web, ang katangi-tanging produkto ng pagkakaisa ng sangkatauhan. Medyo korni pakinggan, pero totoo: ang World Wide Web ay produkto ng pagkakaisa ng mga tao mula sa lahat ng bansa at wika, at kailangan itong manatiling bukas sa lahat. Hindi dapat idikta ng iisang kompanya ang hinaharap nito dahil kahit pag-aari ito ng lahat, walang sinumang indibiduwal ang nagmamay-ari nito. Kung Firefox ang gagamitin mo, magiging mas ligtas ka sa paggamit ng Internet at puwede kang makatulong sa future ng World Wide Web. Kung mas maraming tao ang gagamit ng Firefox, mas magiging malaki ang impluwensya nito sa future ng Web platform at sa mga bagong features nito. Sa madaling salita, hindi na magiging kontrolado ng Google Chrome ang kalakhan ng World Wide Web.\n\n## Pero Huwag Mo Pa Ring I-uninstall Ang Chrome...\nKahit na lumipat ka na sa Firefox, kakailanganin mo pa rin ang Chrome&mdash;iyan ang nakakalungkot na balita. Kung gumagamit ka ng Chromecast streaming, hindi iyan gagana sa Firefox (pero dahil Google product ang Chromecast, ano pa bang aasahan mo?). Isa pa, maraming Web sites ang nagde-develop ng mga features nila na sa Chrome lang gumagana. At kahit na dine-<a class=\"ref\" id=\"ref-3\">dev shame</a><a href=\"#foot-3\">*</a> na sila, maaasahan nating magtatagal pa rin sila.\n\n## Ready ka na bang lumipat?\n\n\nKung oo, puwede mo nang <a href=\"https://www.mozilla.org/en-US/firefox/\">i-download ang Firefox browser</a> para sa Mac, Windows PC, o Linux. Puwede mong sundin ang guide na ito para maging madali at mabilis ang paglipat mo galing sa Google Chrome: [Switching From Chrome: How to Make Firefox Feel Like Home](https://www.makeuseof.com/tag/switching-from-chrome-make-firefox-feel-like-home/)\n\n<aside class=\"side-note\">\n  <header>\n    <h3>Sa Susunod na Article</h3>\n  </header>\n  <p>Abangan ang iba pang mga tips (na ginagamit ko rin personally) para maging mas safe sa paggamit ng Internet.</p>\n</aside>\n\n\n\n## Footnotes\n1. [<a href=\"#ref-1\" id=\"foot-1\">^</a>] <a href=\"https://www.emarketer.com/Report/US-Ad-Spending-eMarketers-Updated-Estimates-Forecast-2017/2002134\"><cite>US Ad Spending: eMarketer's Updated Estimates and Forecast for 2017</cite></a>.\n1. [<a href=\"#ref-2\" id=\"foot-2\">^</a>] <a href=\"https://www.hsgac.senate.gov/imo/media/doc/REPORT%20-%20Online%20Advertising%20&%20Hidden%20Hazards%20to%20Consumer%20Security%20&%20Date%20Privacy%20(May%2015%202014)1.pdf\"><cite>Online Advertising And Hidden Hazards To Consumer Security And Data Privacy</cite></a>.\n1. [<a href=\"#ref-3\" id=\"foot-3\">^</a>] <p><dfn>Dev Shame</dfn>&mdash;isang term na ako (yata) ang nag-coin. Tumutukoy ito sa pagko-call out ng mga developer sa ibang mga developer at Web sites na nagde-develop ng sites nila para lang sa isang browser.</p>\n\n## Further Reading\n1. [7 Reasons to Switch From Google Chrome to Firefox](https://www.makeuseof.com/tag/switch-chrome-firefox/). MakeUseOf, January 22, 2019\n1. [Help us fight for privacy](https://blog.mozilla.org/community/2014/01/24/help-us-fight-for-privacy/). about:community by Mozilla, January 24, 2014\n1. [Now is the time to switch back to Firefox](https://www.zdnet.com/article/now-is-the-time-to-switch-back-to-firefox/). ZDNet, April 22, 2014\n1. [The New Fast Browser for Mac, PC, and Linux | Firefox](https://www.mozilla.org/en-US/firefox/)\n1. [Introducing the New Firefox Quantum](https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/). The Mozilla Blog, November 14, 2017","tags":["web","privacy","security"],"categories":["General"]},{"title":"Mag-drop ka na sa College: 10 Web Sites na Puwede Mong Gamitin Para Maging Mas Magaling sa mga May Degree","url":"/antares-blog/tl/Mag-drop-ka-na-sa-College-10-Web-Sites-na-Puwede-Mong-Gamitin-Para-Maging-Mas-Magaling-sa-mga-May-Degree/","content":"\nOo, puwede kang 'wag nang mag-aral next sem. I-drop mo na lahat ng subject mo, kaya kang isalba ng mga sites na ito.\n\n<!--more-->\n\nOkay, sorry clickbait talaga iyan. 'Wag ka magda-drop sa school. Anyway, hindi lang 10 ang Web sites dito, at hindi lang Web sites ang mayr'on. Let's dive right in!\n\n# Web Sites\n\nSince kaunti lang ang mga technical na sites sa Filipino, lahat dito ay nasa English. Pero sobrang dami mong matututuhan sa kanila. Disclaimer: blogs ang mga ito kaya more on text ang content. Kung mas sanay ka sa videos, [may section din para doon](#Videos).\n\n<table class=\"table photo-table\">\n  <tbody>\n    <tr>\n      <th colspan=\"2\">Web Development in general</th>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"icon_navigation-laurel.svg\" alt=\"\" style=\"min-width: 100px;\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://alistapart.com/\" target=\"_blank\">A List Apart</a>\n        </strong>\n        <p><q lang=\"en\">A List Apart (ISSN: 1534-0295) explores the design, development, and meaning of web content, with a special focus on web standards and best practices.</q></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"css-tricks.png\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://css-tricks.com/\" target=\"_blank\">CSS Tricks</a>\n        </strong>\n        <p><q lang=\"en\">CSS-Tricks is really about building websites and all that entails, mostly from a front-end perspective. We have staff writers (see below) and loads of guest authors, so the content you find here will be as diverse as they are.</q></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"css-irl.png\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://css-irl.info/\" target=\"_blank\">CSS In Real Life</a>\n        </strong>\n        <p><q lang=\"en\">CSS In Real Life is a blog covering CSS topics and useful snippets on the web’s most beautiful language. Published by Michelle Barker, front end developer at Ordoo and CSS superfan.</q></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"html5-doctor.png\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://html5doctor.com/\" target=\"_blank\">HTML5 Doctor</a>\n        </strong>\n        <p><q lang=\"en\">We will publish articles relating to HTML5, its semantics, and how to use it right now. We also invite questions via Ask the Doctor. We’ll post answers in future articles so that everyone can benefit.</q></p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n# Videos\n\n<table class=\"table photo-table\">\n  <tbody>\n    <tr>\n      <th colspan=\"2\">CSS</th>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"Jen Simmons on Thinking With Grids at SmashingConf SF 2019-331578108.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://vimeo.com/331578108\" target=\"_blank\">Jen Simmons on Thinking With Grids at SmashingConf SF 2019</a>\n        </strong>\n        <p>Sa video, panoorin kung paano mag-isip ang Mozilla developer advocate na si Jen Simmons habang nire-recreate niya ang isang magazine layout gamit ang CSS Grid nang hindi niya pinaghahandaan beforehand.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"layout-land.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://www.youtube.com/channel/UC7TizprGknbDalbHplROtag/\" target=\"_blank\">Layout Land</a>\n        </strong>\n        <p>Alamin kung ano na ang posible ngayon sa graphic design sa Web&mdash;layout, CSS Grid, at iba pa. Isa itong serye para sa mga designers at Web developers. Nilikha ni Jen Simmons, Mozilla Designer at Developer Advocate.</p>\n      </td>\n    </tr>\n    <tr>\n      <th colspan=\"2\">JavaScript</th>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"wes-bos.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://www.youtube.com/channel/UC7TizprGknbDalbHplROtag\" target=\"_blank\">Wes Bos</a>\n        </strong>\n        <p>Kilala bilang \"King of JavaScript Challenges\" dahil sa isa niyang segment na <a href=\"https://www.youtube.com/watch?v=VuN8qwZoego&list=PLu8EoSxDXHP6CGK4YVJhL_VWetA865GOH\">JavaScript30</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"fff.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q\" target=\"_blank\">Fun Fun Function</a>\n        </strong>\n        <p>Youtube channel ni Mattias Peter Johansson, kilala bilang mpj. Tinatalakay sa mga video ang mas advanced na concepts ng JavaScript at mga libraries at frameworks nito.</p>\n      </td>\n    </tr>\n    <tr>\n      <th colspan=\"2\">Web Development in general</th>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"gdc.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw\" target=\"_blank\">Google Chrome Developers</a>\n        </strong>\n        <p>Mga videos tungkol sa progressive Web apps, bagong features ng Google Chrome para sa mga developers, videos ng mga conferences at seminars, best practices, mga development tips, user experience at accessibility, at iba pang interesanteng videos mula sa Google Developers team.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"coding-tech.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ\" target=\"_blank\">Coding Tech</a>\n        </strong>\n        <p>Mga videos ng mga talk at conferences tungkol sa software at Web development.</p>\n      </td>\n    </tr>\n    <tr>\n      <th colspan=\"2\">UI/UX Design</th>\n    </tr>\n    <tr>\n      <td>\n        <img class=\"maxify\" src=\"futur.jpg\" alt=\"\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://www.youtube.com/user/TheSkoolRocks\" target=\"_blank\">The Futur</a>\n        </strong>\n        <p><q lang=\"en\">Welcome to the Futur! The Futur of what? The Futur of education, design, business, learning... The Futur You! This is the future of online education for creative entrepreneurs.</q></p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n# Podcasts\n\nKung gusto mo namang may mapakinggan tungkol sa Web development kahit may ginagawa ka, tingnan ang mga podcast na ito:\n\n<table class=\"table photo-table\">\n  <tbody>\n    <tr>\n      <td>\n        <img src=\"syntax.png\" style=\"background: transparent\" class=\"maxify\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://syntax.fm\" target=\"_blank\">Syntax.FM</a>\n        </strong>\n        <p><q lang=\"en\">A Tasty Treats Podcast for Web Developers.</q></p>\n        <p>Sa podcast na ito, pinag-uusapan nina Wes Bos at Scott Tolinski ang mga pinakabagong balita sa mundo ng Web Development. Marami rin silang episodes tungkol sa ReactJS, VueJS, Node.JS, interviewing kapag naghahanap ng trabaho, portfolio tips, freelancing, at iba pa.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <img src=\"thewebahead.png\" class=\"maxify\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://thewebahead.net/\" target=\"_blank\">The Web Ahead</a>\n        </strong>\n        <p><q lang=\"en\">Jen Simmons speaks with world experts on changing technologies and the future of the web.</q></p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## People\n\nSa table naman na ito, nakalagay ang ilan sa mga taong dapat mong i-stalk para mas matuto lalo. Karamihan sa kanila ay mga Web developers.\n\n<table class=\"table photo-table\">\n  <tbody>\n    <tr>\n      <td>\n        <img src=\"csswg.png\" class=\"maxify\">\n      </td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://twitter.com/csswg\" target=\"_blank\">CSS Working Group</a>  \n        </strong>\n        <p>\n          Official Twitter account ng CSS Working Group, ang group na gumagawa ng mga standards para sa mga bagong features ng CSS.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"vlh.jpg\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"twitter.com/vlh\" target=\"_blank\">Val Head</a>\n        </strong>\n        <p>\n          Author ng aklat na <cite>Designing Interface Animation</cite>. Design advocate sa Adobe.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"rachelandrew.jpg\" alt=\"\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\"><a href=\"https://twitter.com/rachelandrew\" target=\"_blank\">Rachel Andrew</a></strong>\n        <p>Web Developer at member ng CSS Working Group. Isa sa mga sumulat ng standards para sa CSS Grid, Flexbox, at kasalukuyang gumagawa ng bagong standards para sa CSS Multi-column Layout.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"chriscoyier.jpg\" alt=\"\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\"><a href=\"https://twitter.com/chriscoyier\" target=\"_blank\">Chris Coyier</a></strong>\n        <p>Co-founder ng CodePen. Isa sa mga pangunahing writers ng CSS Tricks</p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"bradfrost.jpg\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\"><a href=\"https://twitter.com/brad_frost\" target=\"_blank\">Brad Frost</a></strong>\n        <p>Web designer, speaker, writer, at consultant. Author ng aklat na <cite>Atomic Design</cite>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"steveschoger.jpg\" alt=\"\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\">\n          <a href=\"https://twitter.com/steveschoger\" target=\"_blank\">Steve Schoger</a>\n        </strong>\n        <p>Author ng <cite>Refactoring UI</cite>. Sa mga tweet niya, matututo ka ng best practices sa user interface design, lalo na kung hindi ka marunong mag-design.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"timbernerslee.jpg\" alt=\"\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\"><a href=\"https://twitter.com/timberners_lee\" target=\"_blank\">Tim Berners-Lee</a></strong>\n        <p>Director ng W3C at ang nag-imbento ng World Wide Web.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"jensimmons.jpg\" alt=\"\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\"><a href=\"https://twitter.com/jensimmons\" target=\"_blank\">Jen Simmons</a></strong>\n        <p>Design advocate ng Mozilla, member ng CSS Working Group. Pangunahin niyang tinatalakay kung paano binabago ng CSS Grid ang graphics design sa Web. Siya rin ang nag-imbento ng katawagang <i>Intrinsic Web Design</i>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><img src=\"wesbos.jpg\" alt=\"\" class=\"maxify\"></td>\n      <td>\n        <strong class=\"cell-heading\"><a href=\"https://twitter.com/wesbos\" target=\"_blank\">Wes Bos</a></strong>\n        <p>Fullstack developer, at binansagang <i>King of Javascript Challenges</i> dahil sa course na ginawa niya (Javascript30).</p>\n      </td>\n    </tr>\n  </tbody>\n</table>","tags":["general"],"categories":["Resources"]},{"title":"Hindi Lang Para sa Mga Bulag ang Web Accessibility","url":"/antares-blog/tl/Hindi-Lang-Para-sa-Mga-Bulag-ang-Web-Accessibility/","content":"\nPrimarily, mga differently abled people, mga may kapansanan, at mga may edad na users ng software ang pumapasok sa isip natin kapag naririnig natin ang <i>accessibility</i>. Pero hindi lang sila ang nakikinabang dito.\n\n<!--more-->\n\nRegardless kung sino ang target audience ng software na dine-develop natin, responsibility natin bilang mga software engineers, developers, and programmers na gumawa ng mga software na magagamit ng pinakamaraming tao hangga't posible. Kasama rito ang mga may kapansanan sa paningin (either bulag o malabo ang paningin), sa pandinig, mobility disorders, at iba pang physical conditions na dahilan kung bakit nahihirapang gumamit ng devices ang iba sa ating mga users.\n\n  <blockquote>\n    <p lang=\"en\">\n      Web accessibility means that websites, tools, and technologies are designed and developed so that people with disabilities can use them.\n    </p>\n    <cite class=\"citation\">\n      <a href=\"https://www.w3.org/WAI/fundamentals/accessibility-intro/\">Introduction to Web Accessibility</a>\n    </cite>\n  </blockquote>\n\nSa isang [Twitter thread](https://mobile.twitter.com/feather/status/1077027857207984128), naikuwento ni [Derek Featherstone](https://mobile.twitter.com/feather) ang isa sa mga karanasan niya sa accessibility. Pansinin na walang kahit anong kapansanan si Featherstone, at pangunahin siyang nagtuturo tungkol sa kahalagahan ng accessibility sa mga Web sites.\n\nSa [thread na iyon](https://mobile.twitter.com/feather/status/1077027857207984128), ikinuwento niya na nang bumili siya ng bagong computer noong 1995, nagkamali siya ng pagse-set up nito. Dahil dito, kapag kumokonekta sa Internet ang computer n'ya, tumitigil sa paggana ang mouse niya. Nang panahong iyon, tanging keyboard ang naging paraan niya para magamit ang computer niya para humanap ng bagong mouse.\n\n<figure class=\"img-wrapper img-wrapper--illustration\">\n  <img src=\"feather-tweet.png\" alt=\"Tweet ni Derek Featherstone: “Keyboard accessibility and efficiency are fundamental requirements for doing anything with a computer, and that’s not changing any time soon”\">\n  <figcaption>\n    <q>Hindi puwedeng mawala ang keyboard accessibility at efficiency para sa kahit anong gawin ng user sa computer, at hindi pa iyon magbabago ngayon.</q>\n    <cite><a href=\"https://mobile.twitter.com/feather/status/1077030474218856448\" target=\"_blank\">Tingnan sa Twitter</a></cite></figcaption>\n</figure>\n\nIpinapakita ng thread na ito na hindi lang mga may kapansanan ang nakikinabang kapag accessible ang isang site. Siguro naranasan mo nang masiraan ng mouse. Sa mga ganitong situwasyon, sobrang laking tulong ng accessibility.\n\nSa kaparehas na thread na iyon, nag-reply si Prof. [Rosanna Cantavella](https://mobile.twitter.com/cantavest), isang editor at professor. [Naikuwento rin niya](https://mobile.twitter.com/cantavest/status/1077201867728408577) na kaliwete siya, pero sinanay siyang gamitin ang kanang kamay niya. Dahil dito, hirap siyang ipantutok ang kahit alin sa dalawang kamay niya, kaya hirap siyang gumamit ng mouse. Pansinin na hindi disabled si Prof. Cantavella, pero nakikinabang siya sa accessibility.\n\n<figure class=\"img-wrapper img-wrapper--illustration\">\n  <img src=\"feather-tweet-1.png\" alt=\"Tweet ni Rosanna Cantavella: “Keyboard accessibility is vital for those of us who don't [conform] to what is physically expected. I'm left-handed but was corrected in childhood. As a result I have no aim at all with any hand. I avoid the mouse/touchpad as much as I can. Keyboard is king.”\">\n  <figcaption>\n    <q>Mahalaga ang keyboard accessibility para sa aming mga hindi makasunod sa kung ano ang inaasahan sa users physically. Kaliwete ako pero naitama iyon no'ng bata ako. Dahil do'n hindi ako makapagtutok sa kahit alin sa dalawa kong kamay. Iniiwasan ko ang mouse/touchpad hangga't maaari. Panalo pa rin ang keyboard.</q>\n    <cite><a href=\"https://mobile.twitter.com/cantavest/status/1077201867728408577\" target=\"_blank\">Tingnan sa Twitter</a></cite></figcaption>\n</figure>\n\nSiyempre pa, hindi lang keyboard ang dapat na pagtuunan ng pansin. Gaya ng binabanggit sa [Introduction to Web Accessibility](https://www.w3.org/WAI/fundamentals/accessibility-intro/), kasama sa mga target ng Web accessibility ang mga taong walang disability o kapansanan, gaya ng:\n\n- mga gumagamit ng mobile devices, smart watches, smart TV, IOT devices, at iba pang device na may ibang input mode\n- mga taong may nagbabago nang kakayahan dahil sa edad\n- mga taong may \"pansamantalang kapansanan\" gaya ng injury sa braso, o mga taong nawalan ng salamin sa mata o hindi puwedeng magkabit ng contact lens nang pansamantala\n- mga taong may limitasyon dahil sa kung nasaan sila, gaya halimbawa ng maliwanag na sinag ng araw sa kung nasaan sila, o mga taong hindi puwedeng makinig sa audio dahil sa lugar kung nasaan sila\n- mga taong may mabagal na Internet connection, o per MB ang bilangan ng bandwidth, gaya ng mga taong gaya ko na nagpapa-load lang ng ₱50.00 sa tindahan para sa 1GB ng Internet\n\nSa sumusunod na video, tingnan ang iba pang mga situwasyon kung saan magiging malaking tulong ang Web accessibility.\n\n<figure class=\"embed-fig\">\n  <iframe class=\"youtube-frame\" width=\"853\" height=\"480\" src=\"https://www.youtube.com/embed/3f31oufqFSM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n  <figcaption>Nagkakaproblema ka ba sa video? <a href=\"https://youtu.be/3f31oufqFSM\" target=\"_blank\">Panoorin ito sa YouTube.</a></figcaption>\n</figure>\n\n## Conclusion\n\nKaraniwan na, basta tama ang paggamit mo sa mga HTML tags at controls, makakaabot ka na sa 50% ng accessibility na required<sup id=\"foot-1-src\"><a href=\"#foot-1\">1</a></sup>. Pero bukod pa doon, pag-isipang mabuti ang CSS at JavaScript functionalities ng site mo. At higit sa lahat, magbasa-basa ng tungkol sa Web accessibility. Halimbawa, tingnan ang mga [references](#References) na ginamit sa article na ito.\n\n\n---\n### Footnotes\n<ol>\n  <li id=\"foot-1\">\n    <sup><a href=\"#foot-1-src\">^</a></sup> Hindi ko ni-research 'to.\n  </li>\n</ol>\n\n### References\n\n- [Introduction to Web Accessibility](https://www.w3.org/WAI/fundamentals/accessibility-intro/)\n- [Web Accessibility Initiative](https://www.w3.org/WAI/)\n- [Windows Forms Accessibility](https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/windows-forms-accessibility). Dahil hindi lang sa Web kailangan may accessibility.\n- [How to Code WPF Applications for Accessibility](https://www.itprotoday.com/microsoft-visual-studio/how-code-wpf-applications-accessibility)\n- [Accessibility Best Practices](https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/accessibility-best-practices) para sa mga .NET applications\n- [Accessibility Overview](https://developer.android.com/guide/topics/ui/accessibility/) para sa mga Android applications","tags":["web","accessibility"],"categories":["Web Development"]},{"title":"Cards Layout Gamit ang CSS Multi-Column","url":"/antares-blog/tl/Cards-Layout-Gamit-ang-CSS-Multi-Column/","content":"\nHindi lang sa mga articles magagamit ang Multi-Column Layout. Tingnan kung paano makakagawa ng card layouts na kagaya ng sa Pinterest.\n\n<!--more-->\n\nKung pamilyar ka sa Pinterest, maaalala mong ganito ang layout ng mga cards nila:\n\n<figure class=\"img-wrapper img-wrapper--illustration\">\n  <img src=\"Pinterest-new-feed.png\" alt=\"Isang snapshot ng card layout ng Pinterest.\">\n  <figcaption>Ang cards layout ng Pinterest, kung saan ang mga cards ay may iba't ibang height.</figcaption>\n</figure>\n\nSa unang tingin, baka maisip mo na ang ginamit dito ay CSS grid o flexbox. Pero tingnan natin kung bakit hindi iyon ang gusto nating gamitin sa ganitong layout.\n\n## Trial #1: CSS Grid\n\nGusto natin na maging responsive ang lahat ng cards natin. Kaya sa mobile, isa-span lang ng mga cards ang width ng buong screen, kaya ang lahat ng cards layout CSS natin ay ilalagay natin sa loob ng isang media query.\n\n```css\n@media (min-width: 720px) {\n    .container {\n        display: grid;\n        background-color: #333;\n        padding: 1rem;\n\n        grid-template-columns: repeat(auto-fit, 100px);\n        grid-gap: 1rem;\n    }\n\n    .card {\n        background-color: #fff;\n        border-radius: 5px;\n        padding: 10px;\n        min-height: 100px;\n    }\n}\n```\n\n<div class=\"example-container\" id=\"example-1\">\n  <style>\n    #example-1 {\n      display: none;\n    }\n    \n    #example-1  .container {\n        display: grid;\n\n        grid-template-columns: repeat(auto-fit, 100px);\n        grid-gap: 1rem;\n        margin: 1rem;\n    }\n\n    #example-1 .card {\n        background-color: #fff;\n        border-radius: 5px;\n        padding: 10px;\n        min-height: 100px;\n    }\n\n    @supports(display: grid) {\n      #example-1-snapshot {\n        display: none;\n      }\n\n      #example-1 {\n        display: block;\n      }\n    }\n\n  </style>\n  <div class=\"container\">\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n  </div>\n</div>\n\n<figure class=\"img-wrapper img-wrapper--illustration\" id=\"example-1-snapshot\">\n  <img src=\"example-1.png\" alt=\"Kung hindi supported ng browser mo ang CSS grid, ganito dapat ang makita mo.\">\n</figure>\n\nMukhang ayos naman. Pero paano kapag magkakaiba na ang height ng mga cards, gaya sa Pinterest?\n\n<div class=\"example-container\" id=\"example-2\">\n  <style>\n    #example-2 {\n      display: none;\n    }\n    \n    #example-2  .container {\n        display: grid;\n\n        grid-template-columns: repeat(auto-fit, 100px);\n        grid-gap: 1rem;\n        margin: 1rem;\n        align-items: start;\n    }\n\n    #example-2 .card {\n        background-color: #fff;\n        border-radius: 5px;\n        padding: 10px;\n        min-height: 100px;\n    }\n\n    #example-2 .card:nth-child(odd) {\n      background-color: #acf;\n      min-height: 200px;\n    }\n\n    #example-2 .card:nth-child(even) {\n      background-color: #fca;\n      min-height: 150px;\n    }\n\n    @supports(display: grid) {\n      #example-2-snapshot {\n        display: none;\n      }\n\n      #example-2 {\n        display: block;\n      }\n    }\n\n  </style>\n  <div class=\"container\">\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n  </div>\n</div>\n\n<figure class=\"img-wrapper img-wrapper--illustration\" id=\"example-2-snapshot\">\n  <img src=\"example-2.png\" alt=\"Kung hindi supported ng browser mo ang CSS grid, ganito dapat ang makita mo.\">\n</figure>\n\nOoops. Medyo hindi maganda ang effect. Sa layout ng Pinterest, magkakarugtong ang mga cards. Pagkatapos ng isang card, kasunod agad nito ang isa pang card, hindi gaya sa example natin dito na magkakahiwalay. Ano ba ang nangyayari, bakit hindi sila magkakarugtong?\n\nKung Firefox ang gamit mo, puwede mong i-inspect ang example natin at makakakita ka ng mga ganitong grid lines:\n\n<figure class=\"img-wrapper img-wrapper--illustration\">\n  <img src=\"example-2-grid.png\" alt=\"Kung hindi supported ng browser mo ang CSS grid, ganito dapat ang makita mo.\">\n</figure>\n\nKaya pala. Hindi nagdurugtong ang mga cards dahil nasa magkakaiba silang grid cell. At ito ang isa sa mga limitations ng CSS layout. Masyadong rigid ang grid, at hindi ito puwedeng gawing flexible.\n\nSpeaking of flexible, para yatang may CSS property na binuo para maging flexible? Tama! Ang Flexbox. Subukan naman nating gawin iyon.\n\n## Try #2 Flexbox\n\nGawin ulit natin ang gaya ng sa grid example kanina:\n\n```css\n.container {\n    display: flex;\n    background-color: #333;\n    padding: 1rem;\n\n    flex-wrap: wrap;\n    gap: 1rem;\n    align-items: start;\n}\n\n.card {\n    background-color: #fff;\n    border-radius: 5px;\n    padding: 10px;\n    min-width: 100px;\n    min-height: 100px;\n}\n```\n\nAgain ayos na ulit ito kapag same widths and heights ang mga cards. Pero paano kapag magkakaibang heights gaya sa Pinterest?\n\n<div class=\"example-container\" id=\"example-3\">\n  <style>\n    #example-3 {\n      display: none;\n    }\n    \n    #example-3  .container {\n        display: grid;\n\n        grid-template-columns: repeat(auto-fit, 100px);\n        grid-gap: 1rem;\n        margin: 1rem;\n        align-items: start;\n    }\n\n    #example-3 .card {\n        background-color: #fff;\n        border-radius: 5px;\n        padding: 10px;\n        min-height: 100px;\n    }\n\n    #example-3 .card:nth-child(odd) {\n      background-color: #acf;\n      min-height: 200px;\n    }\n\n    #example-3 .card:nth-child(even) {\n      background-color: #fca;\n      min-height: 150px;\n    }\n\n    @supports(display: grid) {\n      #example-3-snapshot {\n        display: none;\n      }\n\n      #example-3 {\n        display: block;\n      }\n    }\n\n  </style>\n  <div class=\"container\">\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n  </div>\n</div>\n\nGano'n pa rin pala ang results. Ang nangyayari rito, ginawa nating `flex` ang `.container`. Kaya ilalatag nito ang mga `.card` pa-horizontal. Pero dahil naka-set ang `flex-wrap: wrap`, magra-wrap ang cards sa next line kapag napuno na ang buong width ng container. Pero gaya sa Grid, rigid ang row ng flexbox, kaya naman hindi puwedeng dumugtong ang mga vertically-aligned cards.\n\n## Try 3: CSS Multi-Column Layout\n\nTingnan mo naman ang effect kapag Multi-column layout ang ginamit natin:\n\n<div class=\"example-container\" id=\"example-4\">\n  <style>\n  #example-4 .container {\n    display: block;\n    background-color: #333;\n    padding: 1rem;\n    \n    columns: 100px;\n    column-gap: 10px;\n  }\n\n  #example-4 .card {\n    background-color: #fff;\n    border-radius: 5px;\n    padding: 10px;\n    min-height: 100px;\n    margin: 1rem auto;\n  }\n\n  #example-4 .card:nth-child(odd) {\n    background-color: #acf;\n    min-height: 200px;\n  }\n\n  #example-4 .card:nth-child(1) {\n    margin-top: 0;\n    min-height: 50px;\n  }\n\n  #example-4 .card:nth-child(3) {\n    min-height: 30px;\n  }\n\n  #example-4 .card:nth-child(4) {\n    min-height: 200px;\n  }\n\n  #example-4 .card:nth-child(5) {\n    min-height: 50px;\n  }\n\n  #example-4 .card:nth-child(6) {\n    min-height: 300px;\n  }\n\n  #example-4 .card:nth-child(7) {\n    min-height: 150px;\n  }\n\n  </style>\n  <div class=\"container\">\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n  </div>\n</div>\n\nGanito mismo ang gusto nating mangyari! Pero paano natin ito ginawa?\n\nUna muna nating inilagay ang `columns` property.\n\n```css\n.container {\n  columns: 100px;  \n}\n```\n\nAng `columns` property ay isang CSS feature na kagaya ng two columns sa mga word processing applications. Idinetalye ko kung paano gumagana ang Multi-column Layout sa <a href=\"https://www.youtube.com/watch?v=L7Zp1n6IoCk\" target=\"_blank\">unang episode ng Antares Vlog</a>. Sa example natin, hahatiin nito ang `.container` sa mga columns na tig-`100px` ang lapad o width. Pero hindi gaya ng grid o flexbox, pupunuin muna nito ang isang column mula taas pababa, at lahat ng hindi kasya sa column na iyon ay ililipat niya sa kasunod na column na `100px` din ang width. Gagawin niya ito hanggang sa mapuno ang buong width ng `.container`.\n\nDahil din dito kaya nakuha natin ang gusto nating mangyari na magkakarugtong ang cards natin. Para mas lalo mong maintindihan ang `columns` property, tingnan ang susunod na example:\n\n<div id=\"example-5\" class=\"example-container\">\n  <style>\n    #example-5 .container {\n      padding: 1rem;\n      columns: 200px;\n    }\n  </style>\n\n  <div class=\"container\">\n    <p>\n      Got studied carbon quietly central poetry wheel clock almost thin glass alike brain yourself let age fix balloon summer purple brief arrange offer bare\n    </p>\n    <p>\n      Said spell real believed even gather spite kind far major missing entirely needs seed sentence colony give try fresh respect activity plus giving sing\n    </p>\n    <p>\n      Circus darkness mad pack broken palace pony hunt kitchen because settle child driver solution frozen lion anybody attached position death customs course particular orange\n    </p>\n  </div>\n</div>\n\nSa example na ito, naka-set ang `columns` property sa `200px`. Kaya naman naging two columns (sa desktop) ang paragraph na may tig-`200px` na lapad. Ganito rin mismo ang nangyari sa cards layout natin.\n\n## Pero...\n\nPero hindi perpekto ang cards layout natin. Dahil sa mismong paraan ng paggana ng Multi-Column Layout sa CSS, ang pagkakasunod-sunod ng cards ay from top to bottom. Magiging problema ito dahil left to right ang paggalaw ng mata natin kapag nagbabasa (right to left sa ibang wika). Kaya kung gumagawa ka ng cards na dapat ay magkakasunod sa eksaktong order, hindi mabisang gamitin ang Multi-Column Layout para sa cards mo. Kapag lumagpas kasi sa height ng screen ang container ng cards mo, hindi na makikita ang ibang cards na gusto mo sanang nasa pinakaitaas ng layout mo.\n\n## Conclusion\n\n<figure class=\"img-wrapper img-wrapper--illustration float-right\">\n  <img src=\"tagpool.png\" alt=\"Ang tags at categories section sa home page ng Antares Blog\">\n  <figcaption>\n    CSS Multi-column layout ang ginamit ko para sa Categories at Tags section sa home page ng blog na ito.\n  </figcaption>\n</figure>\n\nAng article na ito ay karugtong ng unang episode ng Antares Vlog. Kaya kung hindi mo pa iyon napapanood, ayos lang, dahil napakadetalyado ng video na iyon, inabot din iyon ng halos kalahating oras. Ang punto ng article na ito ay ipakita sa inyo na hindi lang sa text magagamit ang CSS Multi-Column Layout. Magagamit mo rin ito sa iba pang mga bagay, gaya sa mga tags at categories section ng home page ng Antares Blog.","tags":["css","intrinsic web design","web design"],"categories":["CSS"]},{"title":"Destructuring sa JavaScript","url":"/antares-blog/tl/Destructuring-sa-JavaScript/","content":"\nAng destructuring ay isa sa mga bagong feature ng JavaScript na dumatng kasama ng ECMAScript 2015.\n\n<!--more-->\n\n<style>\n  .spoiler {\n    filter: blur(5px);\n    transition: filter 0.3s;\n  }\n\n  .spoiler:focus {\n    filter: none;\n    transition: filter 0.3s;\n  }\n</style>\n\nAng destructuring, ay isang pattern matching technique sa JavaScript. Sa destructuring, puwede mong i-map ang isang grupo ng variables sa isa pang grupo ng values. Puwede itong gawin sa mga objects pati na rin sa mga array.\n\n## Destructuring sa Objects\n\nKadalasan, kapag may properties ang isang object na gusto nating i-assign sa mga variable, ganito ang ginagawa natin:\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet name = person.name;\nlet age = person.age;\n```\n\nPero dahil sa object destructuring, puwede pa nating paikliin iyan:\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet { name, age } = person;\n```\n\nAng mahalaga rito ay magkapareho ang pangalan ng variables at ang mga properties ng objects. Ang `name` property ay mapupunta sa `name` variable, ganito rin ang mangyayari sa `age` variable.\n\nMinsan din gusto natin na ibahin ang pangalan ng variables:\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet personName = person.name;\nlet personAge = person.age;\n```\n\nSa destructuring, puwede mo ring ibahin ang pangalan ng variables:\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet { name: personName, age: personAge } = person;\n```\n\nMapapansing kagaya ito ng JSON syntax. Makukuha mo ang `name` property, pero mare-rename ang `name` papunta sa `personName`. Mare-rename ang `age` at magiging `personAge`.\n\nPero paano naman kung nagkakaroon ng null values sa mga properties? Puwede rin tayong maglagay ng default values sa mga variable.\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet name = person.name;\nlet age = person.age;\nlet phoneNumber = person.hasOwnProperty(\"phoneNumber\")\n    ? person.phoneNumber\n    : \"0912 345 6789\";\n```\n\nAng `hasOwnProperty()` ay isang function na built-in sa lahat ng JavaScript objects. Titingnan nito kung may property ang object na `phoneNumber`. At gumamit din tayo ng ternary `if`. Kapag true ang value ng `hasOwnProperty()`, ang magiging value ng `phoneNumber` ay ang `person.phoneNumber`. Pero kung false ito, ang string ang magiging value nito.\n\nBefore ES6, ganito natin ginagawa ang mga default values. Pero sa destructuring mas maikling syntax na ang ginagamit natin:\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet { name, age, phoneNumber = \"0912 345 6789\" } = person;\n```\n\nKapag walang `phoneNumber` property ang `person`, magde-default ito sa string na 'nilagay natin.\n\nPuwede mo rin itong i-rename at lagyan ng default value _nang sabay_.\n\n```js\nlet { phoneNumber: mobile = \"0912 345 6789\" } = person;\n```\n\n## Destructuring sa mga Function\n\nMakikita na agad na magagamit mo rin ito sa iba pang mga programming constructs. Kung nanggaling ka sa C# programming, malamang narinig mo na ang <i lang=\"en\">named parameters</i>. Although sa JavaScript walang gano'n, puwede nating magaya ang named parameters gamit ang destructuring.\n\n```js\nfunction greeting({ name, profession }) {\n    console.log(`Hello, ${name} the ${profession}`);\n}\n\nlet person = {\n    name: \"Greg Antares\",\n    profession: \"writer\"\n};\n\ngreeting(person); // Hello, Greg Antares the writer\n```\n\n## Nested Destructuring\n\nSa tunay na mundo, gumagamit tayo ng API sa Web. Sa ngayon, marami sa mga ito, kung hindi man lahat, JSON ang binabalik na format. Sa isa sa mga na-try ko na dating API, ganito ang format ng binabalik na data:\n\n```json\n{\n    \"name\": {\n        \"first\": \"Gregory\",\n        \"middle\": null,\n        \"last\": \"Antares\"\n    },\n    \"contact\": {\n        \"mobile\": \"0912-345-6789\",\n        \"email\": \"gregantares@testema.il\"\n    }\n}\n```\n\nMedyo komplikado ang format ng data in a sense na nested ito. Bad design bang matatawag ito? Not necessarily. Ito lang kasi talaga ang format na may sense para sa kung sinumang nag-design ng API. Pero bago pa ako magtuloy-tuloy <i lang=\"en\">down the rabbit hole</i>, bumalik tayo sa destructuring. Sa unang tingin baka malito-lito pa tayo, pero ia-apply lang natin iyong basic principles na na-establish na natin kanina:\n\n```js\nconst dataFromAPIServer = {\n    name: {\n        first: \"Gregory\",\n        middle: null,\n        last: \"Antares\"\n    },\n    contact: {\n        mobile: \"0912-345-6789\",\n        email: \"gregantares@testema.il\"\n    }\n};\n\nconst {\n    name: { first, last },\n    contact: { email }\n} = dataFromAPIServer;\n```\n\nBago ko ipaliwanag, gusto ko na i-challenge mo ang sarili mo. Ilang variables ang na-declare sa destructuring expression natin? Kung ready ka na i-click mo lang ang next paragraph. Kapag nag-blur ulit, click mo lang din ulit.\n\n<div class=\"spoiler\" tabindex=\"1\">\n<p>\n  Nagkaroon lang tayo ng tatlong variable declarations sa destructuring na ito, ang <code>first</code>, <code>last</code>, <code>email</code>. Paano nangyari iyon? Hindi made-declare ang <code>name</code> at <code>contact</code> dahil mga key sila ng properties. Kung ang gusto nating ma-declare ay <code>name</code> at <code>contact</code>, hindi na tayo maglalagay ng <code>first</code>, <code>last</code>, at <code>contact</code>.\n</p>\n</div>\n\n## Array Destructuring\n\nAkalain mo bang puwede rin pala ito sa mga array? Simple lang din ito. Pero 'di gaya sa objects, sequential ang array destructuring, kaya mahalaga ang pagkakasunod-sunod ng mga variable names.\n\nHalimbawa, tingnan ang example natin kanina:\n\n```js\nconst person = {\n    name: \"Greg Antares\",\n    age: 20\n};\n\nlet { name, age } = person;\n\n// ------ OR PUWEDE RING GANITO --------\nlet { age, name } = person;\n```\n\nKahit magkabaligtad ang positioning ng `age` at `name` variables, nga dahil nakadepende ito sa keys ng mga property, hindi magkakagulo. Pansinin naman kung paano gumagana ang array destructuring.\n\nHalimbawa, ginawa nating array ang first, middle, at last name. For the sake of example lang, kasi hindi ko nire-recommend na gawin mong array iyan, dapat kasi talaga naka-object sila para may label pero sige ikaw bahala kaniya-kaniya tayo ng trip sa buhay:\n\n```js\nconst name = [\"Johannes\", \"Gregory\", \"Antares\"];\n```\n\nKung magkakaroon ka ng pagkakataong humawak ng mga <i lang=\"en\">legacy applications</i>, or iyong mga lumang applications na mine-maintain na lang, siguro may ganitong types ng data structures. So ang task sa atin ngayon eh gawin itong malinaw. So ita-transform natin siya into different variables. Useful ulit dito ang destructuring:\n\n```js\nconst name = [\"Johannes\", \"Gregory\", \"Antares\"];\n\nconst [first, middle, last] = name;\n\nconsole.log(first); // Johannes\nconsole.log(middle); // Gregory\nconsole.log(last); // Antares\n```\n\nPansinin na mahalaga ang order o pagkakasunod-sunod ng `first`, `middle`, at `last`. Pansinin din na sa halip na curly braces, square brackets na ang gamit natin dahil array nga ito. Tingnan sa susunod na example ang mangyayari kapag napagbali-baligtad ang mga variables.\n\n```js\nconst name = [\"Johannes\", \"Gregory\", \"Antares\"];\n\nconst [middle, last, first] = name;\n\nconsole.log(first); // Antares\nconsole.log(middle); // Johannes\nconsole.log(last); // Gregory\n```\n\nPero paano kapag multidimensional ang array natin? Baka ang una mong instinct ay gawin ito:\n\n```js\nconst array = [1, 2, [3, 4], 5];\n\nconst [a, b, c, d, e] = array;\n```\n\nKapag ginawa mo iyan at tiningnan isa-isa ang values ng mga variables, mapapansin mong `undefined` ang value ng `e`, samantalang array naman ng `3` at `4` ang laman ng `c`. Dahil array ang nakalagay sa 3rd item ng `array`, ito ang ma-assign sa `c`. At dahil mayro'n lang apat na items, ang panglimang variable na `e` ay hindi mabibigyan ng value.\n\nKaya paano ang tamang way para gawin ito? Tingnan ang halimbawang ito:\n\n```js\nconst array = [1, 2, [3, 4], 5];\n\nconst [a, b, [c, d], e] = array;\n```\n\n## Destructuring Trick\n\nPuwede rin itong maging useful kapag gusto mong pagpalitin ng values ang dalawang variables! Kung walang destructuring ganito natin ginagawa ang pag-swap (alalahanin ang mga functions na ginawa mo sa C++ noon para makapagpasa ng bubble sort or merge sort sa professor mo):\n\n```js\nlet a = 10;\nlet b = 20;\n\nfunction swapValues(varA, varB) {\n    let temp = varA;\n    varA = varB;\n    varB = temp;\n\n    console.log(\"Variable A = \" + varA);\n    console.log(\"Variable B = \" + varB);\n}\n\nswapValues(a, b);\n\n// OUTPUT:\n// Variable A = 20\n// Variable B = 10\n```\n\nSo ang ginagawa natin dito, gumagamit tayo ng `temp` variable para ipahawak muna ang value ng isa sa mga variable para mapagpalit sila. Then saka natin ipapasa iyong value ng `varB` sa `varA`. Pagkatapos, iyong `varB`, ia-assign natin sa kaniya ang value na pinahawak natin kay `temp`. Mahaba-haba rin 'to, mga 3 lines of code. Pero tingnan kung paano ito magiging mas maikli gamit ang array destructuring:\n\n```js\nlet a = 10;\nlet b = 20;\n\nfunction swapValues(varA, varB) {\n    [varA, varB] = [varB, varA];\n\n    console.log(\"Variable A = \" + varA);\n    console.log(\"Variable B = \" + varB);\n}\n\nswapValues(a, b);\n\n// OUTPUT:\n// Variable A = 20\n// Variable B = 10\n```\n\nAno ang nangyayari dito? Para gumana ang array destructuring, kailangan natin muna silang gawing array. At iyon ang ginawa natin sa right side ng expression na `[ varB, varA ]`. Dahil sa part na iyan, pansamantala silang naging array. Pagkatapos saka natin ito in-assign sa left hand side ng expressiion gaya kapag nagde-declare tayo ng variables. Pero dahil naka-declare na sila parehas, hindi na natin sila puwedeng i-declare ulit. Tandaan na mahalagang-mahalaga rito ang order ng mga variables sa loob ng square brackets.\n\nSame result, pero nabawasan tayo ng dalawang lines of code. Ang drawback nga lang nito mas mahirap siyang basahin. Nasa sa iyo kung gusto mo itong gamitin for ease of use, or magsi-stick ka pa rin sa dati nang nakasanayan. Wala namang masamang manatili sa luma kahit may bago na. Sabi nga ng isang guest sa <cite>Kapuso Mo, Jessica Soho</cite>, <q>Buntot mo, hila mo.</q>\n\n## Conclusion (a.k.a Kuwento ng Aking Buhay)\n\nNagsimula akong mag-JavaScript no'ng 2016. At noon kamukhang-kamukha pa ng Java ang JavaScript. Pero simula nang malawakan nang na-adopt ang ECMAScript 6 (or ES2015 depende kung sino kausap mo), sobrang magkaiba na ang JavaScript noon saka ngayon. Parang kapag pinagtabi mo ang JavaScript ngayon saka JavaScript no'ng 2009, para na silang dalawang magkaibang language.\n\nPero hindi ba mas masaya nga ito? Mas marami na tayong puwedeng magawa. Mas marami pa tayong puwedeng matutuhan. At ebidensiya ito na <em lang=\"en\">Web is the way to go; the Web is the way forward.</em> Sa future, dahil natapos na akong magbabad sa CSS, nagbabalak din akong magsulat pa ng ilan pang articles tungkol sa mga bagong features ng JavaScript. And don't worry, hindi rin natin pababayaan ang HTML.\n","tags":["web","javascript","programming"],"categories":["JavaScript"]},{"title":"Feature Queries sa CSS","url":"/antares-blog/tl/Feature-Queries-sa-CSS/","content":"\nPaano mo masisigurong gagana sa lahat ng browsers ang design ng Web site mo? Kasama sa isang set ng techniques na kung tawagin ay <i>progressive enhancement</i> ang bagong feature ng CSS, ang Feature Queries.\n\n<!--more-->\n\nKilala rin ang Feature Queries bilang `@supports` rule. Gaya rin ito ng Media Queries, pero sa halip na type ng device, width or height ng viewport, atbp., tinitingnan nito kung supported ba ng browser ang isang feature na gusto mong gamitin. Para itong `if` statement sa CSS.\n\nKaya ito idinagdag sa CSS para makagawa tayo ng mga styles gamit ang pinakabagong CSS at magkaroon ng <i>graceful degradation</i> sa mga browsers na hindi sinu-support ang feature na gusto nating gamitin. Totoo, bago pa man lumabas ang Feature Queries, nasa dugo na ng CSS na mag-degrade gracefully; kapag hindi supported ng browser ang ginamit na style, ini-ignore lang ito. Sa paraang ito, hindi nasisira o naaapektuhan ang ibang styles na supported naman ng browser. Pero gaya ng makikita sa karanasan ng maraming Web developers, at dahil na rin sa bilis ng mga pagbabago sa Web platform, kailangan natin ng higit pa sa basta pag-ignore lang sa mga unsupported properties.\n\n<aside class=\"side-note\"><dl><dt>Graceful Degradation</dt><dd>Isang phenomenon sa Web platform kung saan binibigyan ng Web developer ang mga users ng pinakabagong browsers ng pinakamagandang experience gamit ang mga bagong features ng Web platform (hindi lang CSS) at binibigyan naman ng isang experience na may mas kaunting features ang mga users ng mga browsers na mas luma.</dd><dd>Halimbawa, puwedeng makakuha ang isang user ng pinakabagong Firefox ng isang site na gumagamit ng CSS Grid, pero para sa mga users ng Internet Explorer, makakakuha sila ng isang single-column layout na walang Grid. Nag-degrade ang experience sa Internet Explorer dahil walang CSS Grid, pero gumagana pa rin ito nang maayos.</dd></dl></aside>\n\nSa mga browsers, Opera ang pinakaunang nag-implement ng Feature Queries noong November 2012. Samantala, humabol naman ang Chrome at Firefox noong May 2013. Kaya kung mapapansin may halos limang taon na ang lumipas mula nang ilabas ito, pero hanggang ngayon parang kakaunti pa lang ang nakakaalam na may ganito pala. Noong December 2017, supported na ng 91.68% ng mga browsers ang Feature Queries. At tanging Internet Explorer na lang at Blackberry Mobile ang hindi nakakahabol, at, sa kaso ng IE, hindi na hahabol pa.\n\nSiguro kung nasa industry ka na, baka kailangang i-support mo pa rin ang Internet Explorer dahil hanggang ngayon may mga companies na mandatory na gamitin ang IE, kahit na unti-unti nang inaabandona at dini-discourage ng Microsoft ang paggamit nito. Pero 'wag kang mag-alala, dahil ito mismo ang tatalakayin natin: kung paano gagawa ng sites na gagana sa lahat ng browsers.\n\n## Browser Support Matrix\n\nSa isang artikulo ni Jen Simmons, ang <cite>Using Feature Queries in CSS</cite>, gumawa siya ng isang matrix o table ng mga situwasyong puwedeng mangyari kapag gumagamit tayo ng Feature Queries. Sa matrix na ito, mayroon tayong dalawang axis:\n\n- Supported ba ng browser ang Feature Queries o hindi?\n- Supported ba ng browser ang condition sa loob ng `@supports`?\n\n|May `@supports`|Walang `@supports`| |\n|---|---|--|\n|1. not ok| 2. ok|Supported ang feature|\n|3. ok| 4. ok|Hindi supported ang feature|\n\nSa matrix na ito, makikita natin na mayroong apat na scenario na puwedeng mangyari. Para mapadali ang pag-intindi natin, gamitin nating halimbawa ang Flexbox. Gusto natin kunwari na malaman kung anong mga browser ang nagsu-support sa Flexbox. Magkakaroon tayo ng apat na scenario:\n\n1. <b>NOT OK:</b> Walang Feature Query ang browser, pero supported ang flexbox.\n1. <b>OK:</b> May Feature Query ang browser, at supported din ang flexbox.\n1. <b>OK:</b> May Feature Query ang browser, at pero hindi ang flexbox. Ayos lang ito dahil puwede kang gumawa ng backup, or <i>fallback</i> na design kung sakaling walang flexbox support.\n1. <b>OK:</b> Walang Feature Query ang browser, at hindi rin supported ang flexbox. Same pa rin sa #2. Puwede kang gumawa ng fallback na layout in case na hindi gumana ang flexbox.\n\nSa unang kaso, hindi ito maganda. Wala tayong way para mapagana ang flexbox sa kahit na anong paraan. Lahat ng code sa loob ng Feature Query hindi gagana dahil hindi ito recognized ng browser. Kaya kahit na may mga code sa loob ng Feature Query na gumagana naman sa browser, gaya ng flexbox, hindi ito makikita ng browser. Kaya itong unang kasong ito ang dapat nating gawan ng paraan.\n\n## Ang Basics ng Feature Queries\n\nGaya sa kahit na anong conditional structures ng CSS, gumagamit ng boolean logic ang Feature Queries. Kapag naging `true` ang result ng query, mag-a-apply ang code sa loob ng Feature Query. Otherwise, hindi na ito papansinin altogether.\n\n```css\n.selector {\n  /* Mga styles na gagana sa lahat ng browsers */\n}\n\n@supports (property:value) {\n  .selector {\n    /* Mga styles na gagana lang sa mga browser na sinu-support ang property */\n  }\n}\n```\n\nPansinin na required ang parenthesis sa palibot ng `property: value`. At bukod pa riyan, dapat laging mauna ang mga styles na gagana sa mga lumang browser, kasama na ang mga fallback styles. Pagkatapos nito, saka mo pa lang puwedeng ilagay iyong mga bagong properties sa loob ng `@supports` block. Dahil sa <i>cascade</i> ng CSS, unang maa-apply ang mga fallback style, at kapag supported ng browser ang bagong properties, saka lang nito io-override ang code.\n\nHalimbawa, pansinin ang code na ito:\n\n```css\n.element {\n  background-color: red;\n}\n\n@supports (display: grid) {\n  .element {\n    background-color: green;\n  }\n}\n```\n\nUna munang maa-apply ang red na background color sa `.element`. Kung supported ng browser mo ang CSS grid, magiging kulay green ang box sa ibaba. Kung kulay red pa rin ito, hindi supported ng browser mo ang CSS grid (at sign iyon na dapat mag-update ka na; <i lang=\"en\">you're missing half of your life.</i>)\n\n<div id=\"example-480452\" class=\"example-container\">\n<style>\n  #example-480452 .element {\n    height: 100px;\n    width: 100px;\n    background-color: red;\n    margin: 1rem;\n  }\n  @supports (display:grid) {\n    #example-480452 .element {\n      background-color: green;\n    }\n  }\n</style>\n<div class=\"element\"></div>\n</div>\n\n## More Feature Queries\n\nDahil hindi ko kini-claim na expert ako sa CSS, gusto kong i-direct ang lahat ng nagbabasa nito sa napakahusay na article na ito ni Chen Hui Jing: [Cascading Web Design with Feature Queries](https://24ways.org/2017/cascading-web-design/). Sa article na iyan, tinalakay niya kung sa paanong iba pang mga paraan natin puwedeng magamit ang mga Feature Queries, at ang iba pang problems na puwedeng lumitaw mula rito.\n\nPuwede mo ring basahin ang mga articles na ito:\n\n- [How to use the `@supports` rule in your CSS](http://www.creativebloq.com/css3/how-use-supports-rule-your-css-11410545) ni Lea Verou, Enero 31, 2014\n- [Responsive typography with CSS Feature Queries](https://ar.al/scribbles/responsive-typography-with-css-feature-queries/) ni Aral Balkan, Abril 9, 2013\n\n## Challenge\n\nKaya mo kayang gawing <i lang=\"en\">progressively enhanced</i> ang kahit na anong site na gawa mo (or pina-practice mong gawin) gamit ang CSS Feature Queries? Kaya mo bang iangkop ang design ng site mo para magmukha pa rin itong maayos sa lahat ng browsers, kasama na ang Internet Explorer 9 (or 8 kung medyo masipag ka)?","tags":["css","web","intrinsic web design"],"categories":["CSS"]},{"title":"Mga Dapat Mong Matutuhan sa 2019 Tungkol sa Web Development","url":"/antares-blog/tl/Mga-Dapat-Mong-Matutuhan-sa-2019-Tungkol-sa-Web-Development/","content":"\nSa taong 2019, ano-ano ang mga dapat mong ilagay sa Web Development skillset mo?\n\n<!--more-->\n\nPumunta ako kahapon sa isang event, ang <i>CoRES 2019</i>, isang 4-day event na inihanda ng Polytechnic University of The Philippines kung saan nagsasalita ang iba't ibang mga professionals tungkol sa mga bagong technology na mayroon ngayon. Pumunta ako sa <cite>Web Developer Skillset</cite> talk ni Mr. Toni-Jan Keith Monserrat, kung saan in-introduce niya ang audience sa mga bagong updates sa Web standards. Binanggit din niya ang iba't ibang framework na ginagamit ngayon sa industriya gaya ng Angular, React, Vue, Ember, Redux, at iba pa.\n\nPero sa list na ito, hindi iyan ang gusto kong ikuwento. Dahil nga naman may maikling shelf life ang mga ito, mas praktikal na aralin ang Web standards.\n\nWeb standards\n: Web standards are the formal, non-proprietary standards and other technical specifications that define and describe aspects of the World Wide Web. In recent years, the term has been more frequently associated with the trend of endorsing a set of standardized best practices for building web sites, and a philosophy of web design and development that includes those methods. <cite>[Wikpedia](https://en.wikipedia.org/wiki/Web_standards)</cite>\n\nBasically ang Web standards ay ang \"reverse documentation\" ng World Wide Web. Sa documentation kasi, ang dino-document natin ay kung paano gumagana <em>in practice</em> ang isang product or object. Pero sa <dfn lang=\"en\">standards</dfn> (also known as <i lang=\"en\">specification</i>), ang dino-document ay kung paano <em>dapat</em> gumana ang isang product or object, regardless kung ganito ba talaga ito ini-implement sa tunay na mundo. Kumbaga, ang standards ang mga rules or guidelines na dapat masunod ng product.\n\nAng Web standards ang tinitingnan ng mga browser vendors kapag gumagawa ng bagong versions ng mga browser nila. Ang advantage nito, hindi na tayo magko-code ng individual sites na gagana lang for Firefox, na gagana lang for Chrome, etc. Dahil sa Web standards, nagiging <q>write once, run anywhere</q> ang Web. Ang mga browser na sumusunod sa standards ay tinatawag na <dfn lang=\"en\">standards-compliant</dfn>.\n\n<aside class=\"side-callout\">\n  <header>\n    <h3>Fun Fact</h3>\n  </header>\n  <div>\n    <p>Ang Mozilla Firefox ang pinaka-standards-compliant na browser as of February 2019. Sinusunod nito ang ~98% ng Web standards</p>\n\n  <blockquote class=\"twitter-tweet\">\n    <p lang=\"en\" dir=\"ltr\">\n    The crew at <a href=\"https://twitter.com/mozilla?ref_src=twsrc%5Etfw\">@mozilla</a> keep cruising right along. <a href=\"https://twitter.com/hashtag/Firefox?src=hash&amp;ref_src=twsrc%5Etfw\">#Firefox</a> 65 passes 96.68% of the tests, and Firefox Nightly (67) passes a whopping 98.46% (only 31 failures out of more than 2000 test!). They are perilously close to full spec-compliance, at this point.\n    </p>\n    &mdash; <cite>Jim Evans (@jimevansmusic) <a href=\"https://twitter.com/jimevansmusic/status/1092901252650946561?ref_src=twsrc%5Etfw\">February 5, 2019</a></cite>\n    </blockquote>\n</aside>\n\nMahalaga na mapag-aralan mo rin ang mga frameworks na gaya ng Angular at ReactJS. Pero sa pinaka-essence ng mga frameworks na ito, Web standards pa rin ang gumagana. At the end of the day, mga JavaScript files pa rin ang mga ito na naglalagay ng HTML tags at CSS rules sa browsers ng user. Hindi ko ina-advocate na iwasan mo ang mga ito, ang sinasabi ko lang ay dapat alam mo rin ang mga nasa list na ito para lumawak pa ang skillset mo.\n\nAng Web standards ay may mahabang shelf life. Ibig sabihin, ang mga Web site na ginawa mo ngayon ay gagana pa rin 10 years, 20 years in the future, basta sinusunod mo ang Web standards. At may mga patunay tayo na may ganiyan.\n\n<style>\n  @media only screen and (min-width: 768px) {\n    #space-jam {\n      margin-left: -3rem;\n      max-width: 30ch;\n    }\n  }\n</style>\n\n<figure class=\"img-wrapper\">\n  {% asset_img space-jam.png \"Ang Space Jam website\" %}\n  <figcaption>Ang <a href=\"https://www.warnerbros.com/archive/spacejam/movie/jam.htm\">Space Jam website</a> ay ginawa noong 1996, at gumagana pa rin ito ngayon.</figcaption>\n</figure>\n\nAng Web ay <dfn lang=\"en\">backwards-compatible</dfn>. Ibig sabihin, kahit pa i-update ito, gagawin ng <abbr title=\"World Wide Web Consortium\">W3C</abbr> ang lahat para hindi masira ang mga lumang Web sites dahil sa mga updates. Hindi ito tulad ng mga frameworks gaya ng Angular na dineprecate lahat ng features ng Angular 1 no'ng nilabas nila ang Angular 2. Kaya kapag alam mo ang Web standards, hindi ka mahuhuli kahit pa anong frameworks ang mauso o malaos.\n\n## Mga Bagong Features ng Web Platform\n\n### HTML\n\nSa pagpasok ng HTML5, may mga 104 na tags tayong puwedeng pagpilian. Pero nakakalungkot, maliit na parts lang nito ang alam ng karamihan sa mga estudyante ng computer courses. At sa mga tags na alam nila, maliit na parts lang din ang alam nilang gamitin <em>nang tama</em>.\n\nSa mga posts ko sa personal Facebook account ko at pati na rin sa Antares, paulit-ulit kong ine-emphasize ang kahalagahan ng tamang markup. Para kasi talaga rito ang HTML, sa pagbibigay ng meaning sa content. Kaya naman pinasisigla kita mahal kong mambabasa na aralin at gamitin nang tama ang mga tags na ito:\n\n- `main`\n- `article`\n- `section`\n- `aside`\n- `footer`\n- `address`\n- `cite`\n- `figure` at `figcaption`\n- `i` at `b` (more specifically, ang mga bagong meaning nila sa HTML5)\n- `em` at `strong`\n- `address`, `cite`, `q`, at `blockquote`\n- `details` at `summary`\n- `dl`, `dt`, `dd`\n- `picture`, `video`, `track`, at `audio`\n- `small`, `sup`, at `sub`\n\nAt pakisuyo lang din, gamitin ang HTML para bigyan ng meaning ang content, at hindi para baguhin kung ano ang hitsura ng page. Kung gusto mong baguhin ang presentation ng content, gumamit ng CSS.\n\n### CSS\n\n2018 na yata ang pinakamalaking taon para sa CSS simula nang i-release ang CSS3. Napakarami kasing nadagdag sa CSS last year, at basically para na itong Photoshop o Illustrator sa sobrang lakas nito.\n\n<aside class=\"side-callout\">\n  <header>\n    <h3>Fun Fact</h3>\n  </header>\n  <div>\n    <p>Ang HTML5 at CSS3 na ang huling versions. Hindi na magkakaroon ng HTML 6 at CSS 4 dahil ginawa na silang mga <i>Living Documents</i>. Patuluyang updates na lang ang magkakaroon, kung saan magdaragdag ng bagong features sa mga languages na ito.</p>\n</aside>\n\nKaya naman para makasabay sa kasalukuyang agos ng industriya pagdating sa design at Web layouts, puwede mong simulan nang aralin ang mga ito:\n\n- CSS Grid at Flexbox\n- Box Alignment\n- Mix Blend Modes\n- CSS Shapes\n- `@supports` o Feature Queries\n- `box-sizing: border-box;`\n\n### JavaScript\n\nHabang isinusulat ko ito, ang kasalukuyang version ng JavaScript ay ECMAScript 2019 o ES9. Pero nagsimula ang napakaraming pagbabago nang lumabas ang ES6 o ES2015. Matagal kasi ang inabot bago ito nai-release dahil mula nang ilabas ang ES5, parang wala nang masyadong pumansin sa JavaScript dahil sa pagpasok ng [Flash Era](/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/#flash). Pero noong 2015, nailabas ang ES5 (salamat sa mga bathala) dahil unti-unting nawala ang appeal sa tao ng Flash. Kaya heto ang mga dapat mong aralin para makasabay:\n\n- `const` at `let` variable declarations.\n- Ternary IF (`isTrue ? valueIfTrue : valueIfFalse`)\n- Fat Arrow Functions\n- `querySelector` at `querySelectorAll` functions (galing ito sa jQuery dahil palagi itong ginagamit ng mga developers)\n- Workers (na ginagamit para mag-execute ng program sa background)\n- Service Workers (para gumana pa rin ang site mo kahit offline ang user)\n- Web Components (para makagawa ka ng sarili mong HTML elements)\n- Geolocation API (para sa mga location-based experience)\n- Web Payments API (para sa mga e-commerce sites at transactions na may involved na pera)\n- Media Capture API (para makapag-stream ang user sa site mo ng kung ano ang nakikita ng camera nila)\n- Web Push Notifications API (para makapag-notify ka sa users mo, at sana 'wag mo itong abusuhin)\n- Houdini (para makagawa ka ng sarili mong CSS properties)\n- Web Assembly (isang anyo ng Assembly language para sa Web, ibig sabihin makakapag-run ka na rin ng kahit anong programs sa browser)\n\n## Conclusion\n\nKung titingnan baka sobrang dami nito para pag-aralan. Parang ang hirap makasabay. Baka hindi ka umabot. Pero hindi naman ito ganoon kahirap. Mukha lang itong marami pero makakahabol ka rin. At hindi mo rin kailangang malaman lahat. Kadalasan sapat nang alam mo na may ganitong features para alam mo na meron kang puwedeng gamitin kapag kailangan mo na sila.","tags":["css","javascript","html"],"categories":["Web Development"]},{"title":"Walang Sumasagot sa Tanong Ko—Paano Makakuha ng Sagot Kapag May Problema ka sa Programming","url":"/antares-blog/tl/Paano-Makakuha-ng-Sagot-Kapag-May-Problema/","content":"\nSabi nga nila, <q><i lang=\"en\">there are no stupid questions.</i></q> Pero may tamang paraan ng pagtatanong at paghingi ng tulong kapag nagkaroon ka ng problema sa programming.\n\n<!--more-->\n\nNaranasan mo na bang mag-post sa mga Facebook groups, o sa mga programming forums gaya ng StackOverflow, pero walang sumasagot? Dina-downvote ang tanong mo? O baka naman napuno ng Haha reacts ang post mo, at puro \"uso mag-Google\" at \"search-search din bes\" ang nasa comments? Hindi ikaw ang problema; ang tanong mo.\n\nKung isa kang bagúhan sa larangan ng programming, marami kang dapat tandaan kapag nagtatanong. Sa mga programming forums at discussion groups, paulit-ulit nang nakikita ng mga mas marurunong ang mga tanong na palaging itinatanong ng mga bagúhang programmer. Kaya kadalasan nang hindi ito pinapansin o tino-troll na lang din minsan. Oo, hindi magandang ginagawa nila ito, pero hindi mo rin sila masisisi dahil paulit-ulit na lumilitaw ang iyon at iyon ding mga tanong. Sa article na ito, pag-usapan natin kung paano mo mai-improve ang paraan mo ng pagtatanong para makakuha ng mas malaking tsansa na may sumagot sa tanong mo.\n\n(Ang artikulong ito ay adaptation ng artikulong <cite><a href=\"http://www.catb.org/~esr/faqs/smart-questions.html\"><i>How to Ask Questions the Smart Way</i></a> ni Eric Steven Raymond</cite>)\n\n## \"Bakit Gano'n ang Ugali ng mga Master sa Programming?\"\n\n<aside class=\"side-note\"><dl><dt>Master Programmer</dt><dd>Hindi ito actual definition, pero sa pagkakagamit sa article na ito, tumutukoy ito sa mga programmer na mas maraming alam at experience kaysa sa karamihan. Sila ang nilalapitan kapag may tanong, at isa sila sa mga may pinakamagagandang sagot sa mga tanong sa forums at groups.</dd></dl></aside>\n\nUna sa lahat, gusto ng mga \"master\" sa prog&shy;ram&shy;ming ang mga tanong, lalo na iyong napapag-isip sila, na&shy;cha-challenge sila. Para sa kanila, ma&shy;ga&shy;gan&shy;dang regalo ang mga magagandang tanong. Dahil kasi sa mga ganitong klase ng tanong nakikita nila iyong mga bagay na hindi nila napansin no'ng una o hindi nila naisip na puwede pala.\n\nPero gaya siguro ng makikita mo (personally, nakikita ko rin 'to nang madalas), hindi sila mahilig sa mga simpleng tanong. May times na nagtutunog mayabang sila, walang galang sa mga newbie. Pero hindi ito totoo. Although hindi ako sang-ayon sa ginagawa nilang ito, naiintindihan ko kung bakit nila 'to ginagawa. Hindi sila galit sa mga taong maraming tanong kundi sa mga taong parang hindi nag-iisip bago magtanong. Kapag mababaw ang tanong mo, kumukuha ka nang walang binibigay; nasagot na nila dati ang tanong mo, kaya wala na silang matututunang bago kapag sinagot ka nila ulit.\n\nIsa pa hindi sila mga bayád na tao na sasagot sa kahit anong tanong. Mga boluntaryo silang gustong tumulong sa mga natututo pa lang. Pero dahil sa mga tanong na&mdash;pasensya sa word na ginamit&mdash;walang kuwenta, nawawalan sila ng gana dahil pinapakita nating wala tayong kakayahang maghanap muna ng sagot sa sarili lang natin (dahil iyon ang kailangan mong gawin kapag master programmer ka na rin at wala nang ibang makakasagot sa mga tanong mo kundi ang hanapin ang sagot nang ikaw lang).\n\n## Bago ka magtanong...\n\nBago ka magtanong sa mga forum o group discussions, gawin mo muna ito:\n\n- Subukang humanap ng tanong na kapareho ng sa iyo sa forum. Gamitin ang search function (meron nito ang StackOverflow, at ang [Programmers, Developers Facebook Group](https://www.facebook.com/groups/361338743928370) kung kasali ka ro'n.)\n- Mag-search sa Google (or sa DuckDuckGo). Ito rin naman sasabihin nila sa iyo kapag nagtanong ka na, so gawin mo na agad.\n- <abbr tabindex=\"0\" title=\"Read The F*cking Manual\">RTFM</abbr>. Basahin muna ang manual, or documentation, ng language or framework na ginagamit mo. May search function na rin iyan, dahil kadalasan, nandoon ang sagot sa tanong mo.\n- Sa mga group o forums, kadalasan nang mayro'n silang <abbr title=\"Frequently Asked Questions\" tabindex=\"0\">FAQ</abbr> section. Bago mo itanong ang tanong mo, tingnan mo muna iyon dahil baka nandoon ang tanong mo.\n- Siyempre, bago ka humingi ng tulong sa iba, subukan mo munang kalkalin ang problema mo. Kadalasan nang mas marami kang matututunan kapag nag-experiment ka sa program mo bago ka nagtanong. Subukang palitan ang values ng mga variables, gumamit ng ibang construct, palitan ang mga datatypes etc.\n- Puwede bang 'wag ka nang mag-post ng tanong, sa kaibigan mo na lang? Baka kaya nilang sagutin ang tanong mo.\n- Basahin ang source code kung may access ka rito. Magandang practice din 'to (although ako hindi ko 'to ginagawa kasi kadalasan, hindi naman masyadong malala ang problema ko.)\n\nKapag nagtanong ka na, siguraduhing binanggit mo na ginawa mo na itong mga 'to. Maipapakita mo na hindi ka tamad, at na ginawan mo ng paraan ang problema mo. Commended ka sa mga master programmer kapag ganiyan.\n\nIhanda mo rin ang tanong mo. Ayusin mo ang wording para maging mas malinaw sa unang basa pa lang kung ano ang problema mo. Pagsikapan mo ring huwag magtunog minadali ang tanong mo (kulang sa detalye, j3j3M0n n@ pr@nq n@qttxt, etc.)\n\nIsa pa, huwag na huwag mong isiping entitled ka na sagutin nang iba, na para bang karapatan mong makakuha ng sagot at utang na loob sa iyo ng mga programmer na nagtanong ka. Hindi ka entitled. Hindi ka nagbayad para sa sagot. Lahat ng makukuha mo ay kawanggawa. Ikaw ang may utang na loob sa kanila. <i lang=\"en\">Repeat for three times.</i>\n\nHuwag ding magtanong na gaya ng <q>Pahingi po ng source code</q> o kaya <q>Paano po iyong step-by-step na gagawin?</q> Malaking kasalanan iyan, kahit dugo ng panganay na tupa o manok na natalo sa sabong hindi iyan kayang bayaran. Ang mga tanong na dapat tinatanong mo ay kagaya ng <q>Ano po kayang nakalimutan ko rito?</q> <q>Saan po puwedeng makakuha ng mas detailed na explanation?</q> <q>Ganito ang in-expect kong result, ano ang mali sa expectation ko?</q> Mas maganda 'to kasi pinapakita mong willing kang i-solve ang problem mo at hindi magpa-spoonfeed lang.\n\n## Kapag magtatanong ka na...\n\n### Piliin ang tamang forum na pagtatanungan\n\n'Wag kang magtatanong ng tungkol sa JavaScript sa isang group na tungkol sa Web *design*. 'Wag ka ring magtatanong kung paano mag-install ng Linux sa isang forum ng mga job postings at mga company na naghahanap ng applicants. 'Wag ka ring basta mag-chat o mag-PM sa kung sino ang makita mong nagko-comment ng sagot sa mga group. Hindi sila entitled na sagutin ka, at hindi kayo close.\n\nKapag sasali ka sa isang forum o group, tingnan ang FAQs, o charter para malaman kung tungkol saan ang group. Magbasa ka rin muna ng mga post para alam mo kung ano ang culture ng group o forum na iyon at masiguro mo na iyon ang tamang lugar para magtanong.\n\n### Gumamit ng maayos na headers\n\nSa mga forums na gaya ng StackOverflow at Reddit, kailangan mong mag-provide ng title. Sa Facebook groups wala nito, pero puwede mong i-consider na header ang unang sentence ng post mo. Sa paggawa ng title o header sa tanong, tandaan na walang pakialam ang mga taong babasa kung ilang oras o araw ka nang na-stuck sa problema mo o kung gaano ka kairita sa mga nangyayari sa buhay mo; alam na nila iyan, nararanasan nila iyan. 'Wag lagyan ang post ng <q>PLEASE HELP!</q> o kaya <q>Puwede pong magtanong?</q> Sayang sa space iyan, at mas mataas ang chance na hindi babasahin iyan.\n\nMas maganda kung susundin mo ang convention o pattern na \"object - problem\". Una, i-state kung anong bagay ang may problema (object). Puwedeng programming language ito, or framework na ginagamit mo, o IDE, API, o kahit ano na ginagamit mo na nagkaproblema ka. Pagkatapos, sabihin kung ano ang problema mo doon. Halimbawa:\n\n**HUWAG GANITO:** <q>Patulong po! Ilang araw ko na 'tong ginagawa ayaw pa rin. Ayaw gumana ng database ko.</q>\n\n**GANITO DAPAT:** <q>Sa Visual Basic .NET po, hindi pumapasok sa database iyong data. Visual Studio 2012 po gamit ko saka MS Access.</q>\n\n**MAS MAGANDA:**  <q>Sa Visual Basic .NET po using Visual Studio 2012 saka MS Access, hindi pumapasok sa database iyong data na na-insert ko.</q>\n\nAng maganda rito sa ganitong pattern, napipilitan kang mag-isip kung saan galing ang problema. Visual Basic .NET ba ang problema o iyong IDE mo? Baka naman iyong database na gamit mo?\n\n### Padaliin mo ang proseso ng pagre-reply\n\n'Wag mong tapusin ang post mo ('wag mo ring lagyan sa kahit saan) ng ganitong line: <q>Pa-PM po sa akin ng sagot. Thanks.</q> Walang sasagot niyan promise.\n\n### Ayusin ang grammar at spelling, gawing malinaw ang tanong\n\nAminin natin iyan, hindi tayo lahat grammar nerds. Pero kahit kaunting effort sa pag-aayos ng spelling, pagre-restructure ng sentence para maging malinaw, malaking bagay na iyon para maging maayos at madaling basahin ang tanong mo. Isa pa, maiiwasan na mali ang pagkakaintindi ng iba sa tanong mo. Hindi ka nila bibigyan ng sagot sa ibang tanong. At mas malaki ang chance na may sasagot sa iyo dahil hindi ka mukhang <i>noob</i> kahit sa language na sinasalita mo (kung noob ka kahit sa language na sinasalita mo, gurl ayusin mo iyan, di maganda iyan).\n\nKung nataon namang nagkaroon ka ng lakas ng loob at tapang na magtanong sa mga foreign language forums gaya ng StackOverflow at Reddit, pero hindi ka gaanong magaling sa English, i-alert mo kaagad sila. I-mention sa post mo na hindi mo native tongue ang English at sabihin na hindi ka pamilyar sa mga slangs at idiomatic expressions na puwedeng gamitin ng mga sasagot sa iyo. Mag-sorry din kung may spelling at grammar errors (although hindi talaga katanggap-tanggap ang spelling errors; i-search mo at i-double check ang post mo).\n\n### Gawing accessible ang pagbibigay ng attachments\n\nMay mga times na kailangan nating mag-provide ng source code snippet. 'Wag na 'wag gagawin itong mga 'to:\n\n- Mag-paste ng code sa mismong Facebook post. Masakit iyan sa mata.\n- Mag-include ng screenshot ng source code, pero literal na <i>screenshot</i>: talagang kinuhaan ng picture iyong mismong screen. Wala ring kapatawaran 'to, hindi 'to kayang bayaran ng income tax mo.\n- Abusuhin ang mga emoji. In real life, hindi ka laging nakangisi habang nagtatanong. Ayos na iyong isa o dalawang emoji.\n\n'Wag gawin iyang mga iyan. Kung kailangan mong mag-send ng attachments ganito ang gawin mo:\n\n- Kung kailangan mong magsama ng code snippet, ilagay ito sa PasteBin, Github Gists, o iba pang kapareho niyan. Pagkatapos iyong link ppapunta sa snippet mo doon ang i-link mo sa post.\n- Puwede ring gumamit ng screenshot (mas accessible 'to sa Facebook groups), pero utang na loob, gumamit ka ng snippet tool or kahit anong pang-screenshot. 'Wag mong pictur-an ang screen. Natatakpan iyong code ng reflection mula sa ilaw n'yong fluorescent lamp.\n- Kung mag-a-upload ka ng file, siguruhing maliit lang. At kuwestiyunin mo rin ang sarili mo kung kailangan mo talagang i-upload ang buong file, or files.\n\n### Maging precise at informative; magbigay ng details\n\n- Ipaliwanag kung ano ang step-by-step na ginawa mo bago nagkaroon ng error.\n- Sabihin kung ano ang environment na gamit mo: anong operating system, application, IDE, etc. Isama rin ang version ng mga ito.\n- Banggitin ang mga research na ginawa mo, kung ano'ng nahanap mo sa Google at iba pang forums, anong mga experiments ang nagawa mo na bago ka nagtanong.\n- Banggitin din kung anong mga recent changes sa computer mo ang nangyari. Anong mga applications na kaka-install mo lang ang posibleng naging dahilan ng error? Baka nag-update ka ng drivers? May binago ka sa settings?\n- Mas maganda kung magpo-provide ka ng way para maulit ng iba ang problema mo sa mga computer nila.\n\nGawin mo ang lahat ng kaya mo para masagot ang mga posibleng itatanong sa iyo in advance. Saka sobrang laking tulong kapag nakapag-provide ka ng way para ma-replicate ng iba ang problema mo dahil ma-e-explore nila in detail ang problema mo.\n\n### 'Wag i-down ang sarili\n\n<q>Sorry po, newbie lang ako.</q> Kung may ganiyan ka sa post mo, tanggalin mo na iyan. Hindi iyan nakakatulong. Nakaka-distract iyan.\n\n### Sabihin kung ano'ng goal mo\n\nSabihin mo sa post kung ano ang gusto mong ma-achieve sa ginagawa mo. Pagkatapos saka mo sabihin kung saang part ka nagkaproblema.\n\n### Huwag mag-post ng assignment\n\nOpo, may mga gumagawa nito. Lalo sa Facebook. Ayos lang humingi ng hints, pero 'wag humingi ng <em>sagot</em>. Saka baka makita rin iyan ng professor mo.\n\n### Alisin ang mga walang kuwentang tanong\n\n<q>Puwede pong patulong?</q> <q>May sagot po ba rito?</q> <q>May nakakaalam po ba rito?</q> Rhetorical na 'tong mga 'to. Tanggalin mo na iyan.\n\n### Tanggalin ang \"URGENT\" sa post mo\n\nMay mga nagpopost kasi na kailangan na raw nila agad-agad ang sagot. Mas mataas ang chance na walang papansin sa iyo kapag gano'n.\n\n### Mag-notify kapag na-solve na ang problema mo\n\nKung na-solve na ang tanong mo, laging i-edit ang post mo at lagyan ng <q>[FIXED]</q> o kaya naman ay <q>[SOLVED]</q>. Malalaman ng iba na nasagot na ang tanong mo, at puwede rin itong magamit kapag nagse-search sa group.\n\n## Kapag may nagbigay ng sagot...\n\n### Ang RTFM at STFW\n\nKapag ni-reply-an ka ng <abbr title=\"Read The F*cking Manual\">RTFM</abbr>, kabahan ka na. Ibig sabihin nito hindi mo ginawa ang kaya mo para mag-research muna. Ganito rin ang ibig sabihin ng <abbr title=\"Search The F*cking Web\">STFW</abbr>.\n\nKapag ni-reply-an ka ng ganito, malamang (a.) madaling hanapin ang sagot sa tanong mo, (b.) mas marami kang matututuhan sa ibang post kung saan sinagot ang tanong na kaparehas ng sa iyo kaysa kung isu-spoon feed ka lang. Hindi ka rin dapat ma-offend dito. Ibig sabihin nito, pinagpakitaan ka ng awa dahil kahit paano pinansin ka pa rin.\n\n### Kapag hindi mo maintindihan ang sagot\n\n'Wag agad mag-demand ng explanation at clarification. Bumalik ka ulit sa simula; i-search mo ulit iyong sinagot sa iyo. Kung pagkatapos no'n hindi mo pa rin maintindihan, saka ka magtanong ulit at humingi ng clarification.\n\n### Kapag medyo bastos ang sagot sa iyo\n\nKapag pakiramdam mo may pagka-<del>road</del><ins>rude</ins> ang sagot sa iyo, 'wag agad ma-offend. Maging kalmado lang at higit sa lahat, magalang, sa lahat ng replies mo. Kung talagang bastos ang nagre-reply sa iyo, makikita iyon ng moderators o ibang members na magsasabi sa moderators. Pero kung naging bastos ka sa nag-reply sa iyo para makaganti, baka gano'n talaga ang culture ng group na iyon, o baka talagang may point siya at oversensitive ka lang, at baka ma-ban ka sa group. Ayaw natin no'n.\n\n## Kapag wala kang sagot na nakuha\n\n'Wag kang ma-offend kung walang nag-comment sa post mo. Minsan talagang hindi alam ng kahit sino sa group ang sagot sa tanong mo. Hindi naman dahil walang sumagot sa iyo ay ayaw ka nang pansinin.\n\nIn general, 'wag mong i-repost ang tanong mo; nakakairita 'to. Baka natutulog pa ang taong nakakaalam ng sagot sa tanong mo kaya walang nagre-reply. Baka rin hindi maayos ang pagkakatanong mo, check mo rin. Subukan mo ring magtanong sa ibang groups.\n\n## Conclusion\n\nMedyo marami kang dapat alalahanin kapag nagtatanong. Nakita kong dapat magkaroon ng ganitong post dito dahil karamihan sa mga baguhang kakilala ko, hindi alam ito. At isa rin ito sa mga skills na madadala mo kahit tumagal na. Mawawala ang C at C++, kakaunti ang gumagamit ng Bootstrap at Foundation, malalaos ang object-oriented programming. Pero ang mga skills na gaya nito ay mananatili. Kaya sa susunod na magtanong ka, i-check ulit ang article na ito; i-bookmark mo para hindi mo makalimutan. Tandaan, parang kandado ang mga problema; nasa tamang tanong ang susi para makuha ang tamang sagot.","tags":["general","programming"],"categories":["Soft Skills"]},{"title":"Mula sa Interwebz","url":"/antares-blog/tl/Mula-sa-Interwebz/","content":"\nMatuto pa lalo mula sa mga blog posts, videos, at iba pa mula sa ibang bahagi ng World Wide Web.\n\n<!--more-->\n\nSimula sa susunod na linggo, January 14, 2019, may lilitaw nang seksiyon sa footer ng Antares Blog. Ang seksiyon na ito ay tatawaging \"Mula sa Interwebz\"\n\nBaka maisip mo, <i>ano na namang pakana iyan?</i> Siyempre naman, lahat ng naisusulat ko rito, galing din sa ibang mga posts at videos na gawa ng mga ekspertong gaya nina Chris Coyier, Rachel Andrew, Jen Simmons, Jeffrey Zeldman, at iba pa. Kaya naman, para mas mabilis makarating sa inyo ang impormasyon, puwedeng kayo na mismo ang tumingin mula sa mga blogs at videos nila.\n\nSa Mula sa Interwebz, magkakaroon ng mga links papunta sa mga posts, videos, tweets, graphics, at iba pa na makakatulong nang malaki sa ating lahat. Magkakaroon ng bagong ganito kada dalawang linggo, o mas madalas pa. \n\nMas maganda kung ipa-follow mo na sila sa lahat ng social media accounts na mayro'n sila. Hindi naman laging sagana sa content ang Antares, kaya dapat marunong na rin tayong humanap ng sites kung saan tayo lalong matututo (especially sa mga bagay na gusto nating aralin dahil apparently puro tungkol sa Web platform ang pino-post ni Francis sa Antares Blog).\n\nHabang papalapit tayo nang papalapit sa kalagitnaan ng 2019, lalo pang darami ang features ng Antares Blog. Dahil ganiyan ko kayo kamahal 🤣🤣🤣. Huwag kalimutang ikuwento sa mga kakilala mo ang Antares Blog. Hindi naman kailangang laging magbasa sa Blog na 'to dahil lagi ring may bagong posts sa [Facebook page ng Antares Programming](https://facebook.com/antaresprogramming). Salamat sa suporta ng 77 at dumarami pang likers ng Antares Programming!","tags":["announcement"],"categories":["Meta"]},{"title":"May Dark Mode na ang Antares","url":"/antares-blog/tl/May-Dark-Mode-na-ang-Antares/","content":"\nSimula January 9, 2019, may dark mode na ang Antares Blog. \n\n<!--more-->\n\nHindi naman 'to masyadong malaking pagbabago, at wala namang nagre-request nito. Pero dahil nga ako ang madalas na tumatambay sa site na ito dahil sa mga nilalabas kong content, napansin kong maganda kung may dark mode din kasi sumasakit na rin minsan ang mga mata ko habang nagsusulat.\n\nSa site na ito, makikita n'yo sa navigation bar ang crescent moon icon. Iyon ang magta-toggle ng dark mode sa site na ito. Mapapansin din na kahit ilang beses i-refresh ang pages, naka-dark mode pa rin ito. Sine-save kasi ng site ang dark mode preference mo sa `localStorage` ng browser mo. Siyempre, kapag nag-clear data ka, babalik sa light mode ang site.\n\nAgain, bukas ulit ang Antares sa feedback n'yo. Kaya mag-iwan lang ng comment sa [feedback sidebar](#feedback-sidebar-title) na nasa page na ito. Ilagay lang ang mga comment n'yo tungkol sa overall design, choice of colors, etc. sa field na \"Bakit ito ang rating mo?\"","tags":["announcement"],"categories":["Meta"]},{"title":"CSS Units: px, percent, rem, em... Ano Ba Dapat Ang Gagamitin Ko?","url":"/antares-blog/tl/CSS-Units-px-percent-rem-em-Ano-Ba-Dapat-Ang-Gagamitin-Ko/","content":"\nAlin sa mga length units ng CSS ang dapat gamitin, at kailan?\n\n<!--more-->\n\nPamilyar tayong lahat sa mga percent-based na sizes, lalo na kung naabutan mo ang Responsive Web Design era. Pero hindi mo rin makakaligtaan ang pixel sizes (`px`). Pero para makuha ang tamang responsiveness, gumagamit din tayo ng iba pang mga length units. Kasama rito ang kamakailan lang ay lalong sumikat na `em` at `rem` units.\n\nSa artikulong ito, iisa-isahin natin ang mga length units ng CSS, kapuwa ang mga gumagana sa lahat ng browsers, at ang mga paparating pa lang sa CSS sa hinaharap (dahil hindi pa rin sapat ang mga units natin, may hinihintay pa tayong mga bago).\n\n## Una sa lahat, anong pinagkaiba ng `em` sa `rem`?\n\nAyon sa MDN Docs, ang `em` ay <q>kumakatawan sa <i>calculated `font-size`</i> ng isang element.</q> Samantala, ang `rem` naman ay <q>kumakatawan sa <i>calculated `font-size`</i> ng root element, ang `<html>` sa kaso nating mga Web developer.</q> Kaya maliwanag na halos magkapareho ang dalawang ito; nakabase sila sa `font-size` ng isang element. In particular, sa laki ng letrang \"m\" sa font-size ng font na gamit mo. <sup>[citation needed]</sup>\n\nAno ang pagkakaiba ng `em` at `rem`? Karaniwan na, ang value ng `rem` ay naka-depende sa default font size ng browser (karaniwan nang `16px`), o sa isinet na value ng user. Samantala, ang `em` naman ay nakadepende sa `font-size` ng *mismong element*.\n\nBilang halimbawa, tingnan natin ito:\n\n```html\n<div class=\"container\"></div>\n```\n\n```css\n.container {\n  width: 3rem;\n}\n```\n\n<div class=\"example-container\">\n  <div class=\"container\" style=\"width: 3rem; height: 5rem; background-color: crimson;\"></div>\n</div>\n\nHindi ito madaling mapansin, pero nakasunod ang width ng `.container` sa font size ng `<html>` element. Tingnan naman natin ang `em`. Sa kasong ito, ise-set natin ang `font-size` ng `.container` para makita natin ang pagkakaiba.\n\n```html\n<div class=\"container\"></div>\n<div class=\"container-lg\"></div>\n```\n\n```css\n.container,\n.container-lg {\n  width: 3em;\n}\n\n.container {\n  font-size: 50px;\n}\n\n.container-lg {\n  font-size: 100px;\n}\n```\n\n<div class=\"example-container\">\n  <div class=\"container\" style=\"margin: 10px; font-size: 50px; width: 3em; height: 5rem; background-color: crimson;\"></div>\n  <div class=\"container\" style=\"margin: 10px; font-size: 100px; width: 3em; height: 5rem; background-color: crimson;\"></div>\n</div>\n\nMakikita mo ang pagkakaiba sa mga halimbawa ngayon. Parehas silang `3em` ang width, pero dahil magkaiba ang `font-size` ng dalawang ito, magkaiba rin ang naging width nila. Sinundan ng `em` ang `font-size` ng `.container`. Kung gagawan natin ito ng formula, makikita nating 3em = 3 * font-size. Ganito rin sa `rem`, ang pinagkaiba lang naka-depende ito sa `font-size` ng `<html>` element.\n\nPuwede naman ding i-override ang size ng isang `rem`. Kailangan mo lang i-set ang font size ng `<html>` element:\n\n```css\nhtml {\n  font-size: 20px;\n}\n```\n\n## Gusto kong maging responsive ang page ko. Percent lang ba ang puwede kong gamitin?\n\nSalamat sa [CSS Values and Units Module Level 4](https://drafts.csswg.org/css-values-4/#lengths), hindi na lang tayo restricted sa percent ngayon. Nadagdagan na tayo ng apat&mdash;oo, apat&mdash;na length units: ang mga tinatawag na <i>viewport units</i>, `vw`, `vh`, `vmin`, at `vmax`.\n\n\n### Ang `vw` at `vh`\nAng ibig sabihin ng `vw` ay \"viewport width\". Para din itong percentage, pero lagi lang itong nakadepende sa width ng browser window o screen ng phone/tablet (na tinatawag ding viewport). Kung paano ka gumamit ng percent, gano'n din ang paggamit ng `vw`. \n\nHalimbawa, kapag ginamit mo ang `50vw`, makukuha mo ang 50% ng *width ng viewport*. Kung matatandaan mo, sa `50%` makukuha mo ang kalahat ng width ng parent element, hindi ng screen.\n\nKatulad lang din ng `vw` ang `vh`, pero tumutukoy naman ito sa \"viewport height\". Makukuha mo rito ang percentage ng height ng viewport.\n\nSa halimbawang ito, pansinin kung paanong naapektuhan ng width ng viewport ang unang box, at height naman ang nakakaapekto sa ikalawa. Pansinin din na walang pakialam ang mga box sa size ng parent element nito at lumalagpas ito sa boundaries ng box dahil nakasunod ito sa size ng viewport. Subukan mong i-resize ang browser window mo at tingnan kung ano ang mangyayari:\n\n```html\n<div class=\"container-vw\">50vw</div>\n<div class=\"container-vh\">50vh</div>\n```\n\n```css\n.container-vw {\n  width: 50vw;\n}\n\n.container-vh {\n  width: 50vh;\n}\n```\n\n<div class=\"example-container example-container--fixable\">\n  <div style=\"color: #fff; font-size: 3rem; user-select: none; height: 100px; margin: 0.5rem auto; width: 50vw; background-color: #fd0;\">50vw</div>\n  <div style=\"color: #fff; font-size: 3rem; user-select: none; height: 100px; margin: 0.5rem auto; width: 50vh; background-color: crimson;\">50vh</div>\n</div>\n\n### Ang `vmin` at `vmax`\n\nDito nagiging interesante ang mga viewport units. Puwede mong gamitin nang halos-sabay ang `vw` at `vh`\n\nKapag ginamit mo ang `vmin`, pagkukumparahin ng browser ang height at width ng screen at ibibigay sa iyo ang percentage ng mas maliit na dimension. Halimbawa, kung pa-landscape ang viewport at ginamit mo ang `20vmin`, makukuha mo ang 20% ng height ng screen dahil mas maliit iyon sa width. Pero kung naka-portrait ang viewport, 20% ng width ang makukuha mo dahil mas maliit na iyon sa width.\n\nEksaktong kabaligtaran naman ang sa `vmax`. Ibibigay nito sa iyo ang percentage ng mas malaking dimension. Kung landscape ang orientation ng viewport, percentage ng width ang ibabalik ng `vmax`, at kung naka-portrait naman, percentage ng height ang makukuha mo.\n\n```html\n<div class=\"container-vmin\">50vmin</div>\n<div class=\"container-vmax\">50vmax</div>\n```\n\n```css\n.container-vmin {\n  width: 50vmin;\n}\n\n.container-vmax {\n  width: 50vmax;\n}\n```\n\n<div class=\"example-container example-container--fixable\">\n  <div style=\"color: #fff; font-size: 3rem; user-select: none; height: 100px; margin: 0.5rem auto; width: 50vmin; background-color: #fd0;\">50vmin</div>\n  <div style=\"color: #fff; font-size: 3rem; user-select: none; height: 100px; margin: 0.5rem auto; width: 50vmax; background-color: crimson;\">50vmax</div>\n</div>\n\n## Ang iba pang mga length units\n\nSiyempre bukod sa anim na alam na natin ngayon, may iba pang length units sa CSS.\n\n### Relative Length units\n\nKapag sinabing \"relative\", nangangahulugan ito na hindi naka-fix ang laki nila. Nakadepende ito sa iba pang sizes sa loob ng document. Kasama rito ang `em`, `rem`, at ang viewport units dahil hindi absolute ang values nila; nagbabago ito depende sa font size o sa viewport. Bukod sa kanila, may iba pang puwedeng magamit. In practice, wala akong masyadong nakikitang gumagamit nitong mga 'to (posibleng may mga gumagamit nito, hindi ko lang nakikita; hindi naman ako laging nangangalkal ng source code). Pero mas magandang pamilyar tayo para alam natin kung ano'ng puwedeng gamitin kapag kinailangan.\n\n<dl class=\"no-style\">\n  <dt class=\"no-style\"><code>cap</code> <span class=\"badge\">Experimental</span></dt>\n  <dd class=\"no-style\">Kagaya ito ng <code>em</code> na nakadepende sa font at font size na gamit mo. Pero sa halip na letter \"m\", nakadepende ang <code>cap</code> sa height ng capital letters.</dd>\n\n  <dt class=\"no-style\"><code>ch</code></dt>\n  <dd class=\"no-style\">Nakadepende rin ito sa font size ng element. Ang <code>1ch</code> ay kasinlaki ng width ng character na <code>0</code></dd>\n\n  <dt class=\"no-style\"><code>ex</code></dt>\n  <dd class=\"no-style\">Nakadepende naman ang size nito sa height ng lowercase letters. Kinuha ito mula sa konsepto ng x-height sa typography, sa height ng letter \"x\" ng isang font. Karaniwan na, <code>1ex ≈ 0.5em</code>. Hindi eksaktong <code>0.5em</code> ang laki pero malapit doon.</dd>\n\n  <dt class=\"no-style\"><code>ic</code> <span class=\"badge\">Experimental</span></dt>\n  <dd class=\"no-style\">Nakadepende ang size nito sa width ng \"水\". To be honest, hindi natin 'to magagamit unless gagawa tayo ng website na may Chinese/Japanese/Korean version.</dd>\n\n  <dt class=\"no-style\"><code>lh</code> <span class=\"badge\">Experimental</span></dt>\n  <dd class=\"no-style\">Nakadepende ang size nito sa <code>line-height</code> property ng element. Kung estudyante ka at gumagawa ka ng documentation at thesis documents, ang <code>line-height</code> ay ang height ng bawat line (weh?); sa <i>Microsoft Word&trade;</i>, ito ang \"double spacing\" na tinatawag.</dd>\n\n  <dt class=\"no-style\"><code>rlh</code> <span class=\"badge\">Experimental</span></dt>\n  <dd class=\"no-style\">Gaya sa <code>rem</code>, ang <code>rlh</code> ay nakadepende sa <code>line-height</code> ng <code>&lt;html></code> element.</dd>\n</dl>\n\n### Absolute Length Units\n\nNire-represent naman ng absolute length units ang pisikal na mga sukat sa pisikal na mundo, kagaya lang din sa printed materials. Pero kahit absolute ang mga ito, nakadepende pa rin ito sa isa pang unit: ang `px`. Nakadepende ang `px` sa computation ng device, at hindi ito puwedeng kontrolin ng user o ng CSS. Dahil dito kaya tinawag itong \"absolute\".\n\nSa mga low-dpi devices (mga screens, mapa-mobile o desktop pa man iyan), kinakatawan ng `px` ang tinatawag na <i>physical reference pixel</i>. Halimbawa, ang `1in`  ay `96px`, na katumbas din ng `72pt`. Kaya lang bilang resulta nito, hindi talaga eksakto ang mga length na gumagamit ng `in`, `cm`, at `mm`.\n\nSa mga high-dpi devices na gaya ng printers, eksaktong-eksakto ang length ng `px` sa diwa na 1 inch talaga ang `1in`, 1 centimeter ang `1cm`, at 1 milimeter ang `1mm`. Sa mga kasong ito, `1px` = 1/96 inch.\n\n<aside class=\"side-callout\">\n  <header>\n    <h3>Note</h3>\n  </header>\n  <p>\n    May mga users na nag-a-adjust ng font size ng browser para mas madaling magbasa. Dahil hindi ito sinusunod ng absolute length units, magkakaproblema ka sa accessibility kung ginagamit mo ang mga ito para sa mga size ng text. Kaya naman mas maganda kung relative length units ang gagamitin mo.\n  </p>\n</aside>\n\n<dl class=\"no-style\">\n  <dt class=\"no-style\"><code>cm</code></dt>\n  <dd class=\"no-style\">One centimeter. <code>1cm = 96px ÷ 2.54</code></dd>\n\n  <dt class=\"no-style\"><code>mm</code></dt>\n  <dd class=\"no-style\">One millimeter. <code>1mm</code> = 1/10th ng <code>1cm</code></dd>\n\n  <dt class=\"no-style\"><code>Q</code> <span class=\"badge\">Experimental</span></dt>\n  <dd class=\"no-style\">One quarter ng millimeter. <code>1Q</code> = 1/40th ng <code>1cm</code> or 1/4th ng <code>1mm</code></dd>\n\n  <dt class=\"no-style\"><code>in</code></dt>\n  <dd class=\"no-style\">One inch. <code>1in</code> = <code>2.54cm</code> = <code>96px</code></dd>\n\n  <dt class=\"no-style\"><code>pt</code></dt>\n  <dd class=\"no-style\">One point. <code>1pt</code> = 1/72nd ng <code>1in</code></dd>\n\n  <dt class=\"no-style\"><code>pc</code></dt>\n  <dd class=\"no-style\">One pica. <code>1pc</code> = <code>12pt</code> = 1/6th ng <code>1in</code></dd>\n</dl>\n\n## Browser compatibility\n\nNapansin mo siguro na may mga units tayong \"experimental\". Pag-usapan muna natin ang Web standards. Ginagawa ito ng W3C at WHATWG. At simula nang lumabas ang \"CSS3\" kung tawagin, nahati na ang CSS sa iba't ibang modules na may sari-sariling version (na dahilan din kung bakit hindi na magkakaroon ng CSS4, dahil hiwa-hiwalay nang nagpo-progress ang mga modules ng CSS). Ang mga length units na ginagamit natin ay nasa ilalim ng <i>CSS Values and Units Module</i>, na ang latest version ay Level 3. Habang sinusulat ko ito, may ginagawa nang Level 4.\n\nAng mga units na \"experimental\" ay either nasa Level 4, o nasa Level 3 na pero hindi pa ini-implement ng lahat ng browsers. Kaya ang mga \"experimental\" ay hindi siguradong gagana sa lahat ng browsers, lalo na ang mga galing sa Level 4. Sa ngayon, nasa <i>editor's draft</i> status pa ang Level 4 ng Values and Units module kaya kahit kailan puwede itong mabago.\n\nKasama sa mga units na na-define sa Level 3 na sigurado nang ii-implement ng browsers sa hinaharap ay ang `ch`, `rem`, viewport units, at ang `Q` unit, although hindi pa lahat ng browsers ay nai-implement ang `Q` unit, gaya ng Edge, Edge Mobile, Safari, Safari iOS, at Samsung Internet.\n\nAng `lh` at `rlh` naman ay kasama sa Level 4. At habang isinusulat ko ito, wala pang browser na nag-i-implement ng mga ito, maliban sa `rlh` na mayro'n na sa Edge browser at Edge Mobile.\n\nSa kahit anong feature ng Web platform na hindi mo sure kung naka-implement na sa mga browser, makakatulong sa iyo ang [Can I Use?](https://caniuse.com) I-search mo lang sa site na ito ang feature ng Web na gusto mong makita at ibibigay nito sa iyo ang browsers na nag-implement na noon, at kung ilang percent ng users ang makakakita ng feature na iyon kapag ginamit mo na. (Hindi ito sponsored ng Can I Use, talagang useful lang siya sa akin kaya nire-recommend ko)\n\n## Alin sa mga ito ang dapat kong gamitin?\n\nKung habol mo ang responsiveness, laging effective pa rin ang percentage units. Pero hindi ito laging praktikal. Puwede mo ring gamitin ang viewport units dahil supported na ito ng karamihan sa mga browser. Ingat lang sa `vmin` at `vmax` dahil hindi pa ito supported ng Edge browser (pero malapit na rin dahil sa paglipat ng Edge sa Chromium backend). Pero mas maganda kung pag-aaralan mo ang Intrinsic Web Design tools na gaya ng CSS Grid at Flexbox dahil ginawa talaga ang mga ito para sa responsive web pages.\n\nSa accessibility naman, mas preferable na gumamit ng relative units kaysa sa absolute units. Sa susunod, puwede bang gamitin mo ang `rem` at `em` sa pagse-set mo ng `font-size` bilang respeto sa mga gagamit ng size mo? Tandaan na hindi lahat ng users sa Web ay walang problema; may mga users na differently abled gaya ng mga bulag at malabo ang paningin, at may mga users din na hindi kumpleto ang device (e.g. walang mouse, kaya keyboard lang ang gamit). Kaya bilang pagpapakita na may pakialam din tayo sa kanila, mas mabuting maglaan ng space para sa accessibility, at nagsisimula ito sa paggamit ng relative length units.\n\nPero may mga times pa rin na useful ang absolute length units. Halimbawa, masyadong malaki ang `rem` at `em` para sa `border` at `border-radius` sa mga card UI, kaya mas mainam gamitin ang `px`. At kung publisher ka naman at ginagamit mo ang CSS para gumawa ng aklat (oo, puwedeng gamitin ang CSS para gumawa ng mga libro; tingnan ang CSS Paged Media sa kahit na anong blog), makakatulong nang malaki ang `in`, `cm`, `mm`, `pc`, at `pt` (at alam niyo ba na `pt` ang gamit na unit sa font size ng mga word processor gaya ng MS Word at WPS?).\n\nAt the end of the day, nakadepende pa rin sa iyo kung alin ang mga gagamitin mo. Matututuhan mo kung kailan gagamitin ang mga ito kung susubukan mo silang gamitin sa susunod mong experiment sa mga Web page. Kaya laging mag-practice sa paggawa ng mga Web page.","tags":["css","web","front end","ui"],"categories":["CSS"]},{"title":"Fetch API: POST Requests","url":"/antares-blog/tl/Fetch-API-POST-Requests/","content":"\nSa pa­nga­la­wang ba­ha­gi ng Fetch API se­ries, ta­la­ka­yin na­man na­tin ang pag­se-send ng `POST` re­quests sa ser­ver ga­mit ang Fetch API.\n\n<!--more-->\n\n<aside class=\"side-callout\">\n    <p>\n        Ang post na i­to ay pa­nga­la­wang ba­ha­gi ng Fetch API se­ries. Pa­ra sa u­nang ba­ha­gi, ti­na­la­kay na­tin ang {% post_link Fetch-API-GET-Requests \"GET re­quests\" %}.\n    </p>\n</aside>\n\nKung ma­ta­tan­da­an n'yo, sa {% post_link Fetch-API-GET-Requests \"na­ka­ra­ang post a­bout sa <code>GET</code> re­quests\" %}, na­ki­ta na­tin kung pa­ano ku­ku­ha ng da­ta sa ser­ver. Pe­ro pa­a­no kung gus­to na­ting mag-send ng da­ta sa ser­ver? May mga pag­ka­ka­ta­on, ga­ya ng u­ser re­gis­tra­tion, na ka­i­la­ngan na­ting mag-send ng da­ta sa ser­ver. Tra­ba­ho na­man iyan ng `POST` re­quests.\n\n## Setup\n\nSa e­xample na ito, may e­xample ta­yong ser­ver sa end­point na ito:\n\n```http\nhttps://www.example.com/api/user/\n```\n\nKadalasan sa mga REST API, iisa lang ang endpoint para sa isang collection ng data. Halimbawa, para sa isang table sa database, `tbl_users`, may isang endpoint na nakalaan, `/api/user/`. Lahat ng actions sa `tbl_users` ay mangyayari lang sa `/api/users/` na URL. Kung gusto mong kumuha ng data sa `tbl_users`, magse-send ka ng `GET` request sa `/api/users/`. Kung gusto mo namang mag-send ng data, `POST` request ang ise-send mo. Nag-iiba ang function ng bawat endpoint depende sa type ng request mo, depende sa HTTP verb na ginamit mo sa request.\n\n<aside class=\"side-note\">\n    <dl>\n        <dt>REST API</dt>\n        <dd>\n            Representational State Transfer. Isa itong service na nagpo-provide ng access sa isang dataset o database gamit ang HTTP.\n        </dd>\n    </dl>\n</aside>\n\nSabihin nating iyong REST API na ginagamit natin, `www.example.com/api/`, ay tumatanggap ng `POST` requests. Ganito ang tinatanggap niyang format ng data:\n\n```json\n{\n    \"name\" : {\n        \"first\": \"First name ng user. Required.\",\n        \"middle\": \"Middle name ng user. Optional.\",\n        \"last\": \"Surname ng user. Required.\"\n    },\n    \"email\": \"E-mail address ng user. Required.\"\n}\n```\n\nSa data na ise-send natin sa server, kailangan na sumusunod sa format na iyan ang data natin.\n\nAfter natin mag-send ng data, magse-send sa atin pabalik ang server ng response. Sa response na ito, makikita natin kung successful ba o hindi ang data natin. Sa example API natin, kapag successful ang request natin, magse-send sa atin ang server ng response na `200 OK`. Kung hindi naman, magse-send ito ng response na may error code na alinman sa mga ito:\n\n- `400 Bad Request` Kapag ganito, ibig sabihin nagkaroon ng error na hindi alam kung saan galing.\n- `401 Unauhorized` Ibig sabihin, kailangan munang mag-log in bago makapag-send ng request.\n- `403 Forbidden` Ibig sabihin, hindi ka puwedeng mag-send ng request.\n- `408 Request timeout` Masyadong matagal ang inabot ng request, either mabagal ang Internet connection, o may problema sa data na sinend mo dahil masyadong malaki\n- `409 Conflict` May isa pang client na nag-send ng data na kaparehas ng sa iyo.\n- `429 Too many requests` Sobra na sa limit ang request mo. Nangyayari ito sa mga free trial ng API na may bayad, o kaya kapag sobrang dami mong sinend na request sa isang period of time. Karamihan sa mga API ay may requests per hour na limit.\n\nSa article na ito, hindi natin iha-handle ang errors na iyan, idi-display lang natin sa `.status`. Pero in real life, kailangan nating i-handle ang mga errors na iyan.\n\n## User Interface\n\nSo gusto nating makapag-input ang user ng information niya. Tandaan, kailangan natin ng apat na data: first name, middle name, surname, at email address. Kaya gagawa tayo ng HTML form na magsa-submit ng data sa server.\n\n```html\n<form method=\"POST\" action=\"/actions/submit_data\" id=\"form_ajax\">\n    <label for=\"first_name\">First Name</label>\n    <input type=\"text\" id=\"first_name\" name=\"first_name\" required />\n\n    <label for=\"middle_name\">Middle Name</label>\n    <input type=\"text\" id=\"middle_name\" name=\"middle_name\" required />\n\n    <label for=\"last_name\">Last Name</label>\n    <input type=\"text\" id=\"last_name\" name=\"last_name\" required />\n\n    <label for=\"email_address\">Email Address</label>\n    <input type=\"email\" id=\"email_address\" name=\"email_address\" required />\n\n    <button type=\"submit\">Submit Data</button>\n</form>\n\n<p class=\"status\"></p>\n```\n\nMay form tayo rito na may ID na `form_ajax`. Nilagyan natin ng ID para magkaroon tayo ng reference sa JavaScript mamaya. Pansinin ang mga attributes ng form. Ang attribute na `method=\"POST\"` ang magsasabi na POST request ang ise-send natin, at ang `action` attribute naman ang magsasabi kung saan natin ipapadala ang data na makukuha sa form. Pansinin na magkaiba ang nakalagay na URL sa `action` at ang API endpoint na gagamitin natin (`http://www.example.com/api/user/`).\n\nActually, itong mga attribute na ito, ang `method` at `action` ay ginagamit natin bilang fallback features. Noong wala pang JavaScript, ito talaga ang ginagamit, pero nire-reload kasi nito ang buong page, na ayaw natin kaya tayo gumagamit ng Ajax. Pero kailangan pa rin nating lagyan ng ganitong features ang form natin para sa kapakanan ng mga users na naka-disable ang JavaScript dahil sa kung anumang dahilan. Mahalaga rin ito kasi minsan nagkaka-error sa script natin. May mga times na kapag nagka-error, hindi na gumagana lahat, kaya mahalaga na may fallback features sa form para masigurong mase-send pa rin ang data ng user kahit may error sa scripts.\n\nAng URL na nakalagay sa `action` attribute ay isang page. Itong page na ito ang magse-send ng data sa `www.example.com` just in case hindi gumana iyong ajax. Kaya ikaw ang gagawa ng `/actions/submit_data` page. Hindi natin iyan tatalakayin dito, sorry. Pero kung marunong kang gumawa ng back-end features, madali lang para sa iyo na i-figure out kung paano iyan gagawin. After all, hindi mo naman aaralin ang ajax kung wala kang kahit kaunting alam sa back end.\n\nMay paragraph din tayo, `.status`. Dito natin idi-display ang magiging status ng request, kasama na ang errors at success notifications.\n\n## Retrieval ng Data\n\nSa user interface, may button tayo na magsa-submit ng form kapag na-click ito. Kapag na-submit ang form, magre-reload ang buong page, kaya dapat nating pigilan iyon. Mag-a-attach tayo ng event handler sa form para sa `submit` event:\n\n```js\nconst form = document.getElementById('form_ajax');\n\nform.addEventListener('submit', function(event) {\n    event.preventDefault();\n})\n```\n\nAng `event.preventDefault()` ang pipigil sa page na mag-reload. Kaya hindi magse-send ang data. Pero pansinin na kapag naka-disable ang JavaScript, o may kung anumang mali sa scripts natin, hindi mag-e-execute ang part na ito kaya magre-reload ang page at magse-send pa rin ang data.\n\nNext, kailangan nating makuha ang data na ise-send natin. Kung babalikan natin ang `index.html`, mapapansin mong lahat ng `<input />` tags ay may `name` attribute. Ito ang gagamitin natin para makuha ang data.\n\n```js\n\nconst form = document.getElementById('form_ajax');\n\nform.addEventListener('submit', function(event) {\n    event.preventDefault();\n\n    const first_name = form['first_name'].value;\n    const middle_name = form['middle_name'].value;\n    const last_name = form['last_name'].value;\n    const email_address = form['email_address'].value;\n})\n```\n\nKapag ginagamit natin ang `form`, puwede itong maging array ng mga `<input />` elements. Kapag ginamit natin ang `form['first_name']`, makukuha natin ang textbox na may hawak ng data, hindi ang mismong data. Kaya kailangan nating kunin ang `value` property ng textbox para makuha iyong mismong input ng user.\n\n## Format ng Data\n\nMatatandaan na may kailangan tayong sunding format:\n\n```json\n{\n    \"name\" : {\n        \"first\": \"First name ng user. Required.\",\n        \"middle\": \"Middle name ng user. Optional.\",\n        \"last\": \"Surname ng user. Required.\"\n    },\n    \"email\": \"E-mail address ng user. Required.\"\n}\n```\n\nKailangan nating i-format sa ganiyang paraan ang data. Hindi naman ito mahirap.\n\n```js\nform.addEventListener('submit', function(event) {\n    ...\n\n    const formattedData = {\n        name: {\n            first: first_name,\n            middle: middle_name,\n            last: last_name\n        },\n        email: email_address\n    }\n})\n```\n\n## Pagse-send ng Request\n\nNgayon kailangan na nating i-send ang data. Tandaan, ang endpoint natin ay `https://www.example.com/api/users/`.\n\n```js\nconst endpoint = 'https://www.example.com/api/users/';\n\nfetch(endpoint, {\n    method: \"POST\",\n    body: JSON.stringify(formattedData)\n})\n```\n\nSa example na ito, nadagdagan ng arguments ang `fetch()` function. Sa {% post_link Fetch-API-GET-Requests \"nakaraang example\" %} natin, nagpapasa lang tayo ng URL sa `fetch()` function. Pero dahil gusto nating mag-send ng data, magpapasa tayo ng isa pang parameter: ang `options` parameter. Maraming laman ang `options` parameter, pero dalawa lang muna ang gagamitin natin. Kung hindi natin ise-specify ang values ng ibang mga properties ng `options` parameter, may defaults naman.\n\nSa example na ito, ginamit natin ang dalawang properties na ito:\n\n- `method` Ito ang HTTP verb na gagamitin natin. Sa kasong ito, dahil gusto nating mag-send ng data, `POST` ang ginamit nating verb.\n- `body` Ito ang data na ise-send natin sa server.\n\nMay isang limitation sa `fetch()` function. Kinakailangang `FormData` object ang ipasa natin sa `body` property. Pero naka-JSON ang data natin, kaya paano iyon? Bukod sa `FormData`, tumatanggap din ng JSON ang `body`, pero kailangang naka-string ito, kaya naman natin tinawag ang `JSON.stringify()` method. Gagawin nitong string ang data na nasa `formattedData`.\n\n## Challenge\n\nItutuloy ko pa sana ang tutorial na ito hanggang sa dulo, pero naisip ko kaparehas na lang naman iyon ng sa [unang part ng tutorial na ito](/antares-blog/2018/12/16/Fetch-API-GET-Requests/). Kaya kunin natin itong magandang chance para makapag-practice na rin. Nagawa na natin ang unang part nito, ang pagse-send ng data. Bakit hindi mo subukang ituloy ang natitirang parts ng tutorial na ito? Ito lang ang kailangan mong gawin:\n\n- Gamit ang `then()` method sa `Promise` object na nire-return ng `fetch()`, i-display ang success status ng ajax sa `<p class=\"status\"></p>`\n- Gamit ang `catch()` method sa `Promise` object, i-display ang error ng ajax sa `<p class=\"status\"></p>`\n\nAno ang magiging premyo kapag nagawa mo? Validation at self-satisfaction. Salamat sa pagbabasa ng article na ito at sa pagsuporta sa Antares Programming. Magkita ulit tayo sa susunod na artikulo.","tags":["web","javascript","fetch","ajax"],"categories":["JavaScript"]},{"title":"Intrinsic Web Design: Ito na ba ang Wakas ng Responsive Web?","url":"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/","content":"\nMa&shy;i&shy;nit na ma&shy;i&shy;nit sa mga Web de&shy;sign&shy;ers at de&shy;ve&shy;lo&shy;pers ang RWD o Res&shy;pon&shy;sive Web De&shy;sign. Pe&shy;ro si&shy;mu&shy;la no&shy;ong 2018, may ba&shy;gong <i lang=\"en\">buzz&shy;word</i> na bi&shy;na&shy;ba&shy;to, i&shy;sang tech&shy;nique na pa&shy;pa&shy;lit sa Res&shy;pon&shy;sive Web De&shy;sign: ang <em>In&shy;trin&shy;sic Web De&shy;sign</em>. Da&shy;pat mo ba i&shy;tong pag-a&shy;ra&shy;lan, o i&shy;sa lang ito sa mga ba&shy;gong u&shy;so na ma&shy;la&shy;la&shy;os din pag&shy;ka&shy;ta&shy;pos ng da&shy;la&shy;wang ta&shy;on? Su&shy;lit bang pag-a&shy;ra&shy;lan ang In&shy;trin&shy;sic Web De&shy;sign?\n\n<!--more-->\n\nIsang taon na mula nang unang marinig ng mundo ang terminong <i>Intrinsic Web Design</i> galing kay Jen Simmons sa An Event Apart, pero sa hindi pa ito gaanong matunog sa Pilipinas (or at least sa mga kakilala ko). Ito, ayon kay Jen Simmons, ang papalit sa nakasanayan nating Responsive Web Design. Sabi pa niya, isa itong bagong <i>era</i> ng Web design. Ano ang ibig niyang sabihin?\n\n## Ang Iba't Ibang Era ng Web Design\n\nMatagal nang umiiral ang World Wide Web, at malayo na ang narating nito simula <span id=\"ref-1\">nang maimbento ito ni Tim Berners-Lee noong 1990.</span><sup>[1](#foot-1)</sup> Naging platform din ito para sa mga artist na nagnanais maglabas ng mga gawa nila sa mundo, o sa mga kompanyang nagnanais gawing artistic ang Web sites nila para umayon sa branding ng kompanya.\n\nPero hindi hawak ng designers at developers ang lahat ng tools na magagamit para makagawa ng perpektong design. Kaya naman pumasok tayo sa iba't ibang era ng Web design. Bawat isang era ay may natatanging technique o hack na ginagamit para magawa ang design.\n\n### Simpleng HTML\n\n**Defining Characteristic:** Puro text ang mga Web page at walang images.\n\n<figure class=\"img-wrapper \">\n    {% asset_img simple-html.png \"Imahe ng halimbawa ng simpleng HTML\" %}<figcaption>\n        Kuha mula sa <cite>slides ni Jen Simmons para sa An Event Apart 2018</cite>\n    </figcaption></figure>\n\nNang mag­si­mu­la ang Web, i­sa lang ang lang­uage ni­to: Hy­per­text Mark­up Lang­uage. Ma­sa­sa­bing hin­di ito pa­ra sa mga de­sig­ners. Sa i­sip ng cre­a­tor ng Web na si Tim Ber­ners-Lee, hin­di mga auth­or, kun­di mga u­ser ang may ka­pang­ya­ri­han sa kung ano ang ma­gi­ging hit­sura ng mga Web page. Ka­ya na­man hin­di no­on ki­na­i­la­ngan ng anumang design tools sa Web. Lahat ay text. At dahil isang <i>markup language</i> ang HTML, ipinapakita lang nito ang struc­ture ng i­sang Web page, mea­ning ng ba­wat ba­ha­gi ng i­sang Web page. Pa­ra kay Tim Ber­ners-Lee, da­pat kon­tro­la­do ng u­sers kung ano ang ma­gi­ging hit­su­ra ng Web pa­ges sa pa­ma­ma­gi­tan ng cus­to­mi­za­tions.\n\n\n### Flow Layout\n\n**Defining Characteristic:** Gaya sa Simple HTML era, pero ngayon ay may images na, at nababago na rin ang mga background color at text color. Mas makulay na ang buhay.\n\n<figure class=\"img-wrapper\">\n    {% asset_img flow-layout.png \"Image ng halimbawa ng flow layout\" %}\n    <figcaption></figcaption>\n</figure>\n\nNagsimula ang design sa Web nang magsimulang magkaroon ng images sa Web (salamat sa Netscape Navigator). Sa panahong ito kung kailan lahat ay text at HTML lang ang mayroon tayo, iisa lang ang uri ng layout&mdash;ang tinatawag nating flow layout. Dumadaloy ang text mula kaliwa pakanan, at kapag wala nang space, ang susunod na character ay magsisimula sa susunod na line.\n\nIto rin ang panahon kung kailan `<hr>` lang ang pinaka-design na mayroon sa Web. Kung design lang din ang pag-uusapan, walang gano'n sa Web sa panahon ng flow layout era. At tama lang dahil sa progreso ng teknolohiya sa panahong iyon, napakabagal ng Internet, kaya naman mas praktikal kung text lang talaga ang Web. At bukod pa riyan, karamihan ng users ng Web sa panahong ito ng Web design ay puro mga teknikal at propesyunal.\n\n<figure id=\"fig-20.5827\" class=\"img-wrapper \">\n    {% asset_img flow-layout-1.png \"Image ng halimbawa ng flow layout\" %}\n    <figcaption>\n       <b>Figure 20.5827</b>\n    </figcaption>\n</figure>\n\nGaya ng makikita sa [figure 20.5827](#fig-20.5827), nag-exist noon ang mga center-aligned na pages (gamit ang lumang HTML tags na `<center></center>` na sana wala nang gumagamit ngayon).\n\n<figure id=\"fig-60.7538\" class=\"img-wrapper\">\n    {% asset_img flow-layout-3.png \"Image ng halimbawa ng flow layout\" %}\n    <figcaption>\n        <b>Figure 60.7538</b>: Gumamit din ng tables para sa layout noong Flow Layout Era, pero hindi kasingdalas gaya ng sa Table Layout Era.\n    </figcaption>\n</figure>\n\n### Table Layout\n\n**Defining Characteristic:** Malawakang paggamit ng `<table></table>` tags. Bagaman ginagamit ito sa panahon ng flow layout, mas malawakang ginagamit ngayon ang HTML tables, at kadalasan, para lang sa layout sa halip na mga data na nasa table.\n\n<figure id=\"fig-86.6879\" class=\"img-wrapper\">\n    {% asset_img table-layout.png \"Image ng halimbawa ng table layout\" %}\n    <figcaption>\n        <b>Figure 86.6879</b>: Mula sa 1996 na aklat ni <cite>David Siegel, Creating Killer Websites</cite>\n    </figcaption>\n</figure>\n\nSa era na ito ng Web design, pumasok na tayo sa isang panahon kung kailan unti-unti nang dumarami ang users ng Web. Masasabing dito rin nagsimula ang \"design\" sa Web, as in design na gaya ng alam natin sa ngayon. Gumamit ang mga Web developers ng `<table>` tags para gumawa ng mga layout sa mga Web page nila. Gumamit din sila ng mga tinatawag na <i>spacer GIFs</i>, i.e., mga GIF images na 1px&times;1px ang laki para lang magkaroon ng laman ang mga table cells at maging maayos ang mga layout ng Web pages.\n\n<figure id=\"fig-73.1475\" class=\"img-wrapper\">\n    <div class=\"flex flex--images\">\n        {% asset_img table-layout-1.png \"Image ng halimbawa ng table layout\" %}\n        {% asset_img table-layout-2.png \"Image ng halimbawa ng table layout\" %}\n        {% asset_img table-layout-3.png \"Image ng halimbawa ng table layout\" %}\n        {% asset_img table-layout-4.png \"Image ng halimbawa ng table layout\" %}\n        {% asset_img table-layout-5.png \"Image ng halimbawa ng table layout\" %}\n    </div>\n    <figcaption>\n        <b>Figure 73.1475</b>: Mapapansing nagsisimula nang maging mas moderno ang artistic approach sa Web. Malayong-malayo sa orihinal na daang tatahakin sana ng Web design.\n    </figcaption>\n</figure>\n\nDito rin nauso ang proseso tinatawag nating <i>slice and dice</i>. Ang mga design ay ginagawa sa photo-editing software gaya ng Photoshop. Pagkatapos, ang mga design, o kung minsan ay mga background image, ay kina-crop at pinaghihiwa-hiwalay. Bawat isang piraso o <i lang=\"en\">slice</i> ay mapupunta sa isang table cell hanggang sa mabuo ang Web page.\n\n### Flash\n\n**Defining Characteristics:** Paggamit ng Adobe Flash para sa mga Web design.\n\n<figure id=\"fig-89.1249\" class=\"img-wrapper\">\n    {% asset_img flash.png \"Adobe Flash\" %}\n    <figcaption>\n        <b>Figure 89.1249</b>\n    </figcaption>\n</figure>\n\nSa panahong ito, lumayo ang Web mula sa pinanggalingan nitong HTML at nakakita ng bagong tahanan sa Adobe Flash. Kumpara sa HTML tables, mas flexible nang di-hamak ang Flash, lalo na kung isasama rito ang animations. Para sa mga designers, ito na ang sagot sa ilang dekadang paghihirap na makagawa ng mga design. Pero gaya ng alam mo siguro, sa paglipas ng panahon nilayuan ito ng mga tao dahil bukod sa mabagal ito, kinakailangan ng nga users na mag-install ng plugin sa browsers nila para lang makita ang mga Web page. Hindi rin ito accessible, kaya nahirapan ang mga may kapansanan na gamitin ang marami sa mga Web site. At bukod pa riyan, napakalaking problema nito sa security ng users. Kaya naman papatayin na ng Adobe ang Flash sa 2020.\n\n### Ang Simula ng CSS Epoch\n\n<figure id=\"fig-60.4817\" class=\"img-wrapper\">\n    {% asset_img css.png \"Image ng aklat na Designing with Web Standards ni Jeffrey Zeldman\" %}\n    <figcaption>\n        <b>Figure 60.4817</b>: Kapansin-pansing dahil sa CSS, nanumbalik ang tamang kahulugan ng mga HTML tags. (<cite>Mula sa 2003 aklat ni Jeffrey Zeldman, Designing with Web Standards</cite>)\n    </figcaption>\n</figure>\n\nMaaring imbento ko lang ang terminong <i>CSS Epoch</i>, pero marami ang sasang-ayon na nagsimula ang isang bagong panahon para sa Web platform nang dumating ang Cascading Style Sheets o CSS. Ito ang nagsalba sa Web design. Dahil sa CSS, mas maraming posiblidad ang nabuksan, kasama na ang accessibility at semantics ng Web sites. Ang mga sumunod na era pagkatapos ng simula CSS epoch ay mas mabuti kaysa sa mga naunang era dahil lang sa mga posibilidad na nabuksan.\n\n### Fixed-Width vs. Fluid Layout\n\n**Defining Characteristic:** Dalawang magkalabang opinyon: fixed na width at percent-based layouts.\n\nDito sa era na ito, nagkaroon ng dalawang magkalabang opinyon sa Web design. May mga nagsasabi na dapat nating gawing fixed-width ang mga layout, gaya sa mga printed materials. Dahil kahit na kakaunti lang ang iba't ibang screen sizes noon, hindi pa rin natin kayang tiyakin kung ano'ng size ng screen ng mga users. Kaya dapat nating gawing naka-fixed ang laki ng layout.\n\n<figure id=\"fig-62.5674\" class=\"img-wrapper float--wider\">\n    <video controls src=\"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/fluid-layout.mp4\">\n        <p class=\"video-fallback\"></p>\n    </video>\n    <figcaption data-video=\"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/fluid-layout.mp4\">\n        <b>Figure 62.5674</b>: Isang halimbawa ng fluid layout.\n    </figcaption>\n</figure>\n\nMay mga nagsasabi naman na \"hindi, dapat nag-aadapt sa size ng screen ang layout.\" Dapat na nagre-resize din ito depende sa viewport. Hindi ako eksperto sa kasaysayan ng Web design, pero sa tingin ko, ang fluid layout ang naging <i lang=\"en\">precursor</i> ng Responsive Web Design.\n\n\n<figure id=\"fig-43.9855\" class=\"img-wrapper  float--wider\">\n    <video controls src=\"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/fixed-layout.mp4\">\n        <p class=\"video-fallback\"></p>\n    </video>\n    <figcaption data-video=\"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/fixed-layout.mp4\">\n        <b>Figure 43.9855</b>: Isang halimbawa ng fixed layout.\n    </figcaption>\n</figure>\n\nDalawang naglalabang opinyon, pero parehas na may punto. Sa era na ito, nagkaroon ng kritikal na desisyon kung aling direksyon sa sining ang tatahakin ng bawat designer, at kung paano ito ie-execute ng mga developer.\n\n### Responsive Web Design\n\n**Defining Characteristic:** Iba't ibang layout depende sa screen size. Malawakang paggamit ng mga image na nagre-resize kasama ng viewport, mga media queries, at float elements.\n\n<figure id=\"fig-93.6485\" class=\"img-wrapper\">\n    {% asset_img responsive-web-design.png \"Responsive Web Design is a flexible grid (with flexible images) that incorporates media queries to create a responsive, adaptive layout.\" %}\n    <figcaption> \n        <b>Figure 93.6485</b>: Ang Responsive Web Design ay isang flexible grid (kasama ang mga flexible na image) na gumagamit ng mga media query para makagawa ng isang layout na nagbabago sa iba't ibang kalagayan. (<cite>Mula sa slides ni Ethan Marcotte para sa kaniyang pahayag sa An Event Apart 2010</cite>)\n    </figcaption>\n</figure>\n\nAng era na ito ang pinakakilala ng marami sa atin sa ngayon. Ito ang era ng <i>float-based layouts</i>. Sandamakmak na `float: left` at mga <i>clearfix</i> ang ginamit natin sa mga design para makagawa ng mga layout. Ito ang era ng 12-column layouts. Dito rin sumikat ang mga frameworks na gaya ng Bootstrap, Foundation, 960 grid, at iba pa.\n\nSa panahong ito rin halos nawala ang \"art direction\" sa Web. Dahil karamihan ng Web sites ay gumagamit ng iyon at iyon ding frameworks na may 12-columns, naging magkakamukha silang lahat. Nalimitahan ang pagkamalikhain sa Web. Pero ang maganda naman dito, lumitaw ang <i>mobile-first designs</i> at gumagana sa lahat ng device ang mga Web site.\n\nHindi rin siguro ito matunog sa mga kakilala ko, pero mga ilang taon pagkatapos sumikat ang Responsive Web Design, lumabas ang Adaptive Web Design. Hindi nito pinalitan ang RWD; sa halip, dinagdagan nito ang RWD ng maraming kakayahan. Sa RWD, lahat ng transformations sa layout at adjustments ay nangyayari sa browser, gamit ang CSS, at kung minsan, JavaScript. Pero nang dumating sa eksena ang Adaptive Web Design, sumama ang server sa pagbibigay ng magadang experience sa mga user.\n\n<figure id=\"fig-73.0292\" class=\"img-wrapper  float--wider\">\n    <video controls src=\"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/responsive-layout.mp4\"></video>\n    <figcaption data-video=\"/antares-blog/tl/Intrinsic-Web-Design-Ito-na-ba-ang-Wakas-ng-Responsive-Web/responsive-layout.mp4\">\n        <b>Figure 73.0292</b>: Isang halimbawa ng isang responsive na layout.\n    </figcaption>\n</figure>\n\nDahil mobile-first na ang Web, at mabagal ang Internet speeds para sa mga mobile devices, hindi puwedeng mag-send sa mobile devices ng mga high-resolution images gaya ng ginagawa sa mga desktop. Kaya nagde-decide ang server kung aling size ng image ang ipapadala nito sa device depende sa width ng viewport nito. At hindi lang ito natatapos sa width ng mga images, dahil may mga sites na gumagawa ng dalawang magkaibang site para sa desktop at sa mobile para mabawasan ang file size ng CSS nila sa mobile devices.\n\n<figure class=\"img-wrapper--illustration\">\n    {% asset_img timeline.png \"Timeline ng mga Web design era, mula sa slides ni Jen Simmons\" %}\n</figure>\n\nIto ang mga era ng Web design na alam natin sa ngayon. Posibleng may mga overlaps at mga hindi ako nabanggit, pero sa pangkalahatan, ang punto nito ay maraming pinagdaanan ang Web para makarating sa kung nasaan man ito sa ngayon.\n\n## Ang Pagpasok ng Intrinsic Web Design\n\n\n<aside class=\"side-note\" id=\"intrinsic\">\n    <dl>\n        <dt lang=\"en\">intrinsic</dt>\n        <dd lang=\"en\">\n            (adj.) belonging to a thing by its very nature. Inherent. Innate\n        </dd>\n    </dl>\n</aside>\n\nAng pangako ng Intrinsic Web Design ay nasa pangalan na mismo nito: <em>intrinsic</em>. Hindi na natin kailangan ng frameworks para makagawa ng mga komplikadong layouts. Hindi na natin kailangang gumamit ng mga CSS properties na ginawa para sa ibang dahilan para lang magawa ang gusto nating design. **Ang Intrinsic Web Design ay isang improvement sa Responsive Web design; samakatuwid nga, Responsive Web Design +**.\n\nIsang halimbawa nito ang `float` property sa CSS. Simula noong Table Layout era, nakabase na ang mga design ng Web pages sa mga grid. At kahit sa paintings at ibang artworks, malawakang ginagamit ang mga grid. Pero dahil sa kakulangan ng features ng CSS, hindi natin ito ma-replicate nang maayos. Kaya gumamit tayo noon ng `<table>` tags, at nang magtagal, ginamit natin ang `float` property para gumawa ng mga \"column\". Matrabaho ito, oo, pero mas mabuti na ito kaysa sa paggamit ng `<table>` o ng `<frameset>`, na parehong nagpapahaba ng markup.\n\nPero dumating sa mga browser ang `display: flex` at `display: grid` features ng CSS, at sa wakas, nagkaroon ng tunay na grid system sa Web. Kaya naman hindi na natin kailangang gumamit ng `float` (na ginawa para sa ibang mga bagay) para gumawa ng mga columns. At ang maganda pa rito, dahil sa CSS Grid, hindi na tayo naka-focus sa columns; kaya na rin nating manipulahin ang rows. Ang CSS Grid ang pinaka-powerful na feature ng CSS sa ngayon.\n\n## Talaga Bang Papalitan na ng Intrinsic Web Design ang Responsive Web Design?\n\nKung titingnan, nalalaos lang naman ang isang technology kapag wala nang gumagamit nito. Sa ngayon, talamak pa rin ang RWD sa mga website design. Kaya parang mahirap isipin na malalaos ang RWD; kung sa bagay, napakaraming magagandang dulot ang RWD sa mga user. Pero tingnan natin ang mga pagkakaiba ng IWD at RWD&mdash;mga dahilan kung bakit naisip ni Jen Simmons (at kung bakit sinasang-ayunan ko) na Intrinsic Web Design ang future ng Web design.\n\n\n### Images\n\n**Responsive:** sa Responsive Web Design, lahat ng images ay flexible at nagre-respond sa lapad ng viewport. Samakatuwid nga, lahat ng image ay percent-based.\n\n**Intrinsic:** Sa Intrinsic Web Design, itinataguyod ni Jen Simmons na gumamit ang mga Web designer at developer ng flexible images kasama ng mga fixed-width images. Hindi na kailangang lahat ay flexible; puwede ka nang mag-set ng width, height, o iyong dalawang iyon sa mga image. At ang maganda pa rito, puwede ka na ring gumamit ng mga image na flexible pero magiging fixed depende sa size (hindi lang width) ng viewport.\n\n### Grids\n\n**Responsive:** sa RWD, gumamit tayo ng pseudo-grid; pero sa totoo lang, hindi naman ito grid dahil columns lang ang ginamit natin. At sa totoo lang din, hindi rin ito mga columns kundi mga pseudo-columns dahil hindi naman iyon mga tunay na column. Ginawa sila gamit ang `float` property sa CSS, na hindi naman ginawa para sa mga columns. Sa madaling sabi, nagtagpi-tagpi lang tayo ng features para mapunan ang gusto nating gawin na wala sa CSS.\n\n**Intrinsic:** sa IWD, lahat ay tunay: ang grid na gamit natin ay totoong grid dahil may rows at columns na ito. At hindi tulad sa RWD, ang mga rows at columns ay puwedeng fixed-width, o nakadepende sa size ng laman nito, sa halip na flexible lang at percent-based. Katunayan, hindi na lang percent ang puwedeng gamitin; puwede na rin tayong gumawa ng ratio-based columns at rows sa tulong ng `fr` units.\n\n### Media Queries\n\n**Responsive:** sa RWD, kailangan ang media queries sa lahat ng panahon para makagawa ng mga layouts na nagre-respond sa width ng viewport.\n\n**Intrinsic:** sa IWD, hindi kailangan ng media queries sa lahat ng pagkakataon. Dahil sa kapangyarihan ng CSS Grid, makakapag-adjust sa width ng viewport ang width ng layout.\n\n### Flexibility\n\n**Responsive:** sa RWD, flexible ang layout sa diwa na may iba't ibang hiwa-hiwalay na layout para sa iba't ibang screen.\n\n**Intrinsic:** sa IWD, flexible ang layout sa diwa na hindi kailangan ng hiwalay na layout para sa ibang content. Sa Intrinsic Web Design, hawak mo kung paano mo ipe-present ang content at kung paano gagawin ang layout.\n\n## Ang Pagbabalik ng Art Direction sa Web Design\n\nSiguro kanina mo pa napapansin na paulit-ulit kong sinasabi itong \"art direction\". Nawala kasi ang art sa Web design noong Responsive Web Design era. Pero sa Intrinsic Web Design, napakarami na nating tools na magagamit para sa kahit anong design at layout na maisip natin. Puwede na tayo ulit kumuha ng inspirasyon sa mga layout ng magazines, printed materials, at sa mga gawa ng mga artists na gaya ni Jan Tsichold.\n\nKasama sa mga layunin ng Intrinsic Web Design ay ang pagbabalik ng design sa Web. <em>Kahit ano, puwede.</em> Sa tulong ng mga bagong tools na built-in na sa CSS, makakagawa tayo ng eleganteng mga design. Kaya naman pinasisigla ang lahat, kapuwa mga designers at developers, na pag-aralan ang lahat ng options na mayroon para maging buhay muli ang Web, sa diwa na hindi na magkakamukha ang mga Web site.\n\nNapakaraming halimbawa rito si Jen Simmons sa kaniyang [experimental lab](https://labs.jensimmons.com/) (at inoobliga kitang tingnan ito para sa kapakanan mo 😉). Makikita mo sa Web site niya ang iba't ibang artworks sa tunay na mundo na ni-recreate niya gamit ang HTML at CSS. Pinatutunayan lang nito na marami tayong puwedeng gawin gamit ang mga tools na available na sa atin.\n\n## Ang Mga Tools ng Intrinsic Web Design\n\nDahil nga ang pangako ng IWD ay built-in na sa CSS ang mga tools na gagamitin natin, at na hindi na natin kailangang gumamit ng mga \"hack\" o gumamit ng mga properties na ginawa para sa ibang mga bagay, dumami ang mga tools na magagamit natin.\n\n- Flexbox\n- Grid\n- CSS Shapes\n- Clip Path\n- `object-fit` et. al\n- Variable fonts\n- `@supports`\n- Bagong dagdag sa Writing Modes\n- Viewport units (`vh` at `vw`)\n\nAng lahat ng ito ay built-in na sa CSS, at <strong>hindi na natin kailangan ng frameworks</strong>. Ang article na ito ang una sa series ng mga articles tungkol sa Intrinsic Web Design. Sa mga susunod pang articles, susubukan nating talakayin ang iba't ibang tools na ito at kung paano sila gagamitin sa mga Web sites natin. Kaya laging i-check ang tag na <a href=\"/antares-blog/tags/intrinsic-web-design/\" class=\"tag\">#intrinsic web design</a> sa Antares Blog.\n\n## Mga Tanong Tungkol sa Intrinsic Web Design\n\n### Ibig bang sabihin nito, hindi na tayo gumagamit ng `float`?\n\nSiyempre hindi! Tandaan, ang `float` property ay ginawa na kagaya ng text wrapping sa Microsoft Word. May silbi pa rin ito. Sa katunayan, ang isang bagong feature ng CSS, ang CSS Shapes, ay nakasentro sa paggamit ng floated elements. At mismo sa site na ito, malawakang ginagamit <em>sa tamang paraan</em> ang mga float, gaya nitong [definition ng salitang \"intrinsic\"](#intrinsic).\n\n### Hindi natin puwedeng gamitin iyang bagong features ng CSS kasi may mga lumang browser pa rin na ginagamit sa mga kompanya, like iyong Internet Explorer.\n\nHindi ito valid reason para iwasan ang mga bagong features ng CSS. Kung isasantabi mo ang pag-aaral ng mga bago sa CSS, inilalagay mo sa peligro ang career mo, dahil lahat ng iba pang developer inaaral na iyon. Ang CSS Grid ay supported na sa mahigit 88% ng mga Web users worldwide. At bukod pa riyan, mayroon tayong tinatawag na <i>progressive enhancement</i>. Kaya kung ang target users mo ay mga users ng IE at iba pang lumang browsers, puwede mong i-develop ang site mo gamit ang mga features na gumagana sa mga iyon, at saka mo idagdag ang mga bagong features na ginagamit na ng marami ngayon.\n\n### Eh 'di say no to Bootstrap etc. na? Hindi na namin sila pag-aaralan?\n\nNope, depende pa rin sa inyo iyon. Marami pa rin ang gumagamit ng Bootstrap at Foundation, pati ang ibang mga framework. Kaya dapat alam pa rin natin kung paano sila gumagana para makahanap tayo ng trabaho. Ganoon naman lagi sa mundo ng technology; kahit na may bago nang lumabas, hangga't may gumagamit ng luma, kailangang alam natin kung paano gawin ang luma.\n\n### Paano kung ni-require kami na huwag gumamit ng mga bagong features ng CSS?\n\nAgain, walang masama kung gagamitin natin iyong mga nakasanayan na natin. Kung kailangan mong mag-stick sa mga frameworks, walang problema. Kung gusto mong iwasan ang flexbox at CSS grid para gumamit ng float-based layout, nasa sa iyo ang desisyon. Ang mahalaga naman lagi rito ay kung ano ang magiging experience ng mga user ng site mo. At bukod pa diyan, ang experience ng mga developers sa paggawa ng Web sites. Mas madali kung tutuusin para sa atin na gamitin ang mga bagong tools na ito, pero wala rin namang masama kung gagamit tayo ng kutsilyo pambukas ng lata sa halip na gumamit ng can opener. Gagana iyon, pero mas madali kung may can opener.\n\n## Conclusion\n\nAno't anuman, nagbabago ang Web nang patuluyan. Para itong tren na patungo sa isang destinasyon: ang balanse sa pagitan ng developer experience at user experience. Bawat feature na nadadagdag sa Web platform ay para sa ikadadali ng buhay ng mga user, developer, at designers. Nasa sa iyo ang desisyon kung sasakay ka sa tren na ito. At isa pa, ang Intrinsic Web Design ay hindi isang bagong uso na malalaos pagkatapos ng ilang taon; at kahit malaos pa ito, ang mga technique nito ay nandito nang pangmatagalan.\n\n---\n## Footnotes\n1. <span id=\"foot-1\"><a href=\"#ref-1\">^</a> Wikipedia: [Tim Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners_lee).</span>\n2. <span id=\"foot-2\">Malibang binanggit sa mismong imahe, lahat ng illustrations sa article na ito ay kuha mula sa slides na ginawa ni Jen Simmons para sa An Event Apart 2018</span>","tags":["css","web","intrinsic web design"],"categories":["CSS"]},{"title":"Fetch API: GET Requests","url":"/antares-blog/tl/Fetch-API-GET-Requests/","content":"\nDahil sa pagiging popular ng Ajax (dating acronym para sa _asynchronous JavaScript and XML_, pero hindi na ngayon kasi wala nang masyadong gumagamit ng XML sa Web platform, hindi gaya dati), napasama sa ECMAScript 2015 standard ang Fetch API, isang API na nagpapadali sa Ajax. Sa article na ito, tingnan natin kung paano natin magagamit ang Fetch API para magpadala ng `GET` request sa server.\n\n<!--more-->\n\n<aside class=\"side-callout\">\n    <header>\n    <h4> Disclaimer </h4>\n    </header>\n    <p>\n        May mahabang intro at history ang article na ito. Puwede ka nang dumiretso sa <a href=\"#Fetch-API-Tutorial\">mismong tutorial</a>.\n    </p>\n</aside>\n\nKung wala kang idea tungkol sa Ajax, isa itong technique sa Web development. So traditionally bago nauso ang Ajax, kapag kailangan mong ma-display sa UI ang mga update sa data, or gusto mong magpasa ng data sa server, kailangang i-reload ang buong page. Pero nang mauso ang Ajax, lahat ng pagkuha at pagpapadala ng data sa server ay nangyayari na sa background; hindi na kailangang i-reload iyong buong page. Dito na nauso iyong mga umiikot na loader GIF para ipakita sa user na pina-process pa ang action nila.\n\nSo for years, ginagawa ito ng mga Web developers gamit ang `XMLHttpRequest`. Noon, sobrang makabago itong technique na ito. Pero sobrang komplikado rin nito. Napakaraming kailangang i-setup na **boilerplate code**.\n\n<aside class=\"side-note\"><dl><dt>Boilerplate Code</dt><dd>Isang set ng code na kailangan mong isama sa program para i-setup ang isang feature or technique. Kadalasan nang kina-copy-paste ito dahil bukod sa pagse-setup ng mga kailangan mo, wala na itong ibang ginagawa. May mga pagkakataon na maiisip mong kalat din ito sa code, pero wala kang magagawa dahil kailangan mong gamitin.</dd></dl></aside>\n\nThen, dumating ang _jQuery_ at pinadali ang buhay ng lahat. Bukod sa kapangyarihan nitong gawing consistent sa lahat ng browsers ang mga features ng Web platform, may feature din ang jQuery para sa Ajax. Gamit ang function nitong `ajax()`, hindi na kailangan ng mga Web developer na paulit-ulit na pakisamahan ang boilerplate code na minsan nilang sinulat.\n\nPero tapos na ang panahon ng inconsistencies sa Web platform. Namamayagpag na ngayon ang Web standards sa tulong ng W3C at WHATWG. Sa halos lahat ng pagkakataon, consistent na ang features ng Web sa lahat ng major browsers (i.e, Chrome, Firefox, Safari, Edge, UC Browser, etc.). At unti-unti na ring bumababa ang bilang ng mga gumagamit ng jQuery. Nang ilabas ang ECMAScript 2015 standard (bagong version ng JavaScript), isinama nito ang mga features na galing sa jQuery, kasama na ang `ajax()` function, na ngayon ay buhay sa katauhan ng Fetch API.\n\n## HTTP Requests\n\nKapag nagse-send tayo ng requests sa server, meron tayong tinatawag na **HTTP Verbs**. Basically, sinasabi nito kung ano ang gusto nating gawin ng server; verbs, ibig sabihin action words sila, gusto natin na gawin ng server iyong action na pinadala natin sa request. So may pitong HTTP verbs:\n\n-   `GET` - \"Pakikuha itong specific na data\"\n-   `POST` - \"Pakilagay itong data na ito sa database\"\n-   `PUT` - \"Paki-update nitong data na ito; kung wala pang ganito sa database, gumawa ka ng bago\"\n-   `PATCH` - \"Paki-update nitong data na ito, pero itong specific part lang na ito. 'Wag mong baguhin lahat\"\n-   `DELETE` - \"Pakitanggal na nitong data na ito\"\n-   `HEAD` - Kagaya ito ng `GET` requests, pero hindi mo makukuha iyong data. Instead, makukuha mo lang ay iyong HTTP headers, i.e., iyong data na sine-send ng server pabalik para malaman mo kung anong nangyari sa server habang ine-execute n'ya iyong action na ni-send mo. Dito nakikita sa HTTP headers kung anong code ang binalik ng server (200 OK, 404 Not Found, etc.) kasama na ang iba pang data na useful for debugging.\n-   `OPTIONS` - <span id=\"ref-1\">Para naman itong `--help` sa mga program. Kapag nag-send ka ng `OPTIONS` request sa server, ibabalik nito sa iyo ang mga available na actions sa `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, at `HEAD`. Kaya lang, bihira lang daw ang mga nag-i-implement ng ganitong action sa mga API nila.</span><sup>[1](#foot-1)</sup>\n\nIdeally, magagamit natin lahat ito, kasi gano'n naman talaga dapat. Kaya lang, malupit ang mundo, at sa totoong buhay, `GET` at `POST` lang ang madalas na ginagamit. May iba na gumagamit din ng `PUT` at `DELETE`. Pero wala pa akong nakitang gumamit ng `PATCH`, `HEAD`, at `OPTIONS`. Nagulat pa nga ako no'ng nalaman kong may ganiyan pa pala; ang akala ko apat lang.\n\nSa susunod na tutorial (yes, nasa intro pa lang po tayo), tingnan natin kung paano natin gagamitin ang `GET` requests para kumuha ng data sa server.\n\n## Fetch API Tutorial\n\nSa tutorial na ito, gagawa tayo ng simpleng program: kapag na-click iyong button, magse-send tayo ng request sa server para kumuha ng data, then idi-display natin iyon sa isang HTML table.\n\n### Data Format\n\nPara sa tutorial na ito, gagamitin natin ang [JSON Placeholder API](https://jsonplaceholder.typicode.com) para hindi na tayo magse-setup ng sarili nating server. Kaya siguraduhing may Internet connection kapag ita-try na itong tutorial na ito.\n\nKapag nag-send tayo ng `GET` request sa JSON Placeholder API, ganito ang format ng data na _gusto_ nating makuha natin pabalik:\n\n{%codeblock \"Expected Data\" lang:json %}\n[\n{\n\"first_name\": \"Annalise\",\n\"last_name\": \"Keating\",\n\"email\": \"ak@murd.er\"\n}\n]\n{%endcodeblock%}\n\nMarami pang ibang sample data na binibigay ang JSON Placeholder API, pero iyan lang ang kailangan natin.\n\n### User Interface\n\nSo kailangan natin ng user interface. Simple lang ang gagawin natin; isang button lang saka table.\n\n<aside>'Wag na muna po tayong mag-design ngayon, pakiusap lang. Hindi tayo matatapos.</aside>\n\n{%codeblock index.html lang:html %}\n<button onclick=\"sendGetRequest()\">Send GET Request</button>\n\n<table>\n    <thead>\n        <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>E-Mail</th>\n        </tr>\n    </thead>\n    <tbody id=\"table-body\"></tbody>\n</table>\n{%endcodeblock%}\n\nsa `<tbody>` natin ilalagay iyong data mamaya. Pansinin din iyong `onclick` attribute sa button. Mamaya, ide-declare natin iyang function na iyan.\n\n### Ang `sendGetRequest()` Function\n\nI-declare na natin ang `sendGetRequest` function sa JavaScript. Sa loob ng function na ito, dito natin ilalagay ang `fetch()`:\n\n{%codeblock index.js lang:javascript %}\nconst serverURL = 'http://jsonplaceholder.typicode.com/users';\nfunction sendGetRequest() {\nconst request = fetch(serverURL);\n}\n{%endcodeblock%}\n\n<aside class=\"card card--suggestion\">\n    <header class=\"card__header\">\n        <span class=\"card__label\">Suggested:</span>\n        {% post_link Function-Parameters-at-Return-Statements \"Function Parameters at Return Statements\" %}\n    </header>\n</aside>\n\nSa example na ito, tinawag natin ang `fetch()` function at binigyan ito ng URL para sa server kung saan siya magse-send ng request. Kapag tinawag natin ang `fetch` function, magre-return ito ng isang `Promise` object.\n\nSa JavaScript, ang mga `Promise` object ang ginagamit para mag-execute ng code sa \"background\".\n\n> Technically, hindi talaga nag-e-execute sa background ang mga `Promise` kasi hindi gano'n gumagana ang JavaScript kasi single-threaded ito, hindi gaya ng ibang languages. Pero para sa example natin, sabihin na nating nag-e-execute ito sa \"background\".\n\n#### JavaScript `Promise`\n\nMay mga methods ang `Promise` objects na magagamit natin para makapagdagdag tayo ng actions sa mga operation na nagra-run sa \"background\".\n\n<aside class=\"side-note\">\n    <dl>\n        <dt>`Promise`</dt>\n        <dd lang=\"en\">\n        The Promise object represents the *eventual* completion (or failure) of an asynchronous operation, and its resulting value.<cite class=\"citation\">Mozilla Developer Docs</cite>\n        </dd>\n    </dl>\n</aside>\n\n-   `then()` - isa itong method na gagawa ng action kapag natapos na ang operation na nagra-run sa \"background\".\n-   `catch()` - isa itong method na gagawa ng action kapag natapos na ang operation sa \"background\" dahil **nagkaroon ng error.**\n-   `finally()` - isa itong method na mag-e-execute kapag natapos na ang lahat ng operations ng `Promise` object, kasama na ang `then()` at `catch()`.\n\nGusto ko ring banggitin sa inyo saglit na itong mga method na ito ay mga example ng tinatawag nating _higher-order functions_. Sa normal na functions, nagpapasa tayo ng parameters na either number, string, object, or array. Pero sa mga higher-order functions, sa halip na normal na data structures ang tanggapin nila bilang parameters, tumatanggap sila ng functions. Ibig sabihin puwede tayong magpasa ng functions sa mga functions. _mindf\\$ck&trade;_\n\nSa mga methods ng `Promise`, kapag nagpasa tayo ng mga function, ie-execute nila ang mga function na iyon sa mga specific na phase ng promise execution. Kapag nagpasa tayo ng function sa `then()`, ie-execute nito ang pinasa nating function pagkatapos na ma-execute ang promise. Kapag nagpasa naman tayo ng function sa `catch()`, ie-execute nito ang function natin kapag nagkaroon ng error. At kapag nagpasa naman tayo ng function sa `finally()`, ie-execute nito ang function natin kapag natapos na ang operation sa `Promise` object, ang `then()` function, at ang `catch()` function.\n\n### Pagre-retrieve ng data\n\nMatatandaang naka-store sa variable na `request` ang request natin sa server:\n\n{%codeblock index.js lang:javascript %}\nconst serverURL = 'http://jsonplaceholder.typicode.com/users';\nfunction sendGetRequest() {\nconst request = fetch(serverURL);\n}\n{%endcodeblock%}\n\nKapag tinawag natin ang `fetch()`, agad-agad itong magpapadala ng request sa server URL, at ang ire-return nito ay isang `Promise` na magiging pangakong panghahawakan natin, isang pangako na matatapos ang operation sa takdang panahon. Pero dahil hindi natin alam kung kailan ito matatapos, kailangan nating pagbilinan ang `request` variable kung ano ang gagawin niya kapag natanggap na natin ang response ng server.\n\nDahil lahat ng natatanggap natin galing sa server ay naka-string, at JSON ang kailangan natin, kailangan nating i-parse ang string papuntang JSON. Para magawa ito, kailangan nating hingin ang tulong ng `then()` at magpasa rito ng function na magpa-parse ng string:\n\n{%codeblock index.js lang:javascript %}\nconst serverURL = 'http://jsonplaceholder.typicode.com/users';\nfunction sendGetRequest() {\nconst request = fetch(serverURL);\n\n    const jsonPromise = request.then(function(response) {\n        return response.json();\n    })\n\n}\n{%endcodeblock%}\n\nIsa-isahin natin kung ano ang nangyayari dito:\n\n-   Para makuha ang response ng server, nagpasa tayo ng function sa `then()`. Kapag in-execute ng `then()` ang function natin, ibibigay nito ang response ng server sa function natin, at iso-store ito sa `response` argument.\n-   Ang `response` variable ay isang object sa JavaScript na may mga methods na kasama. Built-in dito ang `json()` function na magko-convert ng response ng server into JSON object.\n-   Pagkatapos na ma-execute ang function na pinasa natin, magre-return ang `request.then()` ng isa pang Promise object, kaya nilagay natin ito sa `jsonPromise`. Nasa loob ng `jsonPromise` ang JSON object na nakuha natin galing sa server.\n\nMedyo may pagka-komplikado ang mga Promise sa JavaScript. Pero isang technique na ginamit ko dati, hanggang ngayon, para hindi ako malito ay ganito: iniisip ko na parang time capsule ang mga Promise object. Kung may result tayo na gustong makuha sa mga operation sa background, ang makukuha lang natin ay Promise objects, at iyong result na gusto nating makuha ay nasa loob noon. Ang tanging paraan para makuha kung anuman ang nasa loob ng time capsule na iyon ay kung gagamitin natin ang `then()` function; iyon lang iyong tanging opening na mayro'n ang mga Promise object.\n\nKaya para ma-display natin iyong data, kailangan muna nating makuha iyon sa loob ng `jsonPromise`. At paano natin gagawin iyon? Tatawagin natin ulit ang `then()` function.\n\n{%codeblock index.js lang:javascript %}\njsonPromise.then(function(jsonObject){\nconsole.log(jsonObject);\n})\n{%endcodeblock%}\n\nMatatandaan na nasa loob ito ng `sendGetRequest()` function na mag-e-execute kapag napindot ang button. Kapag na-click iyong button na iyon, makikita mo sa console (Chrome DevTools or F12 Developer Tools sa Firefox) ang JSON object na natanggap natin mula sa server.\n\n<!-- // TODO: add console output here -->\n\nAng kailangan lang natin ay tatlong pieces of information: first name, last name, at email address. Gagawa tayo ngayon ng function na magko-convert ng JSON object na iyan into HTML table rows. Generally, ganito ang format na susundin natin per row:\n\n{%codeblock index.html lang:html %}\n\n<tr>\n    <td><!--First Name--></td>\n    <td><!--Last Name--></td>\n    <td><!--Email--></td>\n</tr>\n{%endcodeblock%}\n\nKaya gagawa tayo ng function na gagawa nito. Tawagin natin itong `jsonToHtmlString()`:\n\n{%codeblock index.js lang:javascript %}\nfunction jsonToHtmlString(jsonObject) {\nreturn `<tr> <td>${jsonObject.first_name}</td> <td>${jsonObject.last_name}</td> <td>${jsonObject.email}</td> </tr>`\n}\n{%endcodeblock%}\n\nSa function na ito, gumamit din tayo ng tinatawag nating _template strings_. Kasama ito sa mga bagong features ng JavaScript sa ES2015. Sa halip na gumawa tayo ng maraming string concatenation (`\"string1 \" + variable + \" string2\"`), puwede nating gamitin ang template string para gawin ang tinatawag nating **string interpolation**.\n\n<aside class=\"side-note\">\n    <dl>\n        <dt>String Interpolation</dt>\n        <dd lang=\"en\">\n        In computer programming, string interpolation (or variable interpolation, variable substitution, or variable expansion) is the process of evaluating a string literal containing one or more placeholders, yielding a result in which the placeholders are replaced with their corresponding values... String interpolation allows easier and more intuitive string formatting and content-specification compared with string concatenation.<cite class=\"citation\"><a href=\"https://en.m.wikipedia.org/wiki/String_interpolation\">Wikipedia</a></cite>\n        </dd>\n        <dd>Basically, sa string interpolation, kukunin ng compiler or interpreter lahat ng variable na nasa string at isa-substitute ang value ng variable doon.</dd>\n    </dl>\n</aside>\n\nSa halip na double quotes (`\"\"`) or single quotes (`''`), sa template literals, gumagamit tayo ng backticks (\\`) or iyong nasa left side ng `1` sa keyboard. Lahat naman ng nasa loob ng `${}` ay mai-interpret bilang JavaScript code.\n\nNgayong nagawa na natin ang `jsonToHtml()` function, puwede na natin itong magamit sa loob ng `sendGetRequest()`.\n\n### Pagdi-display ng Data\n\nSa ngayon, ito ang laman ng `sendGetRequest()` function:\n\n{%codeblock index.js lang:javascript %}\nconst serverURL = 'http://jsonplaceholder.typicode.com/users';\nfunction sendGetRequest() {\nconst request = fetch(serverURL);\n\n    const jsonPromise = request.then(function(response) {\n        return response.json();\n    })\n\n}\n{%endcodeblock%}\n\nTatawagin natin nang isang beses pa ang `then()` method sa `jsonPromise` para makuha ang mismong JSON object at mai-display ito.\n\n{%codeblock index.js lang:javascript %}\njsonPromise.then(function(jsonObject){\nconst people = jsonObject;\n});\n{%endcodeblock%}\n\nKung matatandaan ninyo, array ang laman ng JSON object; array ito ng mga object na may first name, last name, at email. So ang kailangan natin ay i-transform ang bawat item sa array na ito into HTML string. Kaya gagawin natin ito gamit ang ni-declare natin kaninang `jsonToHtmlString()`.\n\n{%codeblock index.js lang:javascript %}\njsonPromise.then(function(jsonObject){\nconst people = jsonObject;\n\n    const htmlStrings = jsonObject.map(person => jsonToHtmlString(person))\n\n});\n{%endcodeblock%}\n\nAng `map()` method ay isang higher-order function na makikita sa mga array sa JavaScript. Bale ang gagawin nito, iisa-isahin niya iyong mga items ng array, pagkatapos papalitan niya iyong value. Sa case na 'to, nagpasa tayo ng function sa `map()`; kung anuman ang i-return ng function na pinasa natin, iyon ang magiging value ng item natin.\n\n> Ang `map()` method ay _non-mutative_; ibig sabihin, hindi niya binabago ang laman ng variable. Gumagawa siya ng bagong object. Kaya naman, kahit ilang beses mong tawagin ang `map()`, hindi magbabago ang laman ng `jsonObject`. Mai-store lang ang result ng `map()` sa `htmlStrings`.\n\nI-try nating i-output sa console ang value ng `htmlStrings`:\n\n{%codeblock Console Output lang:javascript %}\n[\n\"<tr>\\\n <td>Annalise</td>\\\n <td>Keating</td>\\\n <td>ak@murd.er</td>\\\n </tr>\",\n\"<tr>\\\n <td>Wesley</td>\\\n <td>Gibbins</td>\\\n <td>wes@murd.er</td>\\\n </tr>\",\n...\n]\n{%endcodeblock%}\n\nDahil kino-convert ng `jsonToHtmlString()` ang JSON objects into HTML, makikita natin na nagkaroon na tayo ng array ng strings galing sa array ng JSON objects. Puwede na natin itong gamitin para i-output sa front end ang data:\n\n{%codeblock index.js lang:javascript %}\ndocument.getElementById(\"table-body\")\n.innerHTML = htmlStrings.join('');\n{%endcodeblock%}\n\nSa code na ito, pagdudugtung-dugtungin lang natin lahat ng items ng `htmlStrings` gamit ang `join()` function. Pagkatapos, ilalagay natin ito sa table gamit ang `innerHTML` property. Once na malagyan ng value ang `innerHTML`, mag-a-appear na sa screen ang output natin.\n\n---\n\n**Footnotes**\n\n1. <span id=\"foot-1\"><a href=\"#ref-1\">^</a> Galing ito sa _Zalando RESTful API and Event Scheme Guidelines_.</span>\n","tags":["web","javascript","fetch","ajax"],"categories":["JavaScript"]},{"title":"Function Parameters at Return Statements","url":"/antares-blog/tl/Function-Parameters-at-Return-Statements/","content":"Kung nahihirapan kayong maintindihan kung paano gumagana ang function parameters, kailangan nating balikan ang Math (kasi sa mga kakilala ko mas pamilyar kayo rito so ito ginamit kong example).\n\n<!--more-->\n\nActually nakuha ang term na “function” sa Math; function as in algebraic function etc. So kung gagamitin nating example ‘to:\n\n```javascript\nf(x) = x² + 2\n```\n\nSo sa example na ‘to, ang f(x) ang function at x ang parameter. At ang expression kasunod ng equal sign ang laman ng function. So kung iko-convert natin ‘to sa JavaScript, ganito ang magiging hitsura niyan:\n\n<figure class=\"img-wrapper\">\n{% asset_img 47320893_1845011718942865_8779709452845580288_o.jpg \"Ang algebraic function na f(x) kapag na-convert sa 2016 JavaScript: `const f = (x) => ( x ^ 2 ) + 2`\" %}\n</figure>\n\nPero hindi naman ganiyan hitsura ng functions sa ibang mga programming language, so medyo gawin nating ‘traditional’:\n\n<figure class=\"img-wrapper\">\n{% asset_img 47245791_1845016282275742_5377634732055986176_n.jpg \"JavaScript code: `function f(x) { return (x^2) + 2; }\"%}\n</figure>\n\nSo by now siguro nage-gets niyo na. Kaya kung sa algebraic function, ganito ang magiging hitsura:\n\n```js\nlet x = 2:\nf(x) = x² + 2f(2) = 2² + 2f(2) = 4 + 2f(2) = 6\n```\n\n...gano’n din ang mangyayari sa functions ng programming. Magpapasa ka ng parameters (which is iyong `x`), then iyong value no’n masa-substitute sa lahat ng `x` sa loob ng function, gaya nito:\n\n<figure class=\"img-wrapper\">\n{% asset_img 47436228_1845022958941741_2142007783740932096_o.jpg %}\n</figure>\n\nSo dito sa example naman na ‘to, ang ibig sabihin ng `return` ay ‘sagot’. Mismo. Sagot no’ng equation. Sagot no’ng anumang ginawa sa loob ng function. All clear pa rin? Sige, next naman.\n\nSa example na iyon kanina, gumamit tayo ng math para maintindihan kung paano gumagana ang function parameters saka iyong `return` keyword. Pero hindi naman kasi lahat ng function math ang ginagawa. Iyong iba kumo-connect sa network, nagse-save sa database, nagse-save ng file, naglalagay ng button sa screen, etc. Paano applicable sa mga gano’n iyong math? Same principles lang din.\n\nSa mga ganiyang instances, ang bini-visualize ko lang, iyong mga functions ay parang mas maliit na program sa loob ng program mo. Siyempre para magamit mo iyong program mo, kailangan mo ng input, then kapag tapos na siya, bibigyan ka niya ng output. Same lang din dito. Parameter ang input, iyong return value ang output.\n\n<figure class=\"img-wrapper\">\n{% asset_img 47252927_1845029998941037_1217255244208013312_o.jpg %}\n</figure>\n\nSa example na ‘to, may function tayo na gagawing red iyong background ng `div` then ibabalik niya iyong `div` na iyon. Again, para lang ulit siyang math. Ipapasa natin sa parameter iyong `id` then, lahat ng `id` sa loob ng function, masa-substitute ng value na pinasa mo sa function.\n\nSo isipin natin na math function ang `makeCardRed()`; halos same pa rin naman, isipin natin na iyong pangalawang line ay computation or algebraic expression. Kung anuman iyong nakuha doon sa operation na iyon, iyon ang sagot kaya iyon ang ire-return natin.\n\nPero may mga function din minsan na walang sagot. Iyong mga walang return statements. Kahit wala silang return statements, siguro matatandaan niyo na sabi sa atin dati naglalagay si compiler/interpreter ng automatic na return statement, at either null or undefined ang nire-return nila. Kapag gano’n isipin niyo na lang na division by zero iyong function:\n\n```js\nf(x) = x ÷ 0\nf(2) //undefined\nf(4) //undefined\nf(∞) //undefined\n```\n\nGaniyan din mangyayari sa mga function na walang return statements. `undefined` ang value nila, although sa ibang language `null` iyong value kasi walang `undefined` na keyword, pero same principles lang din iyon.\n\n## Conclusion\n\nMay dahilan kung bakit marami ang nananakot sa atin before na maraming math sa Computer Science at Information Technology (at marami naman talaga), but that is because isa tayong branch ng engineering (na recently ko lang din napagtanto). And isa ‘tong example ng math; galing talaga sa math ang mga functions ng programming. Wala tayong magagawa diyan. Pero since nag-algebra, trigo, at dalawa ($&%#^$@), dalawang calculus ang marami sa atin, gamitin na rin natin iyong mga iyon sa advantage natin para ‘di masayang mga luha natin. Iyan, happy coding. Iyak habang nakangiti, I mean.\n\n---\n<i>Mula sa Facebook Notes ni <a href=\"https://facebook.com/gregantares\"><cite>Johannes Gregory Antares</cite></a>.</i>","tags":["web","javascript"],"categories":["JavaScript"]},{"title":"Pagso-sort ng Arrays sa JavaScript","url":"/antares-blog/tl/Pagso-sort-ng-Arrays-sa-JavaScript/","content":"\nSa article na ito, tatalakayin natin kung paano mag-sort nga arrays using JavaScript.\n\n<!--more-->\n\nMadali lang mag-sort ng array, mga bessywap. Let’s say na may array tayo ng mga pangalan:\n\n```javascript\nlet arrayOfNames = [\n    \"Annalise Keating\",\n    \"Wesley Gibbins\",\n    \"Laurel Castillo\",\n    \"Michaela Pratt\",\n    \"Connor Walsh\",\n    \"Asher Millstone\"\n]\n```\n\nKapag gusto natin silang i-sort, gagamitin lang natin ang sort() function. By default, sino-sort nito ang mga laman ng array alphabetically (according sa kanilang Unicode code point)\n\n```javascript\narrayOfNames.sort()\nconsole.log(arrayOfNames.join(', '))\n// OUTPUTAnnalise Keating, Asher Millstone, Connor Walsh, Laurel Castillo, Michaela Pratt, Wesley Gibbins\n```\n\nKapag gusto mong ikaw ang magdecide kung paano iso-sort ang mga items...\nSabi sa MDN Docs, tumatanggap ang sort() function ng isa pang function na magde-define kung paano mo siya iso-sort.\n\n```javascript\narrayOfNames.sort(function (a, b) {...})\n```\nSa example na ‘to, nagpasa tayo sa sort() ng isang function na walang pangalan (anonymous function). Iyong pinasa nating function, tumatanggap siya ng dalawang arguments (a and b). Ang a at b ay dalawang item mula sa arrayOfNames na pagkukumparahin natin.\n\n```javascript\narrayOfNames = [  {name: \"Annalise Keating\", age: 50},  {name: \"Wesley Gibbins\", age: 25},  {name: \"Connor Walsh\", age: 23},  {name: \"Laurel Castillo\", age: 26},  {name: \"Asher Millstone\", age: 24},  {name: \"Michaela Pratt\", age: 27}]\n```\n\nSa array naman na ito, iso-sort natin sila depende sa age nila, mula sa pinakamatanda hanggang sa pinakabata. Sa example na ito, bawat isang item sa arrayOfNames ay may name at age na property.\n\n```javascript\n// Magde-declare tayo ng function na magso-sort ng arrayOfNames base sa age\nfunction compareAges(a, b){  if(a.age > b.age) {    return -1  } else if(a.age < b.age){    return 1  } else {    return 0  }  }\narrayOfNames.sort(compareAges)\n```\n\nSa example na ‘to, magpapasa ang sort() function ng dalawang item mula sa arrayOfNames. Hahayaan niya ang compareAges() function na mag-decide kung paano niya iso-sort ang mga item.\n\n\n- Kapag mas mababa sa 0 ang ni-return ng compareAges(), mas mauuna si a.\n- Kapag mas mataas sa 0 ang ni-return ng compareAges(), mas mauuna si b.\n- Kapag eksaktong 0 naman ang ni-return ng compareAges(), hindi magagalaw ang dalawang item (sa mga modern browsers; hindi ganito ang nangyayari sa mga mas lumang browser).\n\nKaya sa function na ginawa natin, kapag mas matanda si a kaysa kay b (a.age > b.age), mas mauuna ito sa array (kaya tayo nag-return ng -1, isang number na mas mababa sa 0). Kapag si b naman ang mas matanda kay a, (a.age < b.age), mas mauuna si b, kaya tayo nag-return ng 1, isang number na mas mataas sa 0.\nAng magiging output ng program na ito ay ganito:\n\n```javascript\narrayofNames.sort(compareAges)\nconsole.log(arrayOfNames)\n// Output[...]0: Object { name: \"Annalise Keating\", age: 50 },1: Object { name: \"Michaela Pratt\", age: 27 },2: Object { name: \"Laurel Castillo\", age: 26 },3: Object { name: \"Wesley Gibbins\", age: 25},4: Object { name: \"Asher Millstone\", age: 24},5: Object { name: \"Connor Walsh\", age: 23}\n```\n\nKung titingnan ang mga age property ng mga laman ng array, makikita na naka-sort sila mula sa pinakamatanda tungo sa pinakabata.\nRandom sorting\nLet’s say na may string ka, ‘tapos gusto mong pagrambol-rambolin lahat ng letters nito.\n\n```javascript\nlet strRandom = \"HowToGetAwayWithMurder\"\n```\n\nPara marambol natin ang letters, kailangan natin silang i-convert at gawing array.\n\n```javascript\nlet arrRandom = Array.from(strRandom)\n```\n\nGagawin nitong array ang string mo. Bawat isang item sa arrRandom ay maglalaman ng isang letter.\n\n2. Gamit ang sort() function, irambol ang mga letra batay sa isang random number.\n\n```javascript\narrRandom.sort(function (){  let random = Math.random()  let roundedRandom = Math.round(random)  let sortingFactor = roundedRandom - 0.5\n  return sortingFactor})\n```\n\nSa example na ito, may tatlo tayong variables:\n\n- Ang random na isang random number.\n- Ang roundedRandom na may hawak ng ni-round off na value mula sa random. Dahil laging less than 1 ang nire-return ng Math.random(), dalawa lang amg magiging value nito kapag ni-round off: either +1 or 0.\n- At ang sortingFactor na magre-return ng either less than o greater than 0\n\nIsa isahin natin. Sa unang run, ang value ng random ay 0.8974618739176962. Kapag ni-round off ito, ang laging lalabas ay either +1 or 0.\n\n- Kung +1 ang roundedRandom, magiging +0.5 ang sortingFactor.\n- Kung 0 naman ang roundedRandom, magiging -0.5 ang sortingFactor.\n\nKaya kapag ni-sort natin ang arrRandom, ganito ang isa sa posibleng maging output:\n\n```javascript\n['o', 'w', 'G', 'o', 'H', 'T', 'e', 't', 'A', 'w', 'a', 'h', 'W', 't', 'i', 'M', 'u', 'y', 'r', 'r', 'd', 'e']\n```\n\n3. Ngayong na-rambol na ang letters, puwede na natin silang gawing string ulit.\n\n```javascript\nstrRandom = arrRandom.join('')\n```\n\nPagdudugtung-dugtungin ng join() ang lahat ng items ng array at gagawin itong string. By default, maglalagay ito ng comma sa pagitan ng bawat letters. Para matanggal iyon, nagpasa tayo ng isang string na walang laman. \n\n```javascript\n// Output\"owGoHTetAwahWtiMuyrrde\"\n```","tags":["web","javascript"],"categories":["JavaScript"]},{"title":"Array Filters","url":"/antares-blog/tl/Array-Filters/","content":"\nNang ilabas ang ECMAScript 6 noong 2015, dumami ang features ng JavaScript. Isa sa mga nakatanggap ng maraming improvements ang mga array. Sa artikulong ito, pag-usapan natin ang isa sa mga pangmalakasang functions ng JS Arrays&mdash;ang `Array.prototype.filter()`\n\n<!--more-->\n\nMay mga times kung kailan kailangan natin na makuha lang iyong mga items ng isang array na papasa sa isang condition. Kadalasan itong ginagamit sa mga database queries, gaya halimbawa ng mga price range sa mga eCommerce web sites; iyon bang lahat lang ng ididispley mo ay iyong mga mas mura sa P400.00. Dati, no'ng nag-aaral pa lang ako ng Visual Basic, kapag ganito ang case, ipo-for loop ko muna tapos isa-isa kong itse-check kung papasa sa condition. Pero sa JavaScript, may built-in nang function para dito.\n\n## Array Filters (JavaScript)\n\nFor example, may array tayo ng objects, at bawat item ng array na 'to ay may name, age, location, at gender.\n\n```javascript\nconst people = [\n  { name: \"Francis Rubio\", age: 19, location: \"Caloocan City\", gender: \"male\" },\n  { name: \"Annalise Keating\", age: 50, location: \"Philadelphia\", gender: \"female\" },\n  { name: \"Wesley Gibbins\", age: 25, location: \"England\", gender: \"male\" },\n  { name: \"Asher Millstone\", age: 24, location: \"Manila\", gender: \"male\" },\n  { name: \"Michaela Pratt\", age: 25, location: \"Cebu City\", gender: \"female\" },\n  { name: \"Laurel Castillo\", age: 26, location: \"Mexico\", gender: \"female\" },\n  { name: \"Connor Walsh\", age: 24, location: \"Davao\", gender: \"male\" },\n  { name: \"Oliver Hampton\", age: 24, location: \"Tagaytay\", gender: \"male\" },\n  { name: \"Francis Delfino\", age: 43, location: \"Coalport\", gender: \"male\" },\n  { name: \"Bonnie Winterbottom\", age: 43, location: \"Makati\", gender: \"female\" },\n  { name: \"Nathaniel Lahey\", age: 53, location: \"Taiwan\", gender: \"male\" },\n  { name: \"Rebecca Sutter\", age: 26, location: \"Rwanda\", gender: \"female\" }\n];\n```\n\nThen sinabi sa atin ng client natin na gusto niyang malaman kung sino sa mga taong 'to ang mas matanda sa 25 years old. Paano natin gagawin iyon?\n\n## For-loop (good way)\n\nAng unang papasok sa isip natin mga bessywap bilang mga mabubuting programmer ay ang paggamit ng for loop. Maglu-loop tayo sa bawat item, itse-check natin kung mas matanda sila sa 25, then ilalagay natin sila sa array.\n\n```javascript\nlet peopleOlderThan25 = []\nfor(let i = 0; i < people.length; i++){\n    let person = people[i]\n    if(person.age > 25){\n        peopleOlderThan25.push(person)\n    }\n}\n```\nAyos. Kapag ni-run ang program natin, ito ang output:\n\n```javascript\n[\n    { name: 'Annalise Keating', age: 50, location: 'Philadelphia', gender: 'female' },\n    { name: 'Laurel Castillo', age: 26, location: 'Mexico', gender: 'female' },\n    { name: 'Francis Delfino', age: 43, location: 'Coalport', gender: 'male' },\n    { name: 'Bonnie Winterbottom', age: 43, location: 'Makati', gender: 'female' },\n    { name: 'Nathaniel Lahey', age: 53, location: 'Taiwan', gender: 'male' },\n    { name: 'Rebecca Sutter', age: 26, location: 'Rwanda', gender: 'female' }\n]\n```\nTama ang output, lahat ng age ay larger than 25. Lookin' good. 👍👍👍👍👍\n\nPero may mas maganda at mas madaling way pa para gawin 'to (good news sa mga haters ng for loop.)\n\n## Array.filter()\n\nGagamitin natin ang built-in function na filter() sa paggawa ng task natin. Ang kailangan natin ay magpasa ng isang function sa filter() na magde-decide kung papasa ba sa condition natin iyong item na iyon.\nPara mas maintindihan natin, isa-isahin natin ang mga problema natin.\n\nSo meron tayong array kung saan manggagaling ang lahat ng gagamitin nating items (input).\nKailangan nating piliin lang kung sino sa mga item na 'to ang may age na mas malaki sa 25 (process).\nThen lahat ng papasa sa condition natin ay iso-store natin sa isang array (output).\n\nLet's see. Paano ba ginagamit ang `filter()`?\n\n```javascript\nlet peopleOlderThan25 = people.filter()\n```\n\nPero hindi pa iyan gagana. Kailangan nating i-describe kay `filter()` kung ano ang gusto nating makuha. Kailangan niya ng function, kaya magpapasa tayo ng function sa `filter()`.\n\n```javascript\nlet peopleOlderThan25 = people.filter(pangfilterNaFunction)\n​\n\nfunction pangfilterNaFunction(){\n\n}\n```\n\nAs you can see, nag-declare tayo ng function at ipinasa natin ito kay `filter()`.\n\n> NOTE: kapag nagpapasa ka ng function sa `filter()`, wala dapat parentheses (see example). Kapag meron kasi, hindi mapapasa iyong function dahil mag-e-execute agad siya.\n\nSo ano'ng kailangan nating gawin sa `pangfilterNaFunction()`? Sabi ni `filter()`, kailangang mag-return ng boolean iyong function na pinasa natin sa kaniya.\n\nKung gusto nating makapasa sa condition natin iyong item ng array, magre-return tayo ng `true`\nKung hindi naman, `false` ang ire-return ng function natin.\n\nSo pa'no iyon? Una muna, kailangan nating makuha iyong items.\n\n```javascript\nfunction pangfilterNaFunction(item){\n\n}\n```\n\nWoah, wait. Sa'n galing iyong item? Ang mangyayari kasi rito, sa code ng `filter()`, tatawagin niya iyong function na pinasa natin. So for example, kung iyong array natin ay may 15 items, 15 times na matatawag iyong `pangfilterNaFunction()`, at ilalagay ni `filter()` sa item iyong current item na iyon. So parang for loop din, except mas maikli, mas madaling basahin, at mas mabilis in terms of performance.\n\nSo ngayon, i-try nating gawin iyong `true` or `false` na pagre-return:\n\n```javascript\nlet peopleOlderThan25 = people.filter(pangfilterNaFunction)\n​\nfunction pangfilterNaFunction(item){\n    if(item.age > 25) return true\n    else return false\n}\n```\n\nIyan. Kapag ni-run iyong program, same lang din ang magiging output kagaya no'ng sa for loop. Pero baka itanong mo naman, 'akala ko ba mas maganda, mas madaling basahin, mas maikli, e ang daming proseso niyan e, saka ang daming lines of code. Lokomoko.' Kaya ganiyan kahaba para makita natin iyong step by step na process kung paano tayo makakarating sa pinakamaikling code na madaling basahin. Ito na iyon.\n\nNakita niyo ba iyong condition sa if-else statement natin?\n\n```javascript\nif(item.age > 25){...}\n```\n\nIyong `item.age > 25`, 'di ba `true` or `false` lang din naman ang magiging value niyan? So bakit di na lang natin tanggalin iyong if-else, at iyan na lang ang i-return natin?\n\n```javascript\nlet peopleOlderThan25 = people.filter(pangfilterNaFunction)\n​\nfunction pangfilterNaFunction(item){\n    return item.age > 25\n}\n```\n\nSee? Nabawasan ng isang line iyong code! xD Anyway, iyang bagong function na iyan, same lang din iyan sa kanina. Pero tinanggal natin iyong if-else since redundant na siya. Next, paikliin pa ulit natin.\n\nIyong `pangfilterNaFunction()`, isang beses lang natin nagamit, tama? Malamang sa malamang, hindi na natin iyan gagamitin ulit, tama? Tanggalan na lang kaya natin siya ng pangalan, since isang beses lang naman siyang matatawag?\n\n```javascript\nlet peopleOlderThan25 = people.filter(function (item){\n    return item.age > 25  \n})\n```\n\nSee? Three lines na lang. TAGUMPAY! xD Kidding aside, ang ginawa lang natin dito ay nilipat natin iyong declaration ng function sa loob mismo ng filter(). Yes, you can do that sa JavaScript. 😄\n\nPERO... may way pa ulit para lalo pang mapaikli iyan! Gagamit tayo ng tinatawag na mga arrow function.\n\nSa arrow functions, puwede na nating tanggalin ang function na keyword para parenthesis na lang ang matira. It looks like this:\n\n```javascript\nlet peopleOlderThan25 = people.filter((item)=>{\n    return item.age > 25\n})\n```\n\nOkay, 'wag kayong malito. Pinalitan lang natin iyong way ng pagde-declare natin. May iba pang benefits ang paggamit ng arrow functions, pero hindi ko muna isasama rito. Anyway, nagtanggal lang tayo ng keyword. Umikli siya kahit paano. BUT WAIT! There's more.\n\nSa arrow functions, may tinatawag na implicit return. \"Implicit\", kabaligtaran ng explicit, given na gano'n siya. 'Return', as in return na keyword. Ibig sabihin, puwede na nating tanggalin ang return keyword. Pati ang curly braces. Yesmalu. Shocking, 'di ba?\n\n```javascript\nlet peopleOlderThan25 = people.filter((item) => item.age > 25)\n```\n\nOkay ganito siya gumagana. Ie-execute niya iyong arrow function, gaya lang din kanina. Then makikita niya, \"Uy, may value. Hindi naka-assign sa variable. Walang curly brac... implicit return 'to.\" Then, titingnan niya iyong value ng condition, makikita niya ulit, \"Boolean 'to. Ay true... Ay false... false 'to, itong isang item dito true\" hanggang sa maubos ang lahat ng items sa array.\n\nIyan. One. Line. Program. Be proud of yourself! Na-compress mo ang program na may 7 lines into a one-liner na walang error, walang bug, madaling basahin, at mas mabilis kaysa sa dati. Ikaw na magaling. Ikaw na talaga. xD\n","tags":["web","javascript"],"categories":["JavaScript"]},{"title":"Welcome to Antares Programming Blog","url":"/antares-blog/en/en/Welcome-to-the-Antares-Programming-Blog/","content":"\nFinally! The Antares Programming Blog is online! The blog has so many things in store for you, so check it out!\n\n<!--more-->\n\nAntares Programming started out as a venture by me, Francis Rubio, with the goal of making money from developing applications for students who have so many things on their plate that they can't possibly create one or two of their capstones or theses at the same time. Being a student myself, I know how that feels and _I needed the money_. So I created the [Antares Facebook page](https://facebook.com/antaresprogramming).\n\nBut since then, Antares has taken a different direction. Surprisingly, within months' time, it became a window where I can share things that I have learned and are currently learning to my Facebook friends. I had wanted to do something like this for a long time, but I had always thought no one would read them, or no one would care. And the most extreme was that I thought that the people who read would assume that I am being a _smartass_ or a _know-it-all_.\n\nHowever, the Antares page gained traction after my friends&mdash;my dearest and closest friends&mdash;have promoted it ever so devotedly. It reached even those far away friends-of-friends. This gave me a confidence boost; I thought \"Maybe I should try doing this.\" So I posted the [first series of infographics](https://web.facebook.com/antaresprogramming/posts/954424738083217?__xts__%5B0%5D=68.ARCeRbXkJ15LFKcnB4WppeTi0bmQNpptR0FEeaTqOCyPmrUUdESVleoQg5s43HI4GzZ6gjeZTbxhhU_qFY21sZPGp305sGdInoZiEGAjDXeGU1fs5erUb7OCj99qSlufYAAZBWrSFw5RIJPj4zr15tbz2EAugctjmBCDExKFlWK3cVbMZP8eylEm7M9dB-JPtPIYFjyWFedaDVThd49Rw0Ist0LImNra5eWnzwBJutzo5Biwc18v_Onr7JnbWgQP9aGC_uEyw7Cg8Pc6Mvc_rm60DcQ5v79T1Ei-OeiviUHGHEySliBbEegNfHpfUsd6RkaV30dSygDDAmA8EkfhCgI&__tn__=-R) (which will also be available here some time soon), which exploded because people actually liked it.\n\nIf you're reading this, you're probably one of those people who promoted that page. Or probably one of the first ones to like that page. You're one of the reasons of this success. So to give back to you, I am committing myself to creating more content. Learning never stops, they say. And I believe that we all should learn together. Plus, having an active blog would benefit my résumé.\n\n## What should I expect from the Antares Programming blog?\n\nThe first content I put out in the Facebook page was a set of text-heavy infographics. And that was an attempt to give big information in bite-sized chunks. Obviously, that is an effort in vain. We can't really learn that much from very small chunks; we have to take in big pieces of information in order to be better.\n\nThe opposite is the kind of content I am planning to see in the Antares Blog. Emphasis on _planning_. It's too early to say anything about the exact path I am taking with this blog. But I am planning on giving more detailed pieces about programming in general, coding styles, etc.\n\nOf course, that is with the disclaimer that I am not an authority. But for the most part I believe I have enough knowledge to share, and as far as I can, I will include the original sources of information.\n\n## Within what bounds of topics will this blog write about?\n\nWell, we start with the core&mdash;programming concepts. Like explanations of stuff like abstraction, object-oriented programming, polymorphism, functional programming, and the likes. I also like to explore the different best practices, coding style, and other things like that.\n\nI also want to talk about design. Being a budding UX designer myself, I am passionate about making things decent enough to look at, and many would benefit from this because a lot of times, when you are a hardcore programmer, you tend to neglect the front-facing part of your system. So I want to touch that, too.\n\nI also want to talk about tools, like my personal favorite [VS Code](https://code.visualstudio.com) (which is surprisingly not gaining traction here in the Philippines in spite of being much more superior than its leading competitor Sublime Text), open source software that I use that have made my life easier, like the (as of the time of writing) free [Gravit Designer](https://designer.io), and others that I think would fit the general theme of the blog.\n\n## Will there be memes?\n\nHa-ha! No.\n\n## The [Antares Programming Facebook page](https://facebook.com/antaresprogramming) posts in Filipino. Would you do that here too?\n\nOf course. My target demographic are the Filipinos; this blog is for them. So I want to use the language they understand. That said, I wouldn't want to neglect people from other parts of the world that could benefit from here.\n\nOne thing I have been thinking about was to have the articles first written in Filipino and then translated to English. While this is a great prospect, I don't have much time on my hands, so maybe we'll see in the future.\n\n## Seriously, no memes?\n\nYeah. No memes.\n\n## How can I help?\n\nIf you are reading this, you are interested in helping me, and for just that I want to thank you very much! The best way to help is to spread the word! Tell your friends about this blog and the Facebook page. I would really appreciate that.\n\nYou can also recommend books and articles that I can read, so we gain a bigger knowledgebase for better articles.\n\nAnd **if you want to help me write articles**, you are very welcome, kind person! I am open-sourcing this blog's code base, so just send me a pull request on [Github](https://github.com/celestialcinnamon/antares-blog). The instructions on how to do this will be there so be sure to look at that.\n\n## A word about memes\n\nOkay, I am a fun person, everyone knows that. But for me, memes about programming are _detestable_. I mean that in the sense that there's very few topics in the computer world that are actually _memeable_. That results in the same joke being repeated over and over again but only using different meme formats. An example of this is the semi-colon joke. Seriously, we have smart IDE's and linters now. The old days are gone, it's so much easier to hunt down those pesky missing semi-colons. And that joke, I think, died a long time ago.\n\nOf course, defending myself, this doesn't mean I don't want to have fun. You'll find that I write humor into my articles. It's just that I am getting tired of the same thing over and over again. Plus there's already a lot of platforms out there (Facebook alone has too many pages to count) that serve these memes. This blog is not for that, I'm sorry to tell you.\n\n## What about those infographics? Will you still do them?\n\nOf course. I am a visual learner so I really value a delicious graphic to complement my learning. The articles I am going to write will include several diagrams if appropriate, and I would try to make them as decent and accurate as possible. And I will continue making infographics on Facebook. Some time soon, I would also include them here.\n\nStill reading? Okay thanks! I want to thank you for taking this journey with me. I promise to give you the best articles I could write so we can all learn together. Thank you, and see you on the next article.\n","tags":["meta"],"categories":["Meta"]},{"title":"404 · Wala Rito Ang Hinahanap Mo","url":"/antares-blog/404/index.html","content":"<style>\n    .page {\n        display: grid;\n        align-items: center;\n    }\n\n    .page article::before {\n        content: '404';\n        font-size: 40vw;\n        font-weight: 900;\n        text-align: center;\n        z-index: -1;\n        opacity: 0.1;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .page article {\n        grid-column: 1/2;\n        grid-row: 1/2;\n        position: relative;\n    }\n\n    .page ul,\n    .page p {\n        font-size: 1.25rem;\n        text-indent: 2rem;\n        font-family: var(--serif);\n        max-width: 60ch;\n        margin: 1rem auto;\n    }\n    .page h2,\n    .page h1 {\n        font-weight: 900;\n        text-align: center;\n        padding: 3vmin;\n    }\n\n    .page h1 {\n        font-size: 6vmin;\n\n    }\n</style>\n\n<article>\n    <header>\n        <h1>Ang Dakilang Lambak ng Karimlan</h1>\n    </header>\n    <p>Ito ang Dakilang Lambak ng Karimlan. Sa lugar na ito ay walang anumang pag-asa. Ang sinumang nakarating dito ay nawawala at naliligaw. Subalit lahat ng nawala ay nasusumpungan, at lahat ng naliligaw ay nakababalik sa kanilang pinanggalingan. Wala sa lambak na ito ang hinahanap mo.</p>\n\n    <h2>Ang mga Puwede Mong Gawin</h2>\n    <ul>\n        <li>Bumalik sa <a href=\"/antares-blog/\">Home page</a></li>\n        <li>I-like at i-share ang <a href=\"https://www.facebook.com/antaresprogramming\">page namin sa Facebook</a></li>\n    </ul>\n</article>"},{"title":"Guidelines for Initializing Variables","url":"/antares-blog/Guidelines-for-Initializing-Variables/index.html","content":"<p>We all want to learn something before we make mistakes by not knowing it. Here are some of the tips we've accumulated so far about initializing variables. Note that these are guidelines and not strict policies, so you are free to tweak them as needed. However, if you're a beginner, it's best to stick with these guidelines for peace of mind.</p>\n\n<p class=\"float-clear\">\n<figure class=\"img-wrapper img-wrapper--illustration float-left\">\n    <img src=\"index/Page 2.png\" alt=\"\">\n</figure>\n    **Mag-initialize agad ng variable pagkatapos sila i-declare.** Magandang habit ito dahil isa ito sa mga forms ng defensive programming. Makakasiguro ka na never kang magkakaroon ng initialization errors.\n</p>\n<p class=\"float-clear\">\n<figure class=\"img-wrapper img-wrapper--illustration float-left\">\n    <img src=\"index/Page 3.png\" alt=\"\">\n</figure>\n    **Mag-initialize ng variables malapit sa kung saan sila unang ginamit.** May habit tayo na nagde-declare tayo ng variables sa simula ng program. But actually, mas maganda na i-declare *at i-initialize* ang variables malapit sa kung saan natin sila unang ginagamit. Isa itong halimbawa ng Principle of Proximity, na nagsasabi na dapat nating pagsama-samahin ang mga actions na related sa isa't isa.\n</p>\n<p class=\"float-clear\">\n    <figure class=\"img-wrapper img-wrapper--illustration float-left\">\n        <img src=\"index/Page 4.png\" alt=\"\">\n    </figure>\n    **Gumamit ng `final` o `const` kailanma't posible.** Kapag idineclare nating `final` (Java) o `const` (C++, JavaScript, etc.) ang mga variable natin, mapipigilan mo ang variable na magkaroon ng ibang value pagkatapos na ma-initialize nito. Mababawasan ka ng ita-track dahil hindi na puwedeng magbago ang values nila pagkatapos ng initialization.\n    \n</p>\n<p class=\"float-clear\">\n    <figure class=\"img-wrapper img-wrapper--illustration float-left\">\n        <img src=\"index/Page 5.png\" alt=\"\">\n    </figure>\n    **Tutukan ang mga accumulators at counters.** Bigyang pansin ang mga variables na gaya ng `j`, `k`, `total`, `counter`, `index`, at iba pang kagaya nito dahil kadalasang pinagmumulan sila ng bugs. Siguruhing i-reset ang values nila o i-reinitialize sila bago sila gamiting muli.\n</p>\n<p class=\"float-clear\">\n    <figure class=\"img-wrapper img-wrapper--illustration float-left\">\n        <img src=\"index/Page 6.png\" alt=\"\">\n    </figure>\n    **Mag-initialize ng object properties sa constructor.** Hindi mo alam kung aling method ang gagamit ng aling properties. Hindi rin natin alam kung alin sa mga ito ang unang gagamitin. Kaya siguruhing i-initialize ang mga property sa constructor ng class.\n</p>\n<p class=\"float-clear\">\n    <figure class=\"img-wrapper img-wrapper--illustration float-left\">\n        <img src=\"index/Page 7.png\" alt=\"\">\n    </figure>\n    **Tingnan kung kailangan mong i-reinitialize ang mga variable.** Laging i-check kung dapat bang i-reset ang values ng isang variable either after matapos ng loop at gagamitin mo ito ulit, or dahil hindi nagbabago ang value nito after tawagin ng method kung saan ito ginagamit. Kung kailangan mo itong i-reset, siguruhing gawin ito sa loob ng code na inuulit.\n</p>\n<p class=\"float-clear\">\n    <figure class=\"img-wrapper img-wrapper--illustration float-left\">\n        <img src=\"index/Page 8.png\" alt=\"\">\n    </figure>\n    **Gamitin ang compiler o warning ng IDE mo.** Maraming IDE at compiler ang naglalabas ng warnings kapag gumagamit ka ng mga variables na hindi na-initialize. Gamitin ito.\n</p>\n<p class=\"float-clear\">\n    <figure class=\"img-wrapper img-wrapper--illustration float-left\">\n        <img src=\"index/Page 9.png\" alt=\"\">\n    </figure>\n    **I-check ang validity ng mga parameters.** Bago mo gamitin ang mga parameters sa mga method o functions mo, lagi munang i-check ang mga ito lalo na sa mga loosely-typed languages na gaya ng JavaScript. Baka integer ang kailangan mo pero string or floating-point number ang ipinasa sa function/method mo.\n</p>"},{"title":"Mga Interactive na Content","url":"/antares-blog/activity-studio/index.html","content":"<style>\n</style>\n<h1 class=\"post__title\">Mga Interactive na Content</h1>\n\n<div class=\"page-content\">\n   <p>\n       Sa page na ito, may mga interactive widgets na puwede mong magamit para mas maintindihan ang ilang technical concepts.\n   </p>\n   <section class=\"activity-grid hidden\">\n       <button class=\"btn btn--activity\" data-url=\"binary/\">Binary Wires</button>\n       <button class=\"btn btn--activity\" data-url=\"binary/\">Binary Wires</button>\n       <button class=\"btn btn--activity\" data-url=\"binary/\">Binary Wires</button>\n       <button class=\"btn btn--activity\" data-url=\"binary/\">Binary Wires</button>\n   </section>\n   <section class=\"activity-area\">\n        <iframe src=\"\" frameborder=\"0\"></iframe>\n   </section>\n</div>"},{"title":"Mga Resources na Puwedeng Ma-download","url":"/antares-blog/downloads/index.html","content":"<style>\n    details summary {\n        cursor: pointer;\n    }\n    details summary h2 {\n        display: inline;\n    }\n</style>\n<h1 class=\"post__title\">Mga Resources na Puwedeng Ma-download</h1>\n\n<div class=\"page-content\">\n    <details>\n        <summary>\n            <h2>Tungkol sa mga Downloadables</h2>\n        </summary>\n        <p>\n            Dahil determinado ang Antares Programming na mag-provide ng de-kalidad na mga ICT educational materials sa\n            wikang Filipino, kasama na sa features ng Antares Blog (as of v.3.0.0) ang mga files na puwedeng ma-download\n            para magamit mo offline. Kasama rito ang mga PDF versions ng mga artikulo sa Antares Blog, mga resources na\n            mula sa iba't ibang references, mga Filipino text at video tutorials, at marami pang iba.\n        </p>\n        <p>\n            Kaya lang, kailangan ng oras para makagawa ng mga materials. At kailangan ng mas maraming oras para makagawa\n            ng mga *de-kalidad* na materials. Dahil dito, hindi agad-agad na magkakaroon ng mga educational materials\n            dito. Pero ang magandang balita ay ito: maia-upload agad sa page na ito ang lahat ng mga resources agad-agad\n            pagkatapos nilang maihanda.\n        </p>\n        <p>\n            Masaya ang Antares Programming na tumulong sa inyo sa pag-aaral n'yo ng Web development. Pero ang mga ito ay\n            nangangailangan ng oras at pera. Kaya naman masaya naming tatanggapin ang anumang tulong na gusto ninyong\n            ibigay. Para sa karagdagang impormasyon, tingnan ang <a\n                href=\"/antares-blog/tungkol-sa-amin/#tulungan-kami\">mga detalye ng pagtulong sa amin.</a>\n        </p>\n    </details>\n\n    <!-- <aside class=\"notification\">\n        <h2 class=\"notification__title\">Wala pang available na downloadable resource.</h2>\n        <p>Agad-agad na ia-upload sa page na ito ang mga downloadable resource kapag handa na ang mga ito. Para ma-update ka kung may bago, puntahan ang aming <a target=\"_blank\" href=\"https://facebook.com/antaresprogramming/\">Facebook page</a>.</p>\n    </aside> -->\n\n    <h2>Mga Learning Module</h2>\n    <h3 id=\"grade-10\">Para sa mga Grade 10</h3>\n    <ul class=\"downloads\">\n        <li class=\"downloadable\">\n            <a href=\"index/g-10/lesson-1.student.pdf\" download=\"\">Lesson 1: Introduction to JavaScript</a>\n        </li>\n    </ul>\n</div>"},{"url":"/antares-blog/images/html_code.html","content":"<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/antares-blog/images/apple-touch-icon.png?v=yyL3E0AWom\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/antares-blog/images/favicon-32x32.png?v=yyL3E0AWom\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"194x194\" href=\"/antares-blog/images/favicon-194x194.png?v=yyL3E0AWom\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"/antares-blog/images/android-chrome-192x192.png?v=yyL3E0AWom\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/antares-blog/images/favicon-16x16.png?v=yyL3E0AWom\">\n<link rel=\"manifest\" href=\"/antares-blog/images/site.webmanifest?v=yyL3E0AWom\">\n<link rel=\"mask-icon\" href=\"/antares-blog/images/safari-pinned-tab.svg?v=yyL3E0AWom\" color=\"#efaa00\">\n<link rel=\"shortcut icon\" href=\"/antares-blog/images/favicon.ico?v=yyL3E0AWom\">\n<meta name=\"apple-mobile-web-app-title\" content=\"Antares\">\n<meta name=\"application-name\" content=\"Antares\">\n<meta name=\"msapplication-TileColor\" content=\"#ffc40d\">\n<meta name=\"msapplication-TileImage\" content=\"/antares-blog/images/mstile-144x144.png?v=yyL3E0AWom\">\n<meta name=\"msapplication-config\" content=\"/antares-blog/images/browserconfig.xml?v=yyL3E0AWom\">\n<meta name=\"theme-color\" content=\"#bbbbbb\">"},{"title":"Ang Copyright ng Antares Programming","url":"/antares-blog/copyright/index.html","content":"\n<h1 class=\"post__title\">Ang Copyright ng Antares Programming</h1>\n\n<div class=\"page-content\">\n    <p>Sa artikulong ito, tinatalakay ang lahat ng may kaugnayan sa copyright ng Antares Programming. Ang <i>content</i> ay tumutukoy sa mga akdang gaya ng artikulo, infographics, at videos. Ang mga <i>pag-aari</i> ng Antares Programming bilang isang brand ay ang Antares Blog (<i>Blog</i>), ang aming Facebook Page, at ang aming YouTube channel.</p>\n\n    <h2>Pagse-share ng Content</h2>\n\n    <p>Nirereserba ng Antares Programming ang lahat ng karapatan sa mga content na lumalabas dito. Inirerekomenda namin na sa halip na i-repost sa ibang platforms ang mga artikulo namin, dapata na i-share ng mga interesado ang link papunta rito. Ito ang pinakamabuting paraan para malaman ng mga tao na bukod sa artikulong gustong i-share, may iba pang mga content na puwede nilang makita.</p>\n\n    <p>Kahit na kadalasan ay hindi naman namin sinisita ang mga nagre-repost ng content namin sa iba pang mga site, gusto naming ipaalaala na ang pagre-repost ng content namin nang hindi kami binibigyan ng credits bilang mga original author ng mga artikulong iyon ay isang gawa ng <em>lantarang pagnanakaw</em>. Kapag nalaman namin ang ganitong insidente, puwede naming gamitin ang karapatan naming gumawa ng legal na mga hakbang para ipatanggal ang content namin sa nabanggit na mga platform o site kung hindi makikinig ang gumawa nito sa hanggang tatlong ulit naming pagkontak sa kanila. Subalit kung ang reposted content namin na lumilitaw sa kanilang site o platform ay may angkop na credits at, mas mabuti, mga link pabalik sa Antares Blog, ipahihintulot namin iyon.</p>\n\n    <p>Ang mga infographic na lumalabas sa Antares Facebook page ay sakop din ng copyright na ito. Ang mga infographic na ito ay kadalasan nang may logo ng Antares Programming at mga link pabalik sa Antares Blog, Facebook page, o YouTube channel namin. Pero kung gagawa ang ilan ng hakbang para pilit na tanggalin ang anumang tanda na pag-aari namin ang mga infographic na iyon, puwede naming gamitin ang karapatan naming gumawa ng legal na mga hakbang para ipatanggal ang content namin sa kanilang platform o site kung hindi sila makikinig sa hanggang tatlong ulit naming pagkontak sa kanila. Kung may nagnanais i-share ang mga infographics ng Antares Programming, malaya nilang magagawa iyon kahit walang credits sa amin hangga't nakikita pa rin ang mga tanda na pag-aari namin ang mga iyon.</p>\n\n    <h2>Pagsusulat Para sa Blog</h2>\n\n    <p>Kung ang isa ay nagsulat ng isang artikulo na lumabas sa Antares Blog, ang content na iyon ay pagmamay-ari niya at mananatili iyong ganoon. Sa lahat ng paglitaw ng artikulo niya sa mga lugar na pag-aari namin, lilitaw ang pangalan niya na magpapakilala sa kaniya bilang author ng artikulong iyon. Magkagayunman, may karapatan ang Antares Programming na alisin sa mga pag-aari namin ang gawa niya kailanma't naisin namin&mdash;siyempre, pagkatapos naming siyang bigyan ng pasabi. Ang mga content niya na lumabas sa Antares Programming ay nakikita namin bilang mga bagay na ipinahiram, at sa ilalim ng anumang pagkakataon ay hindi namin aangkinin ang mga ito. Malaya niyang maise-share at maire-repost ang gawa mo sa ibang platforms o site kahit walang credits sa amin.</p>\n\n    <p>Pero ang lahat ng mga artikulong lalabas sa Antares Blog ay kinakailangang dumaan sa isang serye ng mga pagsusuri bago ito maaprubahan. May kalayaan kaming i-edit ang mga artikulong ibinibigay sa amin para tumugma ito sa tamang estilo ng pagsulat na gusto namin para sa Blog. Wala kaming karapatang baguhin ang mensahe ng mga content na ibinibigay sa amin, at responsibilidad namin na ipakita muna sa author ng artikulo ang mga pagbabagong ginawa sa kaniyang gawa bago ito lumabas sa Blog. May karapatan din kaming tanggihan at huwag ilabas sa Blog ang mga content na ipinapadala sa amin kung hindi ito kaayon ng aming mga prinsipyo o kung hindi pumapayag ang orihinal na author na i-edit ang artikulo niya para sumunod sa estilo ng pagsulat sa Blog. Para sa karagdagang impormasyon, tingnan ang artikulong <cite><a href=\"../writing-guidelines/\">Mga Guidelines sa Pagsulat ng Artikulo Para sa Antares Blog</a></cite>.</p>\n\n    <h2>Pagpu-proofread at Pagre-research</h2>\n\n    <p>Obligado kaming isama sa listahan ng pinasasalamatan namin ang mga tumulong sa pagpu-proofread at pagre-research. Karapatan nilang tumanggap ng pagkilala para sa gawa nila ng kabutihan. Pero ang tanging kailangan lang naming gawin ay ang banggitin ang pangalan nila. Puwede naming banggitin o hindi ang mga artikulong na-proofread nila o ni-research. Puwede naming banggitin o hindi ang dami ng tulong na naiambag nila.</p>\n    \n    <p>Maliban sa mga iyan, wala na kaming iba pang obligasyon sa mga tumutulong. Hindi nila maaaring pilitin ang Antares Programming na gawin ang anumang taliwas sa mga prinsipyo nito, o sa mga nakalatag nitong tunguhin para sa hinaharap. Hindi rin sila maaaring maglagay ng anumang anunsiyo sa Blog o sa anumang pag-aari namin para sa layuning iharap ang sarili niya at gamiting isang publicity agent ang Antares Programming. Hindi nila maaaring pagkakitaan ang Antares Programming at ang mga pag-aari nito.</p>\n\n    <h2>Pagbibigay ng Pinansyal na Tulong</h2>\n\n    <p>Obligado kaming isama sa listahan ng pinasasalamatan namin ang mga nagpapadala ng pinansyal na tulong. Ang lahat ng nagnanais magpadala ng salapi bilang donasyon ay puwede lang magpadala ng hanggang sa <span class=\"numerical-value\">₱1,000.00</span> bawat buwan. Anumang lalagpas dito ay ibabalik namin sa nagpadala. Kapag hindi niya ito tinanggap pabalik, hindi na namin tatanggapin ang anumang ibibigay niyang donasyon sa hinaharap.</p>\n\n    <p>Ang mga nagbibigay ng perang donasyon ay hindi maaaring abusuhin ang kanilang espesyal na katayuan. Hindi nila maaaring pilitin ang Antares Programming na magpaskil ng anumang anunsiyo o advertisement sa alinman sa mga pag-aari nito. Hindi rin nila maaaring gamitin ang Antares Programming bilang isang publicity agent para sa personal nilang mga pakinabang. Hindi rin nila maaaring pilitin ang Antares Programming na kumilos nang taliwas sa mga prinsipyo nito, o iwan ang mga kasalukuyang nakalatag na tunguhin nito para sundan ang ibang plano na ibibigay nila kapalit ng pera.</p>\n\n    <p>Ang mga salaping ipinadadala sa Antares Programming ay dapat ituring na <i>donasyon</i> sa halip na bayad. Hindi trabaho ng Antares Programming ang anuman sa mga ginagawa nito; ang lahat ng ito resulta ng boluntaryong pagkilos mula sa pag-ibig at kabutihan sa ibang mga developer. Hindi ito dapat gawing pagkakakitaan o negosyo ng sinuman sa Antares Programming. Dapat ilaan ang mga donasyon sa budget na gagamitin sa pagbabayad ng kuryente, device, pagkain, at iba pang kinakailangan para patuloy na tumakbo ang mga gawain ng Antares Programming. Sa pagtatapos ng bawat buwan, dapat na padalhan ng Antares Programming ang bawat isang nagbigay ng donasyong pera sa buwang iyon ng isang financial report para sa mga ginawa sa buwang iyon.</p>\n\n    <h2 id=\"sponsorship\">Pag-sponsor sa Antares Programming</h2>\n    <p>\n        Ang mga sponsor ng Antares Programming ay maaari lang mag-sponsor ng isang artikulo, isang set ng infographics, o isang video sa YouTube channel. Obligado ang Antares Programming na gawin ang mga sumusunod:\n    </p>\n    <ul>\n        <li>Lantarang banggitin na ang content ay sponsored</li>\n        <li>Maglagay ng link patungo sa produkto o bagay na nais i-plug ng sponsor</li>\n    </ul>\n    <p>Hindi tatanggapin ng Antares Programming ang sinumang sponsor na nagnanais maglagay ng ads sa Blog. Ang mga ads na ito ay nag-iiwan ng cookies sa browser ng mga user, na nagpapahintulot sa mga kompaniya na may-ari ng mga ads na ito na i-track ang mga mambabasa namin nang hindi nila namamalayan. Taliwas ito sa prinsipyo ng Antares Programming na protektahan ang data at privacy ng mga tumatangkilik dito.</p>\n\n    <h2>Karagdagang Impormasyon</h2>\n\n    <p>Ang lahat ng tanong na hindi nasagot sa artikulong ito ay puwedeng sabihin sa amin  sa isang message sa aming [Facebook page](https://facebook.com/antaresprogramming) o sa pagse-send ng [e-mail sa aming lead writer](mailto:francoisoibur21@gmail.com).</p>\n</div>"},{"title":"Ang Antares Programming","url":"/antares-blog/tungkol-sa-amin/index.html","content":"<h1 class=\"post__title\">Ang Antares Programming</h1>\n\n<div class=\"page-content\">\n    <p>Ang Antares Programming ay isang <i>brand</i> na ginawa para makapaglaan ng de-kaildad na educational materials at developer resources sa wikang Filipino. Sa kasalukyang kalagayan nito, naka-focus ang Antares Programming sa Web development. Pero sa simula pa lang, tunguhin na ng Antares Programming na sakupan din ang iba pang mga platforms.</p>\n\n    <h2 id=\"kasaysayan\">Ang Pasimula ng Antares Programming</h2>\n\n    <p>Nagsimula ang Antares Programming noong Nobyembre 2018, nang gumawa si Francis Rubio (kasalukuyang lead writer) ng isang Facebook page para sa pagpi-freelance niya bilang isang software developer. Pero kaagad pagkatapos niyan, binago ni Rubio ang layunin ng page mula sa isang marketing strategy tungo sa isang educational venture. Matagal na kasi niyang naiisip na gumawa ng ganoong page. At dahil na rin sa tulong ng pinakamalalapít niyang mga kaibigan, dumami ang followers ng nasabing page.</p>\n\n    <p>Naisip ni Rubio na pangalanan ang page ng <i>Antares Programming</i> alinsunod na rin sa pangalang ginagamit niya noon bilang kaniyang online persona. Kilala kasi siya online bilang <i>Johannes Gregory Antares</i> noon. At bukod pa riyan, ang <i>Antares</i> ay pangalan ng kompanya ng isa sa mga kontra-bida sa American TV series na <cite>How to Get Away With Murder</cite>, ang paboritong TV series ni Rubio.</p>\n\n    <p>Sinundan ito ng pagbubukas ng site na ito, ang <i>Antares Blog</i>. Sinimulan ni Rubio ang development ng site noong Disyembre 5, 2018 gamit ang <a href=\"https://hexo.io\">Hexo</a> bilang kaniyang blog engine. Unang na-publish ang site noong December 6, 2018, sa ganap na `3:37 AM UTC+08`.</p>\n\n    <h2 id=\"author\">Ang Lead Writer</h2>\n\n    <p>Ang lead writer ng Antares Programming mula pa sa pasimula ay si [Francis Rubio](https://celestialcinnamon.github.io/). Kahit na ang Antares Programming ay isang *one-man team*, tinatawag ni Rubio ang sarili niya bilang *lead writer* (na para bang may iba pa siyang kasama sa Antares Programming). Dahil kasi ito sa kagustuhan niyang ipaalam sa mga tao na kahit isa lang ang writer ng Antares Programming, bukás siya sa lahat ng posibilidad ng pakikipagtulungan para sa writing, research at proofreading.</p>\n\n    <p>Sa ngayon, si Francis Rubio ay nagtuturo sa isang paaralan bilang isang computer teacher.</p>\n\n    <h2 id=\"tulungan-kami\">Kung Paano Ka Puwedeng Tumulong</h2>\n\n    <p>Bukás pa rin ang Antares Programming para sa mga gustong magbigay ng tulong. Marami kang puwedeng gawin para makatulong. Narito ang ilan:</p>\n\n    <h3>Publicity ng Antares</h3>\n\n    <p>Ang dugo at buhay ng Antares Programming ay ang sinabi ni Rubio noon: <q>Hindi naman kailangan na sobrang laki ng audience. Ang mahalaga ay iyong may nakaka-appreciate. Kahit lumiit na ang audience [ng Antares Programming], hangga't mayroong kahit isang tao na nakikinabang sa mga content na nilalabas ko, magpapatuloy ang Antares Programming.</q></p>\n\n    <blockquote>\n        <p>Hindi naman kailangan na sobrang laki ng audience. Ang mahalaga ay iyong may nakaka-appreciate. Kahit lumiit na ang audience [ng Antares Programming], hangga't mayroong kahit isang tao na nakikinabang sa mga content na nilalabas ko, magpapatuloy ang Antares Programming.</p>\n        <address class=\"citation\">Francis Rubio, Lead Writer ng Antares Programming</address>\n    </blockquote>\n\n    <p>Pero kahit na ganiyan ang stance ng Antares Programming, gustong-gusto pa rin naming makita ng pinakamaraming tao hangga't posible ang pagsisikap na ito. Kung sa bagay, kahit na de-kalidad ang nilalaman, hindi iyon magiging kapaki-pakinabang kung walang nakikinabang dito. Kaya malaking tulong ang pagse-share ng mga post ng Antares Blog sa lahat ng social media sites na mayroon ka. Sabihin sa mga kaibigan mong developers na nag-e-exist ang site na ito. Sa paggawa niyan, mas marami ang puwedeng makinabang sa pagsisikap na ito.</p>\n\n    <h3>Writing, Proofreading, at Research</h3>\n\n    <p>Ang lead writer na si Francis Rubio ay isang Web developer. At kahit na sabihin pa nating marami siyang alam sa ibang platform gaya ng .NET, Android, at Unity game development, hindi niya kayang gumawa ng *de-kalidad* na content tungkol sa mga iyon. Kaya naman *napakalaking tulong* sa Antares Programming kung kaya mong magpahiram ng isang artikulo na puwedeng i-post sa Antares Blog. Kung interesado ka, puwede kang magpasa ng isang draft post sa [e-mail address ng lead writer][2]. Puwede ka ring magbukas ng issue sa [Github repository ng Antares Blog][1]. Para sa karagdagang impormasyon, tingnan ang artikulong <cite><a href=\"../writing-guidelines\">Mga Guidelines sa Pagsulat ng Artikulo para sa Antares Blog</a></cite>.</p>\n\n    <p>Bukod pa riyan, mahalaga para sa Antares Programming ang pagkakaroon ng isang madaling-maunawaan pero tumpak-sa-balarilang paraan ng pananalita. Kailangan ng Antares Programming ng isang proofreader na <em>bihasang-bihasa</em> sa gramatikang Filipino. Kaya kung sa tingin mo ay puwede kang makatulong sa pagpu-proofread ng mga artikulo sa Antares Blog bago ito mai-post, mag-send lang ng [e-mail sa lead writer][2]. Puwede ka ring magbukas ng issue sa [Github repository ng Antares Blog][1] kung may nakita kang maling grammar o kahit maling impormasyon.</p>\n\n    <p>Alam namin na napakahirap ng mga gawaing ito; ito mismo ang kinakaharap namin tuwing gagawa kami ng bagong artikulo o set ng mga infographic. Kaya naman kung puwede lang, gugustuhin naming magbigay ng kahit maliit na halaga lang para sa mga gustong tumulong. Iyon nga lang, hindi pa kaya ng Antares Programming na gawin iyan sa kasalukuyang estado nito. Ang tanging maibibigay lang nito pabalik ay credits sa mga ginawa niyong tulong. Para sa karagdagang impormasyon tungkol sa credits sa mga taong tumulong, tingnan ang artikulong [Ang Copyright ng Antares Programming](../copyright).</p>\n\n    <h3>Financial Support</h3>\n\n    <p>Puwede ring magpadala ng donasyon sa anyong salapi. <em>Napakalaking</em> tulong nito, at pasasalamatan ka ng Antares Programming. Isasama ka rin sa listahan ng mga tumutulong sa Antares Programming. Tandaan lang na ang bawat donasyon ay hindi puwedeng lumagpas sa <span class=\"numerical-value\">₱1,000.00</span> sa bawat beses. Tandaan din na ang pagbibigay ng donasyong pera ay hindi magbibigay sa iyo ng karapatang magsabi ng kung ano ang lalabas at hindi lalabas sa Antares Blog; walang responsibilidad ang Antares Programming na sumunod sa anumang sabihin ng mga nagdo-donate ng pera, at walang anumang bahagi ng Antares Programming ang magiging pagmamay-ari ng mga nagdo-donate ng pera. Ang tanging kapalit lamang ng inyong tulong ay ang paglitaw ng pangalan ninyo sa listahan ng mga tumulong.</p>\n\n    <p>Hindi rin pinapayagan ng Antares Programming ang paglalagay ng ads sa Blog. Taliwas ito sa layunin ng Antares Programming na maging isang pinagkukunan ng libreng impormasyon sa halip na maging isang entity na pinagkakakitaan ang mga user nito. Bukod pa riyan, ang mga advertisements ay nag-iiwan ng cookies sa mga users at tina-track ang mga ito. Taliwas din iyan sa prinsipyo ng Antares Programming na pagrespeto sa privacy at security ng users nito. Magkagayunman, puwedeng isaayos ang mga request sa mga nais mag-sponsor sa Antares Programming. Mag-send lang ng [e-mail sa lead writer][2] o tingnan ang subheading na [Pag-sponsor sa Antares Programming](../copyright/#sponsorship) sa artikulong <cite>Ang Copyright ng Antares Programming</cite>.</p>\n\n    <h3>Pagbibigay ng mga Suggestions</h3>\n\n    <p>Puwede ka ring magbigay ng mga suggestions (na baka o baka hindi namin sundin, depende sa kalagayan). Kung may gusto kang i-suggest, puwede kang mag-send ng message sa [Facebook page](https://facebook.com/antaresprogramming) ng Antares Programming o mag-send ng [e-mail sa lead writer][2].</p>\n\n    <h2>Conclusion</h2>\n\n    <p>Ummasa kami na magagawa pa namin ito nang isa o higit pang taon mula ngayon. Umaasa kami na mas marami pa ang makakakita ng mga efforts na ginagawa namin. At umaasa kami na makakatulong kayo sa amin. Maraming salamat sa patuloy na pagsuporta sa Antares Programming!</p>\n</div>\n\n[1]: https://github.com/celestialcinnamon/antares-blog\n[2]: mailto:francoisoibur21@gmail.com"},{"title":"Mga Guidelines sa Pagsulat ng Artikulo Para sa Antares Blog","url":"/antares-blog/writing-guidelines/index.html","content":"\n<h1 class=\"post__title\">\n    Mga Guidelines sa Pagsulat ng Artikulo Para sa Antares Blog\n</h1>\n\n<div class=\"page-content\">\n\n    <p>Kung may idea ka na sa tingin mo ay makakatulong sa mga kapuwa mo software developers, o kahit sa mga baguháng\n        developers na nag-aaral pa lang, puwede kang magsulat ng artikulo para sa Antares Programming. Hindi kailangan\n        na\n        napakalaking research ang gawin mo, at hindi rin kailangan na maging revolutionary ang epekto sa tech industry\n        ng\n        isusulat mo. Ang kailangan mo lang ay</p>\n\n    <ul>\n        <li>pasimplehin ang isang komplikadong konsepto</li>\n        <li>mag-alok ng isang alternatibong paraan ng paggawa ng isang bagay na sa tingin mo ay mas mabisa kaysa sa kung\n            paano ito\n            ginagawa ng karamihan</li>\n        <li>gumawa ng isang <i>goal-oriented</i> na tutorial tungkol sa isang technology</li>\n    </ul>\n\n\n    <p>Pero may isang babala: nangangailangan ng maraming lakas at panahon ang pagsulat ng mga artikulo para sa Antares\n        Blog.\n        Layunin kasi nito na maging isang pioneer ng pagbibigay ng de-kalidad na educational resources tungkol sa\n        software\n        development. Kaya naman gusto rin namin na tulungan kang mas mapaghusay pa ang isinulat mo.</p>\n\n    <h2 id=\"Ang-Prinsipyo-ng-mga-Artikulo\">Ang Prinsipyo ng mga Artikulo</h2>\n\n    <p>Ang mga artikulo sa Antares Blog ay dapat na</p>\n\n    <ol>\n        <li><strong>Hindi teknikal.</strong> Ang mga artikulo ay dapat na maging mas simple at mas madaling unawain\n            kaysa sa mga aktuwal na\n            documentation at technical documents. Ang mga artikulo ay dapat na magpaliwanag ng mga terminolohiya,\n            magbawas ng mga\n            salita para maging mas malinaw ang punto, at maging isang semi-cheatsheet&mdash;madaling mahanap sa buong\n            artikulo ang\n            sagot sa isang tanong.</li>\n        <li><strong>May personalidad.</strong> Dapat na ang tinig ng mga artikulo ay parang isang kaibigan, kaklase, o\n            katrabaho na\n            nagpapaliwanag ng isang ideya sa kapuwa niya. Hindi ito dapat na maging isang robotic, technical, o textbook\n            type na\n            paliwanag.</li>\n        <li><strong>Nakasulat sa isang wikang madaling maintindihan.</strong> Isulat ang artikulo sa mother tongue ng\n            target audience mo.\n            Dapat na nakasulat ito sa wikang ginagamit araw-araw ng mga mambabasa mo. Dapat na ito ay malinaw, simple,\n            at hindi\n            nangangailangan ng konteksto para maunwaan.</li>\n        <li><strong>Tumpak, nakasalig sa matitibay na ebidensya, suportado ng mga nakakukumbinsing argumentong may\n                kasamang patotoo.</strong>\n            Dapat na tama ang lahat ng impormasyon sa artikulo. Hindi ito nanloloko, at hindi rin nito pinipilipit ang\n            mga\n            statistics, datos, quotes, atb. para umayon ang ebidensiya sa argumentong inilalahad. Kailangan na ang\n            ebidensiyang\n            ginagamit ay galing sa mapagkakatiwalaang mga source.</li>\n        <li><strong>Umaakay sa mas malalim na pag-iisip at higit pang pag-aaral.</strong> Dapat na kalakip ng bawat\n            artikulo ang mga reference\n            na pinagbatayan o pinagkunan ng impormasyon. Dapat din nitong pasiglahin ang mga mambabasa na magsagawa ng\n            sarili nilang\n            pagsasaliksik at huwag basta umasa sa mga inilahad ng artikulo; dapat na patunayan nila sa sarili nila na\n            tama ang\n            natututuhan nila.</li>\n        <li><strong>Hindi nagtataguyod ng anumang ideolohiya bilang mas mabuti kaysa iba kung hindi naman\n                kailangan.</strong> Hindi ito dapat\n            magsimula ng pagkakabaha-bahagi ng opinyon. Dapat na transparent nitong ipinakikita ang advantage at\n            disadvantage ng\n            bawat panig. Maaari nitong banggitin ang mga dahilan kung bakit sa opinyon ng manunulat ay mas maganda ang\n            isang panig\n            kaysa iba pa, pero hindi nito dapat ituro ang opinyon ng manunulat na para bang ito ang Dakila at\n            Walang-Kamalian,\n            Kataas-taasang Katotohanan™.</li>\n    </ol>\n\n\n    <h2 id=\"Ang-Hinahanap-Namin\">Ang Hinahanap Namin</h2>\n\n    <p>Puwede kang magpasa sa amin ng isang rough draft, o isang <i>pitch</i> (isa o dalawang parapo na nagbubuod sa\n        argumento\n        mo at kung bakit mahalaga ito para sa mga mambabasa), at kasama nito ay isang outline o skeleton ng magiging\n        takbo ng\n        buong artikulo mo. Kapag mas kumpleto ang ipinasa mo, mas madali sa amin na makapagbigay ng magandang feedback.\n        Tandaan\n        din na mga <i>original content</i> lang ang tinatanggap namin&mdash;hindi kami tumatanggap ng content na lumabas\n        na sa\n        ibang lugar (kasama na ang personal blog mo).</p>\n\n    <h2 id=\"Sa-Pagpapasa\">Sa Pagpapasa</h2>\n\n    <p>Kailangan na ang draft na ipapasa mo ay:</p>\n\n    <ul>\n        <li>May thesis statement at nagbibigay ng malinaw na mga punto&mdash;hindi lang ito dapat listahan ng mga tips\n            at tricks.</li>\n        <li>May tinig. Kinakailangan na maramdaman ng isang mambabasa na para lang silang nakikipag-usap sa isang\n            totoong tao.\n            Maging interesante at masigla.</li>\n        <li>Isinulat para sa mga</li>\n        <ul>\n            <li>Baguháng developers</li>\n            <li>Mga estudyante ng Information Technology, Computer Science, o kapareho nito</li>\n            <li>Mga software developers na may karanasan na</li>\n        </ul>\n        <li>Suportado ng mga nakakukumbinsing argumento, hindi lang ng mga opinyon. Dapat na na-fact-check ito, at kung\n            posible,\n            may mga pagtukoy sa mga reference.</li>\n    </ul>\n\n\n    <h2 id=\"Ang-Pina-publish-Namin\">Ang Pina-publish Namin</h2>\n\n    <p>Karaniwan nang 600 hanggang 2,500 words ang target ng mga artikulo sa Antares Blog, depende sa kung gaano\n        kakomplikado\n        ang paksang tinatalakay. Puwede ring magsama ng mga <i>royalty-free</i> na images, at puwede ka ring gumawa ng\n        sarili\n        mong mga illustrations para sa mga visual aids na kailangan mo sa artikulo mo. Puwede kang magpaka-casual sa\n        article mo\n        (na ine-encourage namin sa mga writers namin), pero puwede ka rin namang magpakapormal, basta hindi ka magiging\n        napakateknikal sa puntong mas mabuti pa na hindi na lang naisulat ang artikulo mo.</p>\n\n    <h2 id=\"Kung-Paano-Magpapasa\">Kung Paano Magpapasa</h2>\n\n    <p>Ipadala sa amin ang draft ng artikulo gamit ang e-mail. Puwede mo itong ipadala sa lead writer:\n        <a href=\"mailto:francisrubio@pm.me\">francisrubio@pm.me</a>. Mas masisiyahan kami kung ipapadala mo ito bilang isang Google document para mas madali kaming makapagbigay ng feedback doon mismo sa draft mo. Pero puwede ka ring magpasa ng drafts sa <code>.txt,</code> <code>.md</code>, o HTML format. Pakisuyong huwag magpadala ng ZIP file na naglalaman ng assets na gagamitin mo sa\n        artikulo, malibang hiniling sa iyo ng editor na gawin iyon.</p>\n\n    <p>Kapag natanggap na ng lead writer ang draft mo, ikukumpara ito sa <a>mga prinsipyo ng Antares Blog articles</a>. Kapag nakaayon ito sa mga iyon, ibibigay ng lead writer sa iyo ang draft mo, kasama ang ilang mga komento. Pagkatapos, puwede mo nang simulang isulat ang first draft ng artikulo mo.</p>\n\n    <p>Sa first draft, itpa-fact-check ng lead writer ang mga impormasyon, sources, at references na inilakip mo sa article mo. Itse-check din dito ang daloy ng mga punto sa artikulo mo. Kapag natapos na ito, susunod namang aayusin ang second draft.</p>\n\n    <p>Sa second draft, aayusin naman ang wording at personality ng artikulo mo. Sa phase na ito, titiyakin na madaling maintindihan ang mga isinulat mo. Titingnan din kung palakaibigan ba ang personalidad ng isinulat mo. Kapag ayos na ang mga ito, susunod na ang grammar at spelling checks.</p>\n\n    <p>Sa third draft, aayusin ang buong artikulo. Titingnan ang katumpakan sa balarila, baybay ng mga salita, at iba pang proofreading. Sa third draft din, kung may mga images ka o videos na ilalagay kasama ng artikulo mo, sisimulan na ring lagyan ito ng mga <i>alt text</i> at captions. Kapag naayos na ito, puwede nang simulan ang formatting.</p>\n\n    <p>Sa formatting, ilalagay mo ang artikulo mo sa isang HTML o Markdown file para maisama ito at mailathala sa Antares Blog. Sa puntong ito, malamang na nasunod mo na ang karamihan sa mga nasa <a href=\"#Ang-Antares-Writing-Style-Guide\">Antares Writing Style Guide</a>. Pero sa\n        pinakahuling pagtse-check, titingnan ulit kung may ilang bagay pang nakaligtaang gawin. Kung lahat ay maayos na, gagawan na ito ng lead writer ng social media assets para maging maganda ang hitsura nito sa mga social media sites.</p>\n\n    <p>Kapag naayos na ang lahat, ilalathala na ang artikulo mo sa Antares Blog, at iaanunsyo ang publishing nito sa Facebook page ng Antares Programming.</p>\n\n    <h2 id=\"Ang-Antares-Writing-Style-Guide\">Ang Antares Writing Style Guide</h2>\n\n    <p>Ang mga artikulo sa Antares Blog ay kadalasan nang casual, at may conversational na tinig. Pero hindi nito isinasakripisyo ang pagiging malinaw at tumpak ng impormasyon.</p>\n\n    <h3 id=\"Siksik-na-Artikulo-at-Maiikling-Introduksyon\">Siksik na Artikulo at Maiikling Introduksyon</h3>\n\n    <p>Walang lugar para sa mahabang kuwento, at hindi rin kailangan na maging isang kumpletong aklat ang artikulo mo. Sabihin agad ang ideya mo nang malinaw at mabilis. Kung may sinosolusyonang problema ang tutorial mo, sabihin kung ano ang problemang iyon. Hindi mo kailangang ikuwento ang talambuhay ni Ada Lovelace bago ka pumunta sa punto mo.</p>\n\n    <h3 id=\"Laging-Isipin-ang-mga-Mambabasa-Mo\">Laging Isipin ang mga Mambabasa Mo</h3>\n\n    <p>Malawak ang target audience ng Antares Programming&mdash;mula sa mga nagsisimula pa lang hanggang sa mga eksperto na sa software development. Gawing simple ang artikulo mo, pero huwag mong isipin na talagang walang alam kahit kaunti ang mga mambabasa mo.</p>\n\n    <p>Magbigay ng mga definition para sa mga terminology na ginagamit mo, at kung mahaba-haba ito, ilagay ito sa dulo ng artikulo mo, i.e., sa footnotes. Puwede mong ipaliwanag sa sarili mong salita ang term na ginamit mo, pero puwede ka ring magbigay ng link sa isang resource na nagde-define nito.</p>\n\n    <h3 id=\"Paggamit-ng-mga-Paghahalintulad\">Paggamit ng mga Paghahalintulad</h3>\n\n    <p>Mabisang kagamitan sa pagtuturo ang mga paghahalintulad, pero hindi mo dapat isalalay sa mga ito ang buong argumento mo. Huwag gumamit ng mga paghahalintulad na naglalahad ng mahahabang kuwento para lang maitawid ang punto mo.</p>\n\n    <h3 id=\"Mas-Mahalaga-ang-Pagiging-Malinaw\">Mas Mahalaga ang Pagiging Malinaw</h3>\n\n    <p>Huwag gumamit ng mga jargon kung hindi naman kailangan. Tanggalin ang mga salita na puwede namang wala na doon. Siguraduhing hindi nakakalito ang mga panghalip na ginagamit mo. Sikaping gawing mabilis ang takbo ng artikulo mo at maikli pero malinaw ang paliwanag mo. Bawasan ang paggamit ng mga pagtukoy sa mga kasabihang baka hindi alam ng lahat.</p>\n\n    <h3 id=\"Mga-Image\">Mga Image</h3>\n\n    <p>Ang mga image ay dapat na may kasamang alt text na naglalarawan ng mga nasa image mo. Tandaan na ang alt text ay isang text version ng image para sa mga hindi kayang makita ito, marahil dahil sa kapansanan o dahil hindi lang nag-load ang image. Siguruhin ding may kasama itong caption na nagpapaliwanag kung para saan ang image na iyon.</p>\n\n    <p>Huwag gawing image ang mga code samples. Laging isama ang code samples sa mga document na ipinapasa mo. Puwede ka\n        ring\n        gumamit ng CodePen para sa mga code samples sa Web platform, at GitHub Gists kung ibang language ang gamit mo.\n    </p>\n\n    <p>I-screenshot ang output ng code mo sa machine mo. Sa mga example na gaya ng sa CSS at JavaScript, maaaring hindi\n        gumana\n        ang code snippet na binigay mo dahil maaaring mas lumang browser ang gamit ng user o naka-disable ang JavaScript\n        nito.\n        Sa lahat ng example, laging magsama ng screenshot ng output ng code mo.</p>\n\n    <p>Ang mga image ay dapat na 1920px wide at may mataas na resolution. Kung kinakailangan itong bababaan, kami na ang\n        bahalang mag-compress nito. Katanggap-tanggap na image format ang <abbr\n            title=\"Portable Network Graphics\">PNG</abbr>,\n        <abbr title=\"Graphics Interchange Format\">GIF</abbr>, at <abbr\n            title=\"Joint Photographic Experts Group\">JPEG</abbr>.\n        Kung may maraming text sa image, mas maganda kung ito ay nasa PNG o GIF. Huwag gumamit ng JPEG sa mga screenshot\n        ng Web\n        pages.</p>\n\n    <p>Huwag ding maglagay ng memes sa artikulo mo. Totoo, gusto nating magkaroon ng palakaibigang tono, pero\n        nababantuan ng\n        ganitong klase ng humor ang impormasyong gusto mong itawid. Bukod pa riyan, makadaragdag ang images na ito sa\n        kabuuang\n        file size ng page, at magiging problema ito sa mga mambabasang naglo-load ng bilang na Internet data. Gusto\n        nating\n        maging siksik ang nilalaman ng artikulo; ayaw nating mag-download ang device ng mambabasa ng mga assets na hindi\n        naman\n        nila kailangan.</p>\n\n    <h3 id=\"Tungkol-sa-Author\">Tungkol sa Author</h3>\n\n    <p>Lahat ng final drafts ay kinakailangang may kasamang author bio at larawan ng manunulat. Dapat na nasa 40-60\n        words ang\n        biography ng author. Puwede itong magkaroon ng mga link. Dapat na ang mga ito ay siksik sa impormasyon at\n        maikli.</p>\n\n    <p>Halimbawa:</p>\n\n    <blockquote class=\"default-blockquote\">\n        <p>Si Francis Rubio ay isang <a href=\"https://celestialcinnamon.github.io/\">freelance Web Developer</a> at high\n            school programming\n            teacher. Siya ang lead writer ng <a href=\"https://celestialcinnamon.github.io/antares-blog\">Antares\n                Programming</a>. Nasa\n            <a href=\"https://github.com/celestialcinnamon\">Github</a> siya, <a\n                href=\"https://facebook.com/blondfreeman\">Facebook</a>, at\n            <a href=\"https://instagram.com/adscititiousconniption\">Instagram</a>. Mahilig siyang mag-design ng mga user\n            interface at gumawa ng\n            mga educational resources. <i>(40 words)</i></p>\n    </blockquote>\n\n    <p>Hindi kailangang professional ang pagkakakuha sa mga author photo. Ang Kailangan lang dito ay pulido. Huwag\n        magbigay ng\n        mga photos kung saan halatang ipinatong lang ang coat and tie. Ang minimum size nito ay 400px &times; 400px at\n        dapat na\n        malinaw ito.</p>\n\n    <h3 id=\"Estilo-ng-Pagsulat\">Estilo ng Pagsulat</h3>\n\n    <p><strong>Sumulat sa ikalawang panauhan.</strong> Tunguhin mong maging palakaibigan sa pagsulat. Puwede mong\n        kausapin ang mambabasa at\n        gamitin ang mga salitang &ldquo;ikaw&rdquo;, &ldquo;kayo&rdquo;, &ldquo;tayo&rdquo; at iba pa.</p>\n\n    <p><strong>Gumamit ng wastong pagpapaikli.</strong> Puwedeng gumamit ng <i>&lsquo;wag</i>, <i>'to</i>, <i>'di</i>,\n        <i>y'ong</i>, at\n        <i>'yong</i>. Gamitin ang <i>y'ong</i> bilang pampaikli sa salitang <i>yaong</i> (<i>the</i>) (na ginagamit\n        bilang\n        alternatibo sa salitang <i>ang</i>). Gamitin naman ang <i>'yong</i> bilang pampaikli sa <i>iyong</i>\n        (<i>your</i>) na\n        nagpapakita ng pagmamay-ari.</p>\n\n    <p><strong>Gamitin ang Oxford comma.</strong> Sa mga serye ng salita na may kudlit o comma, maglagay ng isa pang\n        comma sa pagitan ng\n        ikalawa sa huling halimbawa at ng salitang <i>at</i>.</p>\n\n    <p>Halimbawa: <q>Ang kailangan mo lang sa tutorial na ito ay text editor, kaunting kaalaman sa HTML, CSS,\n            JavaScript, at\n            isang baso ng kape.</q> (Pansinin na sa pagitan ng salitang <i>JavaScript</i> at <i>at</i> ay may kudlit.\n        Ito ang\n        Oxford comma.)</p>\n\n    <p><strong>Capitalizations.</strong> I-capitalize ang mga tiyak na pangngalan (e.g. Java, World Wide Web, Tim\n        Berners-Lee, Jen Simmons).\n        Huwag i-capitalize ang mga pang-uri o adjectives.</p>\n\n    <p><strong>Citations.</strong> Sa mga citation o pagtukoy sa mga quotations mula sa ibang resources, gamitin ang\n        <abbr title=\"American Psychological Association\">APA</abbr> format. Pero ang mga citation ay hindi dapat\n        naka-inline. Sa\n        halip, ang mga ito ay dapat na nasa footnote.</p>\n\n    <figure class=\"img-wrapper img-wrapper--full-width\">\n        <table class=\"table table--left\">\n            <caption>Ang APA Style</caption>\n            <thead>\n                <tr>\n                    <th>Reference Type</th>\n                    <th>Pattern</th>\n                    <th>Halimbawa</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Journal Article</td>\n                    <td>Author, A., &amp; Author, B. (taon). Pamagat ng Artikulo. <cite>Pamagat ng Journal, Volume\n                            Number</cite>, mga pahina.</td>\n                    <td>Schmidt, F. L., &amp; Oh, I.-S. (2016). The crisis of confidence in research findings in\n                        psychology: Is\n                        lack of replication the real problem? Or is it something else? <cite>Archives of Scientific\n                            Psychology, 4</cite>, 32–37.</td>\n                </tr>\n                <tr>\n                    <td>Buong aklat</td>\n                    <td>Author, A., &amp; Author, B. (year). <cite>Title of book</cite>. DOI/URL/Publisher location:\n                        Publisher\n                        Name.</td>\n                    <td>Brown, B. (2010). <cite>The gifts of imperfection: Let go of who you think you&rsquo;re supposed\n                            to be and\n                            embrace who you are.</cite> Center City, MN: Hazelden. </td>\n                </tr>\n                <tr>\n                    <td>Kabanata ng isang aklat</td>\n                    <td>Author, A., &amp; Author, B. (year). Title of chapter. In E. Editor &amp; A. Editor (Eds.),\n                        <cite>Title of\n                            book</cite> (pp. xx-xx). DOI/URL/Publisher location: Publisher Name.</td>\n                    <td>Singh, A. A., Hwahng, S. J., Chang, S. C., &amp; White, B. (2017). Affirmative counseling with\n                        trans/gender-variant people of color. In A. Singh &amp; L. M. Dickey (Eds.), <cite>Affirmative\n                            counseling and psychological practice with transgender and gender nonconforming\n                            clients</cite>\n                        (pp. 41–68).</td>\n                </tr>\n                <tr>\n                    <td>Website</td>\n                    <td>Author. (year). Title of page. Retrieved Date, from <a>http://xxxxxxx</a> </td>\n                    <td>American Psychological Association. (n.d.). Divisions. Retrieved October 28, 2018, from\n                        <a href=\"http://www.apa.org/about/division/\">http://www.apa.org/about/division/</a></td>\n                </tr>\n            </tbody>\n        </table>\n    </figure>\n    </p>\n\n    <p><strong>Mga Headings at Subheadings.</strong> Gumamit ng title case (bawat mahalagang salita ay\n        naka-capitalized). Huwag itong lagyan ng bantas maliban na lang kung ito ay patanong, padamdam, o serye ng mga\n        salita na nangangailangan ng mga kudlit. Gumamit ng <code>h2</code> para sa mga headings at <code>h3</code> sa\n        mga subheadings. Siyempre, puwede mo pang gamitin ang <code>h4</code> hanggang <code>h6</code>, pero pag-isipang\n        mabuti kung kailangan mo talaga nito. Huwag gumamit ng <code>h1</code> sa mga subheadings dahil para ito sa\n        pamagat ng artikulo, na magsisilbi ring pamagat ng Web page ng artikulo mo.</p>\n\n    <p><strong>Mga Inline Code.</strong> Ilagay sa loob ng <code>&lt;code>&lt;/code></code> tags ang mga inline code.\n        Kung ang code naman ay resulta o output ng isang computer program, gamitin ang\n        <code>&lt;output>&lt;/output></code> tags.</p>\n\n    <p><strong>Mga Standalone Code Blocks.</strong> Gumamit ng tab (hindi spaces) sa pag-i-indent. Bawat nested line ay\n        dapat na isang tab ang layo mula sa parent nito. Gamitin ang Standard JS formatting para sa mga code.</p>\n\n    <p><strong>Mga Function.</strong> Kailangan na kasama ng function name ang parenthesis <code>()</code> nito maliban\n        na lang kung malinaw na sinabi na ito ay function. Halimbawa:</p>\n\n    <blockquote class=\"default-blockquote\">Sa pagkakataong ito, ipapasa natin ang input sa <code>doSomething()</code>.\n    </blockquote>\n\n\n    <p></p>\n\n    <p>Pero puwede rin ito:</p>\n\n    <blockquote class=\"default-blockquote\">Sa pagkakataong ito, ipapasa natin ang input sa function na\n        <code>doSomething</code>.</blockquote>\n\n\n    <p></p>\n\n    <p><strong>Mga Listahan.</strong> Sundin ang mga sumusunod na guidelines para sa mga listahan:</p>\n\n    <ul>\n        <li>Kung ang isang item sa list ay bumubuo ng kumpletong diwa, samakatuwid nga, isang wastong pangungusap,\n            i-capitalize ito at lagyan ng tuldok sa dulo.</li>\n        <li>Maging consistent. Kung ang isang item ay isang buong pangungusap, dapat na lahat ng item sa list na iyon ay\n            isang buong pangungusap din.</li>\n        <li>Kung hindi buo ang diwa ng isang item, huwag itong i-capitalize at huwag din itong lagyan ng tuldok sa dulo.\n        </li>\n    </ul>\n\n\n    <p>Kung ang listahan mo ay karugtong ng isang pangungusap na hindi natapos,</p>\n\n    <ul>\n        <li>huwag i-capitalize ang mga unang salita sa bawat item;</li>\n        <li>tapusin ang bawat items sa isang semi-colon;</li>\n        <li>maliban sa huling item;</li>\n        <li>maglagay ng <i>at</i> pagkatapos ng semi-colon sa pangalawa sa huling item; at</li>\n        <li>tapusin sa tuldok ang huling item.</li>\n    </ul>\n\n\n    <p><strong>Mga Acronym at Abbreviations.</strong> Huwag gamitin ang <code>&lt;acronym></code> tag dahil obsolete na\n        ito. Para sa mga acronym at abbreviations, gamitin ang <code>&lt;abbr></code> at ilagay sa <code>title</code>\n        attribute nito ang ibig sabihin ng abbreviation o acronym.</p>\n\n    <p><strong>Mga Citation.</strong> Ilagay sa loob ng <code>&lt;cite>&lt;/cite></code> ang mga pamagat ng aklat,\n        magazine, news papers, at mga articles na binabanggit sa artikulo mo.</p>\n\n    <p><strong>Pangalan ng mga Kompanya at Publikasyon.</strong> Sundin ang capitalization rules na gusto ng mga may-ari\n        para sa mga tiyak na pangalan na gaya ng Amazon, Facebook, Tumblr, at artRave.</p>\n\n    <p><strong>Mga Em Dash.</strong> Huwag maglagay ng space bago at pagkatapos ng em dash. Para naman sa mga date\n        range, gamitin ang en dash.</p>\n\n    <p><strong>Mga Quotations.</strong> Ilagay ang mga quotations sa loob ng <code>&lt;q>&lt;/q&gt;</code>. Ang CSS na\n        ang bahala sa kung anong quotation marks ang gagamitin.</p>\n</div>"},{"url":"/antares-blog/activity-studio/index/activity.js","content":"(function(){\n    const activityGrid = document.querySelector('.activity-grid');\n    activityGrid.classList.remove('hidden');\n\n    const activityButtons = document.querySelectorAll('.btn--activity')\n    activityButtons.forEach(button => button.addEventListener('click', triggerActivity));\n    window.activityArea = document.querySelector('iframe'); // This is another way of declaring global variables.\n})();\n\nfunction triggerActivity(event) {\n    const clickedButton = event.target;\n    const url = `activities/${clickedButton.dataset['url']}`\n\n    activityArea.src = url;\n    document.documentElement.classList.add('no-scroll');\n}"},{"title":"Mga Interactive na Content","url":"/antares-blog/activity-studio/activities/binary/index.html"}]